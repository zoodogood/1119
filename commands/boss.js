import * as Util from '#src/modules/util.js';
import { client } from '#src/index.js';
import {BossManager, BossEffects} from '#src/modules/BossManager.js';
import { ButtonStyle, ComponentType } from 'discord.js';

class Command {

  createEmbed({userEffects, userStats, member, boss}){
    const currentHealthPointPercent = 1 - boss.damageTaken / boss.healthThresholder;
    

    const contents = {
      currentHealth: BossManager.isElite(boss) ?
        Math.max(currentHealthPointPercent * 100, 0.1).toFixed(1) :
        Math.ceil(currentHealthPointPercent * 100),

      leaveDay: `–£–π–¥–µ—Ç ${ boss.endingAtDay ? Util.toDayDate(boss.endingAtDay * 86_400_000) : "–ù–∏–∫–æ–≥–¥–∞" }`,
      level: `–£—Ä–æ–≤–µ–Ω—å: ${ boss.level }.`
    };

    
    const description = `${ contents.level }\n${ contents.leaveDay }\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è: ${ contents.currentHealth }%`;
    const fields = [
      {
        name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        value: Object.entries(userStats)
          .map(([key, value]) => `${ key }: ${ Util.toLocaleDeveloperString(value) }`)
          .join("\n")
        
      },
      {
        name: "–≠—Ñ—Ñ–µ–∫—Ç—ã:",
        value: userEffects
          .map(({id}) => id)
          .join(",\n"),

        display: userEffects && userEffects.length
      }
    ]
    .filter((field) => "display" in field === false || field.display);

    const embed = {
      description,
      fields,
      thumbnail: boss.avatarURL,
      footer: {text: member.tag, iconURL: member.avatarURL()}
    }

    return embed;
  }

	async onChatInput(msg, interaction){
    const member = interaction.mention ?? msg.author;

    const guild = msg.guild;
    const boss = guild.data.boss ?? {};
    
    if (!boss.isArrived){
      const description = boss.apparanceAtDay ? 
        `–ü—Ä–∏–±—É–¥–µ—Ç –ª–∏—à—å ${ Util.toDayDate(boss.apparanceAtDay * 86_400_000) }` :
        "–ú–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";

      msg.msg({description, color: "#000000"});
      return;
    };

    const userStats   = BossManager.getUserStats(boss, member.id);
    const userEffects = BossEffects.effectsOf({boss, user: member});

    const context = {
      interaction,
      member,
      boss,
      userStats,
      userEffects
    }

    if (userStats.heroIsDead){
      this.displayHeadstone(context);
      return;
    }

    const REACTIONS = [
      {
        emoji: "‚öîÔ∏è",
        filter: ({boss}) => !BossManager.isDefeated(boss)
      },
      {
        emoji: "üïã",
        filter: () => true
      }
    ];
    
    const embed = this.createEmbed(context);
    const reactions = REACTIONS
      .filter(reaction => reaction.filter(context))
      .map(({emoji}) => emoji);

    const message = await msg.msg({...embed, reactions});
    
    const filter = (reaction, user) => user.id !== client.user.id && reactions.includes(reaction.emoji.name);
    const collector = message.createReactionCollector({filter, time: 60_000});
    collector.on("collect", async (reaction, user) => {
      reaction.users.remove(user);

      if (reaction.emoji.name === "‚öîÔ∏è"){
        BossManager.userAttack({boss, user, channel: message.channel});
      }

      if (reaction.emoji.name === "üïã"){
        BossManager.BossShop.createShop({channel: message.channel, user, guild: message.guild});
      }

      const embed = this.createEmbed(context);
      message.msg({...embed, edit: true});
    });

    collector.on("end", () => message.reactions.removeAll());
  }

  async displayHeadstone({interaction, member, boss, userStats}){
    const guild = interaction.guild;
    const contents = {
      level: `–£—Ä–æ–≤–µ–Ω—å: ${ member.data.level }.`,
      joined: `–ü–æ—è–≤–∏–ª—Å—è: ${ new Intl.DateTimeFormat("ru-ru", {year: "numeric", month: "2-digit", day: "2-digit"}).format(guild.members.resolve(member).joinedTimestamp) }`,
      heroStatus: "–í—ã–¥—É–º–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª –∏—Å–∫–∞–ª–µ—á–µ–Ω –∏ —É–º–µ—Ä—Ç–≤–ª—ë–Ω, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–º–µ—Ä. –í —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∫–≤–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã.\n"
    };

    
    const ritualAlreadyStartedBy = guild.members.cache.get(userStats.alreadyKeepAliveRitualBy) ?? null;
    const embed = {
      description: `${ contents.level }\n${ contents.joined }\n\n${ contents.heroStatus }`,
      thumbnail: "https://cdn.discordapp.com/attachments/629546680840093696/1063465085235900436/stone.png",
      components: ritualAlreadyStartedBy ? 
        {type: ComponentType.Button, style: ButtonStyle.Danger, customId: "KeepAlive", label: "–ü—Ä–æ–¥–ª–∏—Ç—å –∂–∏–∑–Ω—å"} :
        {type: ComponentType.Button, style: ButtonStyle.Secondary, customId: "KeepAlive", label: `–ü—Ä–æ–¥–ª–∏—Ç—å –∂–∏–∑–Ω—å (–£–∂–µ ‚Äî ${ ritualAlreadyStartedBy?.displayName })`, disabled: true},

      footer: {iconURL: member.avatarURL(), text: member.tag}
    };
    const message = await interaction.channel.msg(embed);
    const collector = message.createMessageComponentCollector({time: 120_000});

    collector.on("collect", (interaction) => {

      const isAlready = BossManager.getUserStats(boss, member.id).alreadyKeepAliveRitualBy;

      if (isAlready){
        interaction.msg({ephemeral: true, content: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"})
        return;
      }

      const user = interaction.user;
      const userStats = BossManager.getUserStats(boss, user.id);
      if (userStats.heroIsDead){
        interaction.msg({ephemeral: true, content: "–í–≤—ã—Å—å –∏ –≤–Ω–∏–∑; –í –æ–∫–Ω–æ, –∏ —Ç–∞–º –±—É–¥–µ—Ç —Å–Ω–µ–≥. –ó–∞–±—É–¥—å –æ–± —ç—Ç–æ–º ‚Äî —Ç—ã –º–µ—Ä—Ç–≤–µ—Ü."});
        return;
      }

      const effectBase = BossEffects.effectBases.get("deadlyCurse");
      const values = {keepAliveUserId: member.id};

      BossEffects.applyEffect({guild, user, effectBase, values});
      interaction.msg({
        description: `–ü—Ä–∏–º–∏—Ç–µ –∏ –∏–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è. –ü—Ä–æ–≤–∞–ª–∏—Ç–µ ‚Äî —Ç–∞ –∂–µ —É—á–∞—Å—Ç—å –ø–æ–¥ –∫–∞–º–Ω–µ–º.\n**–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ:** –µ–≥–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ —Å–Ω—è—Ç—å –≤ —Å—Ä–æ–∫.`,
        footer: {text: user.tag, iconURL: user.avatarURL()}
      });
      collector.stop();
    });
    
    collector.on("end", () => message.msg({edit: true, components: []}));
  }


	options = {
	  "name": "boss",
	  "id": 59,
	  "media": {
	    "description": "\n\n–ë–æ—Å—Å —Å—Ç—Ä–∞—à–µ–Ω. –ü–æ–±–µ–¥–∏—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–π—Ç–µ –ø–æ-–æ–¥–∏–Ω–æ—á–∫–µ. –û–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –º–µ—Å—è—Ü –∏ —É—Ö–æ–¥–∏—Ç —Å–ø—É—Å—Ç—è —Ç—Ä–∏ –¥–Ω—è.\n\n:pencil2:\n```python\n!boss <member>\n```"
	  },
	  "allias": "–±–æ—Å—Å",
		"allowDM": true,
		"type": "other"
	};
};

export default Command;
