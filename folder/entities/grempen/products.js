import client from "#bot/client.js";
import { ActionsMap } from "#constants/enums/actionsMap.js";
import { HOUR } from "#constants/globals/time.js";
import CurseManager from "#lib/modules/CurseManager.js";
import DataManager from "#lib/modules/DataManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";
import TimeEventsManager from "#lib/modules/TimeEventsManager.js";
import {
  addResource,
  ending,
  random,
  timestampDay,
  transformToCollectionUsingKey,
} from "#lib/util.js";

export const grempen_products = transformToCollectionUsingKey([
  {
    key: "stick",
    label: () => "–ü—Ä–æ—Å—Ç–æ –ø–∞–ª–∫–∞",
    emoji: () => "ü¶¥",
    price: () => 244,
    inline: true,
    others: ["–ø–∞–ª–∫–∞", "–ø–∞–ª–∫—É"],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      let phrase =
        ".\n–í—ã –∫—É–ø–∏–ª–∏ –ø–∞–ª–∫—É. –≠—Ç–æ —Å–∞–º–∞—è –æ–±—ã—á–Ω–∞—è –ø–∞–ª–∫–∞, –∏ –≤—ã –µ—ë –≤—ã–±—Ä–æ—Å–∏–ª–∏.";
      if (userData.monster) {
        const DENOMINATOR = 0.992;
        const COMMON_VALUE = 3;

        const MIN = 5;

        const max =
          (COMMON_VALUE * (1 - DENOMINATOR ** userData.monster)) /
            (1 - DENOMINATOR) +
          MIN;

        const count = Math.ceil(random(MIN, max));
        phrase += `\n–í–∞—à–∏ —Ä—É—á–Ω—ã–µ –ú–æ–Ω—Å—Ç—Ä—ã, –ø–æ–≥–Ω–∞–≤—à–∏—Å—å –∑–∞ –Ω–µ–π, –Ω–∞—à–ª–∏ ${ending(
          count,
          "–∫–ª—é—á",
          "–µ–π",
          "",
          "–∞",
        )}`;

        addResource({
          user: interaction.user,
          value: count,
          source: "command.grempen.product.stick",
          executor: interaction.user,
          resource: PropertiesEnum.keys,
          context: { interaction, product },
        });
        userData.keys += count;
      }

      return phrase;
    },
  },
  {
    key: "chilli",
    label: () => "–ñ–≥—É—á–∏–π –ø–µ—Ä—á–∏–∫",
    emoji: () => "üå∂Ô∏è",
    price: () => 160,
    inline: true,
    others: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—á–∏–∫"],
    fn(boughtContext) {
      const { userData, interaction, channel } = boughtContext;
      const product = this;
      if (userData.chilli === undefined) {
        channel.msg({
          title: "–û–∫–µ–π, –≤—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä–µ—Ü, –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å—Ç–µ –µ–≥–æ...",
          description: "–ö–æ–º–∞–Ω–¥–∞ –±—Ä–æ—Å–∫–∞ `!chilli @–ü–∏–Ω–≥`",
          delete: 12000,
        });
      }

      addResource({
        user: interaction.user,
        value: 1,
        source: "command.grempen.product.chilli",
        executor: interaction.user,
        resource: PropertiesEnum.chilli,
        context: { interaction, product },
      });
      return '. "–ì–æ—Ç–æ–≤—Ç–µ—Å—å –≥–ª—É–ø—Ü—ã, –≥—Ä—è–¥—ë—Ç —ç—Ä–∞ –ø–µ—Ä—á–∏–∫–æ–≤"';
    },
  },
  {
    key: "gloves",
    label: () => "–ü–µ—Ä—á–∞—Ç–∫–∏ –ø–µ—Ä—á–∞—Ç–Ω–∏–∫–∞",
    emoji: () => "üß§",
    price: () => 700,
    inline: true,
    others: ["–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫–∞"],
    fn(boughtContext) {
      const { userData, interaction, user } = boughtContext;
      const product = this;
      userData.thiefGloves === undefined &&
        user.msg({
          title: "–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–æ –ø–µ—Ä—á–∞—Ç–∫–∏?",
          description:
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!rob`.\n**–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:**\n–í–∞—à–∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–≥—Ä–∞–±–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω –æ–Ω–ª–∞–π–Ω.\n–í —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –º–∏–Ω—É—Ç —É –æ–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–≥–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–≥–Ω–∞—Ç—å –≤–∞—Å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏.\n–ï—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç–µ—Å—å –¥–≤–∞–∂–¥—ã, —Ç–æ –ø–µ—Ä—á–∞—Ç–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî —ç–¥–∞–∫–∏–π —Ä–∏—Å–∫.\n–ù—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ —É–º–Ω—ã–º, –∏—Å–∫–∞—Ç—å –º–æ–º–µ–Ω—Ç.\n–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–∏—Ç—Ä—ã, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ø–∞–ª–∏–ª, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä—á–∞—Ç–∫–∏.\n–¶–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–ª–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –í–∞—Å –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∞—Å—Ç—å, –∞ –≤–æ—Ä, —Ç–æ –µ—Å—Ç—å –í—ã, –¥–æ–ª–∂–µ–Ω –≤—ã–∂–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É.",
        });

      addResource({
        user: interaction.user,
        value: 2,
        source: "command.grempen.product.gloves",
        executor: interaction.user,
        resource: PropertiesEnum.thiefGloves,
        context: { interaction, product },
      });
      delete userData.CD_39;

      return ". _–†–µ–∂–∏–º –≤–æ—Ä–æ–≤–∏—Ç–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω._";
    },
  },
  {
    key: "nut",
    label: () => "–°—Ç–∞—Ä—ã–π –∫–ª—é—á",
    emoji: () => "üî©",
    price: () => 15,
    inline: true,
    others: ["–∫–ª—é—á", "–∫–ª—é—á–∏–∫", "key"],
    fn(boughtContext) {
      const { interaction } = boughtContext;
      const product = this;

      addResource({
        user: interaction.user,
        value: 1,
        source: "command.grempen.product.nut",
        executor: interaction.user,
        resource: PropertiesEnum.keys,
        context: { interaction, product },
      });
      return " –∏ —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ? –ù–µ—Ç! –≠—Ç–æ –Ω–µ –§–∏–∫—Å–∏–∫!";
    },
  },
  {
    key: "exp",
    label: () => "–ë—É—Ç—ã–ª—ë–∫ –æ–ø—ã—Ç–∞",
    emoji: () => "üß™",
    price: () => "???",
    inline: true,
    others: ["–æ–ø—ã—Ç", "–±—É—Ç—ã–ª—ë–∫"],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      const rand = random(3, 7);
      const LIMIT = 15_000;
      const flaconPrice = Math.min(Math.ceil(userData.coins / rand), LIMIT);
      const value = Math.ceil(flaconPrice * 0.2);
      addResource({
        user: interaction.user,
        value,
        source: "command.grempen.product.exp",
        executor: interaction.user,
        resource: PropertiesEnum.exp,
        context: { interaction, product },
      });

      boughtContext.price = flaconPrice;
      return `, –∫–∞–∫ –¥–æ—Ä–æ–≥—É—â–∏–π —Ñ–ª–∞–∫–æ–Ω –¥–∞–≤—à–∏–π –≤–∞–º —Ü–µ–ª—ã—Ö ${value} <:crys:637290406958202880>`;
    },
  },
  {
    key: "monster",
    label: () => "–†—É—á–Ω–æ–π –º–æ–Ω—Å—Ç—Ä",
    emoji: () => "üê≤",
    price: ({ userData }) =>
      1999 + 1000 * Math.ceil((userData.monstersBought || 0) / 3),
    inline: true,
    others: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–∞"],
    fn(boughtContext) {
      const { userData, interaction, channel } = boughtContext;
      const product = this;

      if (userData.monster === undefined) {
        userData.monster = 0;
        userData.monstersBought = 0;
        channel.msg({
          description:
            "–ú–æ–Ω—Å—Ç—Ä—ã –∑–∞—â–∏—â–∞—é—Ç –≤–∞—Å –æ—Ç –º–µ–ª–∫–∏—Ö –≤–æ—Ä–∏—à–µ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤–æ—Ä–æ–≤, —Ç–∞–∫–∂–µ –æ–Ω–∏ –æ—á–µ–Ω—å –ª—é–±—è—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–∞–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º–∏!",
          author: { name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", iconURL: client.user.avatarURL() },
          delete: 5000,
        });
      }
      addResource({
        user: interaction.user,
        value: 1,
        source: "command.grempen.product.monster",
        executor: interaction.user,
        resource: PropertiesEnum.monster,
        context: { interaction, product },
      });
      addResource({
        user: interaction.user,
        value: 1,
        source: "command.grempen.product.monster",
        executor: interaction.user,
        resource: PropertiesEnum.monstersBought,
        context: { interaction, product },
      });
      return ", –æ–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–≤–µ—Ä—è*";
    },
  },
  {
    key: "cannedFood",
    label: () => "–ö–æ–Ω—Å–µ—Ä–≤—ã –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
    emoji: () => "ü•´",
    price: () => 1200,
    inline: true,
    others: ["–∫–æ–Ω—Å–µ—Ä–≤—ã", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      if (userData.iq === undefined) {
        userData.iq = random(27, 133);
      }

      const value = random(3, 7);
      addResource({
        user: interaction.user,
        value,
        source: "command.grempen.product.cannedFood",
        executor: interaction.user,
        resource: PropertiesEnum.iq,
        context: { interaction, product },
      });

      return ".\n–í—ã –µ–¥–∏—Ç–µ —ç—Ç–∏ –∫–æ–Ω—Å–µ—Ä–≤—ã –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —É–º–Ω–µ–µ. –≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ—á–Ω–æ –±—ã–ª–∞ –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω–æ–π...";
    },
  },
  {
    key: "bottle",
    label: () => "–ë—É—Ç—ã–ª–∫–∞ –≥–ª—É–ø–æ—Å—Ç–∏",
    emoji: () => "üçº",
    price: () => 400,
    inline: true,
    others: ["–±—É—Ç—ã–ª–∫–∞", "–±—É—Ç—ã–ª–∫—É", "–≥–ª—É–ø–æ—Å—Ç—å", "–≥–ª—É–ø–æ—Å—Ç–∏"],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      if (userData.iq === undefined) {
        userData.iq = random(27, 133);
      }
      const value = random(3, 7);
      addResource({
        user: interaction.user,
        value: -value,
        source: "command.grempen.product.bottle",
        executor: interaction.user,
        resource: PropertiesEnum.iq,
        context: { interaction, product },
      });
      return ".\n–ì—É-–≥—É, –≥–∞-–≥–∞?... –ü–æ—Ä–∞ —É—á–∏—Ç—Å—è...!";
    },
  },
  {
    key: "coat",
    label: () => "–®—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞",
    emoji: () => "üëú",
    price: () => 3200,
    inline: true,
    others: ["—à—É–±–∞", "—à—É–±—É", "—à—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞"],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      const isFirst = !(
        userData.questsGlobalCompleted &&
        userData.questsGlobalCompleted.includes("beEaten")
      );
      const refund = boughtContext.price + (isFirst ? 200 : -200);
      addResource({
        user: interaction.user,
        value: refund,
        executor: interaction.user,
        source: "command.grempen.product.coat.refund",
        resource: PropertiesEnum.coins,
        context: { interaction, product },
      });
      interaction.user.action(ActionsMap.globalQuest, { name: "beEaten" });

      if (userData.curses.length > 0) {
        for (const curse of userData.curses) {
          curse.values.timer = -1;
          CurseManager.checkAvailable({ curse, user: interaction.user });
        }
        CurseManager.checkAvailableAll(interaction.user);
        return ", –∫–∞–∫ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –≤–∞—à–∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è";
      }

      return isFirst
        ? ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É –∏ –≤ –º–∏–≥ –±—ã–ª–∏ —Å—ä–µ–¥–µ–Ω—ã –æ–∑–ª–æ–±–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –µ–Ω–æ—Ç–æ–≤.\n–•–æ—Ä–æ—à–æ, —á—Ç–æ —ç—Ç–æ –±—ã–ª –≤—Å–µ–≥–æ-–ª–∏—à—å —Å–æ–Ω, –¥—É–º–∞–µ—Ç–µ –≤—ã...\n–ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–≤–æ—é —Å—Ç–∞—Ä—É—é —à—É–±—É –∏–∑ –∫—Ä–æ–ª–∏–∫–∞ –≤—ã –≤—ã–∫–∏–Ω—É–ª–∏."
        : ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É. –û–Ω–∞ –≤–∞–º –æ—á–µ–Ω—å –∏–¥—ë—Ç.";
    },
  },
  {
    key: "casinoTicket",
    label: ({ userData }) =>
      userData.voidCasino ? "Casino" : "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
    emoji: ({ userData }) => (userData.voidCasino ? "ü•Ç" : "üéüÔ∏è"),
    price: ({ userData }) =>
      userData.voidCasino ? Math.floor(userData.coins / 3.33) : 130,
    inline: true,
    others: [
      "–±–∏–ª–µ—Ç",
      "–ª–æ—Ç–µ—Ä–µ—è",
      "–ª–æ—Ç–µ—Ä–µ—é",
      "–∫–∞–∑–∏–Ω–æ",
      "casino",
      "–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
    ],
    fn(boughtContext) {
      const { userData, interaction } = boughtContext;
      const product = this;

      const coefficient = 220 / 130;
      const bet = userData.voidCasino ? userData.coins * 0.3 : 130;
      const odds = userData.voidCasino ? 22 : 21;
      if (random(odds) > 8) {
        const victory = Math.ceil(bet * coefficient);
        addResource({
          user: interaction.user,
          value: victory,
          executor: interaction.user,
          source: "command.grempen.product.casino",
          resource: PropertiesEnum.coins,
          context: { interaction, bet, product },
        });
        return userData.voidCasino
          ? `. –ö—É—à –ø–æ–ª—É—á–µ–Ω! ‚Äî ${victory}`
          : ", –≤–µ–¥—å —Å –ø–æ–º–æ—â—å—é –Ω–µ—ë –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 220 <:coin:637533074879414272>!";
      }

      return userData.voidCasino
        ? ". –ü—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑—å–º—ë—Ç–µ —Ä–µ–≤–∞–Ω—à –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
        : ", –∫–∞–∫ –±—É–º–∞–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Ç–∏—Ä–∞–Ω–∏—è. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü§™";
    },
  },
  {
    key: "idea",
    label: () => "–ò–¥–µ—è",
    emoji: () => "üí°",
    price: ({ userData }) =>
      userData.iq &&
      userData.iq % 31 === +DataManager.data.bot.dayDate.match(/\d{1,2}/)[0]
        ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        : 80,
    inline: true,
    others: ["–∏–¥–µ—è", "–∏–¥–µ—é"],
    fn() {
      const ideas = [
        "–ø–æ–∑–Ω–∞—Ç—å –º–∏—Ä —à–∞–±–ª–æ–Ω–æ–≤",
        "–∫—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π –ª–∞–≤–∫–µ",
        "–Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–ª—é—á–∏–∫–∏",
        "–∑–∞–Ω—è—Ç—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º",
        "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
        "–∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å—É–Ω–¥—É–∫",
        "—É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä",
        "–∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–æ–≤",
        "–≤—ã–ø–∏—Ç—å —Å–æ–¥–æ–≤—É—é –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å... –ø–∏–≤–∞?",
        "–ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é",
        "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–µ—Ä—á–∏–∫–∞–º",
        "–æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–¥–µ—Å—å –ø–∞—Å—Ö–∞–ª–∫–∏",
        "–∫—É–ø–∏—Ç—å —à—É–±—É",
        "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å",
        "—Å–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ",
        "–Ω–∞–∫–æ—Ä–º–∏—Ç—å –∑–ª–æ –¥–æ–±—Ä–æ—Ç–æ–π",
        "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ",
        "—Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å",
        "—É–ª—ã–±–Ω—É—Ç—å—Å—è",
        "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –ª—é–±–≤–∏",
        "—Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è –¥–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ Infinity Train",
        "–ø—Ä–æ–π—Ç–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞",
        "–∑'—ó—Å—Ç–∏ –∫–æ–≥–æ-–Ω–µ–±—É–¥—å",
        "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ñ–∏–ª—å–º",
        "–ø–æ–ª—é–±–∏—Ç—å?",
        "–≤–µ—Ä–Ω—É—Ç—å –º–Ω–µ –≤–µ—Ä—É –≤ —Å–µ–±—è",
        "\\*–º–Ω–µ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –ø–∞—Å—Ö–∞–ª–æ–∫\\*",
        "–ø–æ–Ω—è—Ç—å ‚Äî –ø—Ä–æ–∫–ª—è—Ç—å—è ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ",
      ];
      const phrase = [
        "–∑–≤—É—á–∏—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ",
        "–ø–µ—á–µ–Ω—å–µ...",
        "–∑–∞—á–µ–º –≤–∞–º –≤—Å—ë —ç—Ç–æ –Ω–∞–¥–æ.",
        "–ª—É—á—à–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤—ã—Å–ø–∏—Ç–µ—Å—å.",
        "–ª—É—á—à–µ –∑–∞–π–º–∏—Ç–µ—Å—å –Ω–∏—á–µ–º.",
        "–∑–∞–Ω—è—Ç—Å—è –Ω–∏—á–µ–≥–æ–Ω–µ–¥–µ–ª–∞–Ω–∏–µ–º –≤—Å—ë-—Ä–∞–≤–Ω–æ –ª—É—á—à–µ.",
      ].random();
      return `.\n**–ò–¥–µ—è:** –í—ã –º–æ–≥–ª–∏ –±—ã ${ideas.random()}, –Ω–æ ${phrase}`;
    },
  },
  {
    key: "clover",
    label: () => "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä",
    emoji: () => "‚òòÔ∏è",
    price: () => 400,
    inline: true,
    others: ["–∫–ª–µ–≤–µ—Ä", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä", "clover"],
    createCloverTimeEvent(guildId, channelId) {
      const endsIn = HOUR * 4;
      return TimeEventsManager.create("clover-end", endsIn, [
        guildId,
        channelId,
      ]);
    },
    fn(boughtContext) {
      const { interaction } = boughtContext;
      const phrase =
        ". –ö–ª–µ–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 —á–∞—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 15%!\n–î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.";
      const guild = interaction.guild;
      const guildData = guild.data;

      if (!guildData.cloverEffect) {
        guildData.cloverEffect = {
          coins: 0,
          createdAt: Date.now(),
          uses: 1,
          timestamp: null,
        };
        const event = this.createCloverTimeEvent(
          guild.id,
          interaction.channel.id,
        );
        guildData.cloverEffect.timestamp = event.timestamp;
        return phrase;
      }

      const clover = guildData.cloverEffect;
      clover.uses++;

      const increaseTimestamp = (previous) => {
        const WEAKING = 18;
        const adding = Math.floor(HOUR * 4 - (previous - Date.now()) / WEAKING);
        const ms = previous + Math.max(adding, 0);
        return ms;
      };
      const day = timestampDay(clover.timestamp);
      clover.timestamp = increaseTimestamp(clover.timestamp);

      const filter = (event) =>
        event.name === "clover-end" && event._params_as_json.includes(guild.id);

      const event =
        TimeEventsManager.at(day)?.find(filter) ??
        this.createCloverTimeEvent(guild.id, interaction.channel.id);

      TimeEventsManager.update(event, { timestamp: clover.timestamp });
      return phrase;
    },
  },
  {
    key: "ball",
    label: () => "–í—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
    emoji: () => "üîÆ",
    price: () => 8000,
    inline: true,
    others: ["—à–∞—Ä", "–∫—É–±–∏–∫", "—Å–ª—É—á–∞–π", "–≤—Å–µ–≤–∏–¥—è—â–∏–π", "ball", "–≤—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä"],
    fn(boughtContext) {
      const { interaction } = boughtContext;
      const product = this;

      const resources = [
        "void",
        "seed",
        "coins",
        "level",
        "exp",
        "coinsPerMessage",
        "chilli",
        "key",
        "monster",
        "berrys",
        "iq",
        "chestBonus",
      ];
      const resource = resources.random();
      addResource({
        user: interaction.user,
        value: 1,
        executor: interaction.user,
        source: "command.grempen.product.ball",
        resource,
        context: { interaction, product },
      });

      return ` –∫–∞–∫ \`gachi-${resource}\`, –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–¥–∏–Ω.`;
    },
  },
  {
    key: "renewal",
    label: () => "–ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤",
    emoji: () => "üîß",
    price: ({ userData }) => 312 + userData.level * 2,
    inline: true,
    others: ["–∑–∞–≤–æ–∑", "–∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤"],
    fn(boughtContext) {
      const { userData } = boughtContext;
      userData.grempenBoughted = 0;
      boughtContext.slots.forEach((slot) => (slot.isBoughted = false));
      return " –∫–∞–∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–π –∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏";
    },
  },
  {
    key: "curseStone",
    label: () => "–ö–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏",
    emoji: () => "üëÄ",
    price: () => 600,
    inline: true,
    others: ["–∫–∞–º–µ–Ω—å", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ", "–∫–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏"],
    fn(boughtContext) {
      const { userData, interaction, user } = boughtContext;
      const product = this;
      userData.curses ||= [];

      const already = userData.curses.length;

      if (already && !userData.voidFreedomCurse) {
        addResource({
          user: interaction.user,
          value: boughtContext.price,
          executor: interaction.user,
          source: "command.grempen.product.curse.refund",
          resource: PropertiesEnum.coins,
          context: { interaction, product },
        });

        userData.grempenBoughted -= 2 ** boughtContext.slot.index;
        return " –∫–∞–∫ –Ω–∏—á—Ç–æ. –í–µ–¥—å –≤—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã!";
      }

      const curse = CurseManager.generate({
        hard: null,
        user,
        context: boughtContext,
      });
      CurseManager.init({ user, curse });
      const descriptionContent = CurseManager.interface({
        user,
        curse,
      }).toString();

      return ` –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ. –ß—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –±–∏—á–∞ –∫–∞–º–Ω—è: ${descriptionContent}.`;
    },
  },
]);
