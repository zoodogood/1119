import { Actions } from "#lib/modules/ActionManager.js";
import * as Util from "#lib/util.js";

class Item {
  constructor(itemData) {
    this.itemData = itemData;
    const { key, names, ending } = itemData;
    Object.assign(this, { key, names, ending });
  }
  display(...args) {
    return this.itemData.ending(...args);
  }

  // Default getter
  getter({ target }) {
    return target[this.itemData.key];
  }
  setter({ target, count }) {
    return (target[this.itemData.key] = count);
  }

  getLimit() {
    return this.itemData.limit || null;
  }
}

const ITEMS = [
  {
    key: "coins",
    names: ["–∫–æ–∏–Ω–∞", "–∫–æ–∏–Ω—ã", "–∫–æ–∏–Ω", "–∫–æ–∏–Ω–æ–≤", "coins", "coin", "c", "–∫"],
    ending: (count) =>
      `<:coin:637533074879414272> ${Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞")}`,
  },
  {
    key: "exp",
    names: ["–æ–ø—ã—Ç–∞", "–æ–ø—ã—Ç", "–æ–ø—ã—Ç–æ–≤", "exp", "experience"],
    ending: (count) =>
      `<:crys2:763767958559391795> ${Util.ending(count, "–û–ø—ã—Ç", "–∞", "", "–∞")}`,
  },
  {
    key: "chestBonus",
    names: [
      "–±–æ–Ω—É—Å–æ–≤",
      "–±–æ–Ω—É—Å",
      "–±–æ–Ω—É—Å–∞",
      "—Å—É–Ω–¥—É–∫–∞",
      "—Å—É–Ω–¥—É–∫–æ–≤",
      "—Å—É–Ω–¥—É–∫",
      "–±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞",
      "chestbonus",
    ],
    ending: (count) =>
      `<a:chest:805405279326961684> ${Util.ending(
        count,
        "–ë–æ–Ω—É—Å",
        "–æ–≤",
        "",
        "–∞",
      )} —Å—É–Ω–¥—É–∫–∞`,
  },
  {
    key: "void",
    names: [
      "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
      "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
      "void",
      "–∫–∞–º–µ–Ω—å",
      "–∫–∞–º–Ω–µ–π",
      "–∫–∞–º–Ω—è",
    ],
    ending: (count) =>
      `<a:void:768047066890895360> ${Util.ending(
        count,
        "–ö–∞–º",
        "–Ω–µ–π",
        "–µ–Ω—å",
        "–Ω—è",
      )} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏`,
  },
  {
    key: "berrys",
    names: [
      "–∫–ª—É–±–Ω–∏–∫",
      "–∫–ª—É–±–Ω–∏–∫–∏",
      "–∫–ª—É–±–Ω–∏–∫–∞",
      "–∫–ª—É–±–Ω–∏—É",
      "—è–≥–æ–¥—ã",
      "—è–≥–æ–¥",
      "—è–≥–æ–¥–∞",
      "berry",
      "berrys",
    ],
    ending: (count) =>
      `<:berry:756114492055617558> ${Util.ending(
        count,
        "–ö–ª—É–±–Ω–∏–∫",
        "",
        "–∞",
        "–∏",
      )}`,
  },
  {
    key: "chilli",
    names: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—Ü–µ–≤", "–ø–µ—Ä—Ü–∞", "chilli"],
    ending: (count) => `üå∂Ô∏è ${Util.ending(count, "–ü–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")}`,
  },
  {
    key: "monster",
    names: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–æ–≤", "–º–æ–Ω—Å—Ç—Ä–∞", "monster"],
    ending: (count) => `üê≤ ${Util.ending(count, "–ú–æ–Ω—Å—Ç—Ä", "–æ–≤", "", "–∞")}`,
  },
  {
    key: "thiefGloves",
    names: ["–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∞", "–ø–µ—Ä—á–∞—Ç–æ–∫", "glove", "gloves"],
    ending: () => `üß§ ${Util.ending(count, "–ü–µ—Ä—á–∞—Ç", "–∫–∏", "—É", "–∫–∏")}`,
    display: (count) => `üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ ${count}—à—Ç.`,
  },
  {
    key: "keys",
    names: ["–∫–ª—é—á", "–∫–ª—é—á–µ–π", "–∫–ª—é—á–∞", "–∫–ª—é—á–∏", "key"],
    ending: (count) => `üî© ${Util.ending(count, "–ö–ª—é—á", "–µ–π", "", "–∞")}`,
  },
  {
    key: "seed",
    names: ["—Å–µ–º–µ—á–∫–æ", "—Å–µ–º–µ—á–µ–∫", "—Å–µ–º—è–Ω", "—Å–µ–º–µ—á–∫–∞", "—Å–µ–º—è—á–µ–∫", "seed"],
    ending: (count) => `üå± ${Util.ending(count, "–°–µ–º", "—è–Ω", "–µ—á–∫–æ", "–µ—á–∫–∞")}`,
  },
  {
    key: "cheese",
    names: ["—Å—ã—Ä", "—Å—ã—Ä–∞", "—Å—ã—Ä–æ–≤", "cheese", "cheses"],
    ending: (count) => `üßÄ ${Util.ending(count, "–°—ã—Ä", "–æ–≤", "", "–∞")}`,
  },
  {
    key: "iq",
    names: ["iq", "icq", "iqbanana", "–∞–π–∫—å—é"],
    ending: (count) => `<a:iq:768047041053196319> ${count} IQ`,
  },
  {
    key: "coinsPerMessage",
    names: ["–∫–æ–∏–Ω–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–Ω–∞–≥—Ä–∞–¥–∞ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π", "coinsPerMessage"],
    ending: (count) =>
      `‚ú® ${Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞")} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
  },
  {
    key: "voidCooldown",
    names: [
      "—É–º–µ–Ω—å—à–µ–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–∞",
      "—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞",
      "—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞",
      "voidcooldown",
    ],
    limit: 20,
    ending: (count) => `üåÄ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üåÄ –ë–æ–Ω—É—Å "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞" ${count}/20`,
  },
  {
    key: "voidPrice",
    names: ["—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª", "—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç–µ–ª", "voidprice"],
    limit: 3,
    ending: (count) => `‚öúÔ∏è ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `‚öúÔ∏è –ë–æ–Ω—É—Å "–°–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª" ${count}/3`,
  },
  {
    key: "voidDouble",
    names: ["–Ω–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏", "voiddouble"],
    limit: 1,
    ending: (count) => `üÉè ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üÉè –ë–æ–Ω—É—Å "–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏" ${count}/1`,
  },
  {
    key: "voidQuests",
    names: ["—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤", "—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞", "voidquests"],
    limit: 5,
    ending: (count) => `üî± ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üî± –ë–æ–Ω—É—Å "–£—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤" ${count}/5`,
  },
  {
    key: "voidCoins",
    names: ["—à–∞–Ω—Å –∫–æ–∏–Ω–∞", "—à–∞–Ω—Å –∫–æ–∏–Ω–æ–≤", "voidcoins"],
    limit: 7,
    ending: (count) => `‚ô¶Ô∏è ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `‚ô¶Ô∏è –ë–æ–Ω—É—Å "–®–∞–Ω—Å –∫–æ–∏–Ω–∞" ${count}/7`,
  },
  {
    key: "voidMonster",
    names: ["–º–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫", "–º–æ–Ω—Å—Ç—Ä –∑–∞—â–∏—Ç–Ω–∏–∫", "voidmonster"],
    limit: 1,
    ending: (count) => `üíñ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üíñ –ë–æ–Ω—É—Å "–ú–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫" ${count}/1`,
  },
  {
    key: "voidThief",
    names: ["–±–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫", "voidthief"],
    ending: (count) => `üí† ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üí† –ë–æ–Ω—É—Å "–ë–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫" ${count}`,
  },
  {
    key: "voidMysticClover",
    names: [
      "—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –∫–ª–µ–≤–µ—Ä",
      "—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä",
      "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏–µ –∫–ª–µ–≤–µ—Ä–∞",
      "–∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä",
      "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏—è –∫–ª–µ–≤–µ—Ä–∞",
      "voidmysticclover",
    ],
    ending: (count) => `üçµ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üçµ –ë–æ–Ω—É—Å "–£–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –ö–ª–µ–≤–µ—Ä" ${count}/50`,
  },
  {
    key: "voidTreeFarm",
    names: ["—Ñ–µ—Ä–º–µ—Ä", "—Ñ–µ—Ä–º–µ—Ä–æ–≤", "—Ñ–µ—Ä–º–µ—Ä–∞", "voidtreefarm"],
    ending: (count) => `üìï ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üìï –ë–æ–Ω—É—Å "–§–µ—Ä–º–µ—Ä" ${count}`,
  },
  {
    key: "voidCasino",
    names: ["–∫–∞–∑–∏–Ω–æ", "voidcasino"],
    limit: 1,
    ending: (count) => `ü•Ç ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `ü•Ç –ë–æ–Ω—É—Å "–ö–∞–∑–∏–Ω–æ" ${count}/1`,
  },
];

class Command {
  constructor() {
    this.items = ITEMS.map((itemData) => new Item(itemData));
  }

  getContext(interaction) {
    return {
      interaction,
      userData: interaction.userData,
      defaultPrevented: false,
      preventDefault() {
        this.defaultPrevented = true;
      },
      ...this.parseParams(interaction.params),
    };
  }

  parseParams(params) {
    const action = params.match(/–≤–∑—è—Ç—å|take|–ø–æ–ª–æ–∂–∏—Ç—å|put/)?.[0];
    const count = params.match(/\d+|\+/)?.[0];
    let item = null;
    let rawItem = null;
    const isPutAction = ["–ø–æ–ª–æ–∂–∏—Ç—å", "put"].includes(action);
    const isReceiveAction = ["–≤–∑—è—Ç—å", "take"].includes(action);

    if (action && count) {
      params = params.replace(action, "");
      params = params.replace(count, "");
      rawItem = params = params.trim().toLowerCase();

      item = this.items.find(({ itemData }) =>
        itemData.names.includes(rawItem),
      );
    }
    return { action, count, item, isReceiveAction, isPutAction, rawItem };
  }

  async onChatInput(msg, interaction) {
    if (interaction.mention) {
      msg.msg({
        title:
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        color: "#ff0000",
        delete: 15_000,
        description:
          "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–∫—É, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
      });
      return;
    }

    const context = this.getContext(interaction);
    const { action, count, item, rawItem, userData } = context;

    interaction.user.action(Actions.beforeBagInteracted, context);
    const needPrevent = context.defaultPrevented;
    if (action && needPrevent) {
      interaction.channel.msg({
        delete: 7_000,
        title: "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–º–∫–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–Ω–µ—à–Ω–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º",
      });
      return;
    }

    if (action && count) {
      if (!item) {
        const list = this.items.reduce(
          (acc, item) => acc.concat(item.names),
          [],
        );
        const similarItem = Util.getSimilar(list, rawItem);
        msg.msg({
          title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç:",
          description: `\`${rawItem}\`${
            similarItem ? `\n\n–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É: ${similarItem}?` : ""
          }`,
          delete: 7000,
        });
        return;
      }
    }

    if (item) {
      const isToBag = context.isPutAction;

      if (!userData.bag) userData.bag = {};

      this.moveItem(context, item.key, count, isToBag);
      return;
    }

    this.displayBag(context);
    return;
  }

  displayBag(context) {
    const { userData, interaction } = context;
    const items = Object.entries(userData.bag || {})
      .map(([key, count]) => ({
        itemData: this.items.find((item) => item.key === key),
        count,
      }))
      .filter(({ itemData }) => itemData !== undefined)
      .map(({ itemData, count }) => itemData.display(count))
      .map((str) => `‚Äì ${str}`);

    const description = items.length
      ? items.join("\n")
      : "–û–Ω–∞ –ø—É—Å—Ç–∞—è!! –ì–∞–¥—ã, –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å..\n!bag put 1 coin";

    const embed = {
      title: "–°—ç—Ä, –í–∞—à–∞ —Å—É–º–∫–∞?",
      description,
      footer: {
        text: `–¢—ã, –°—ç—Ä ${interaction.user.tag}`,
        iconURL: interaction.user.avatarURL(),
      },
    };
    interaction.channel.msg(embed);
    return;
  }

  moveItem(context, key, count, isToBag) {
    const { userData, interaction } = context;
    const item = this.items.find((item) => item.key === key);
    const targetFrom = isToBag ? userData : userData.bag;
    const targetTo = isToBag ? userData.bag : userData;

    if (count === "+") {
      const value = item.getter({ target: targetFrom });
      count = value || 0;
    }
    count = Math.max(Math.floor(count), 0);

    if (userData[key] === undefined)
      item.setter({ count: 0, target: userData });

    if (userData.bag[key] === undefined)
      item.setter({ count: 0, target: userData.bag });

    const currentCount = item.getter({ target: targetFrom });
    if (currentCount < count) {
      const description = `–ù–∞–¥–æ –Ω–∞ ${item.ending(
        count - currentCount,
      )} –±–æ–ª—å—à–µ!`;
      interaction.channel.msg({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞",
        delete: 7000,
        description,
      });
      return;
    }

    if (item.getLimit() && !isToBag) {
      const current = item.getter({ target: targetTo });
      const limit = item.getLimit();
      count = Math.min(count, limit - current);
    }

    item.setter({
      target: targetFrom,
      count: item.getter({ target: targetFrom }) - count,
    });
    item.setter({
      target: targetTo,
      count: item.getter({ target: targetTo }) + count,
    });

    const bagDescription = isToBag
      ? "–≤ –∞-–ª—è –≤–∞–∫—É—É–º–Ω—ã–π –æ–±—ä–µ–∫—Ç"
      : "–∏–∑ —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã";
    const description = `–í—ã —É—Å–ø–µ—à–Ω–æ ${
      isToBag ? "–ø–æ–ª–æ–∂–∏–ª–∏" : "–≤–∑—è–ª–∏"
    } ${item.ending(count)} ${bagDescription}.`;

    interaction.channel.msg({
      title: `–î–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–º–∫–∞ ${interaction.user.tag}`,
      delete: 9000,
      description,
    });
  }

  options = {
    name: "bag",
    id: 58,
    media: {
      description:
        "\n\n–ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏. –í –Ω–µ—ë –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –±—É–¥—å —Ç–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∫–ª—É–±–Ω–∏–∫–∞ –∏ –¥–∞–∂–µ –±–æ–Ω—É—Å—ã\n–°—É–º–∫–∞ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∑–Ω—ã –∫–∞–∫ –ª–∏—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n‚úèÔ∏è\n```python\n!bag <\"take\" | \"put\"> <item> <count | \"+\"> # –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ\n```\n\n",
    },
    allias: "—Å—É–º–∫–∞ —Ä—é–∫–∑–∞–∫",
    allowDM: true,
    type: "user",
  };
}

export default Command;
