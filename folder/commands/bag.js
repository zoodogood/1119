import { BaseCommand } from "#lib/BaseCommand.js";
import { Emoji } from "#constants/emojis.js";
import { NEW_YEAR_DAY_DATE, SECOND } from "#constants/globals/time.js";
import { Actions } from "#lib/modules/ActionManager.js";
import { PropertiesEnum, PropertiesList } from "#lib/modules/Properties.js";
import * as Util from "#lib/util.js";
import { BaseCommandRunContext } from "#lib/CommandRunContext.js";
import { CliParser } from "@zoodogood/utils/primitives";

class CommandRunContext extends BaseCommandRunContext {
  defaultPrevented = false;
  userData;
  action;
  count;
  itemRaw;
  item;
  preventDefault() {
    this.defaultPrevented = true;
  }
  static new(interaction, command) {
    const context = new this(interaction, command);
    context.userData = interaction.user.data;
    return context;
  }

  parseCli(params) {
    const parser = new CliParser()
      .setText(params)
      .processBrackets()
      .captureFlags(this.command.options.cliParser.flags)
      .captureByMatch({
        name: "action",
        regex:
          /–≤–∑—è—Ç—å|take|get|t|g|–ø–æ–ª–æ–∂–∏—Ç—å|put|set|p|s|–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å|use|–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏|u/i,
      })
      .captureByMatch({
        name: "count",
        regex: /\d+|\+/,
      })
      .captureByMatch({
        name: "itemRaw",
        regex: /[a-z–∞-—è—ë—ä]+/i,
      });

    const parsed = parser.collect();
    const values = parsed.resolveValues((capture) =>
      capture?.toString().toLowerCase(),
    );
    this.parseCli_processDefaultValues(values);

    values.forEach((value, key) => {
      this[key] = value;
    });

    this.isReceiveAction = ["–≤–∑—è—Ç—å", "take", "get", "t", "g"].includes(
      this.action,
    );
    this.isPutAction = ["–ø–æ–ª–æ–∂–∏—Ç—å", "put", "set", "p", "s"].includes(
      this.action,
    );
    this.isUseAction = ["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "use", "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏", "u"].includes(
      this.action,
    );

    this.item = this.command.findItem(this.itemRaw);
    this.setCliParsed(parsed, values);
  }

  parseCli_processDefaultValues(values) {
    const count = values.get("count");
    const itemRaw = values.get("itemRaw");
    if (count && !itemRaw) {
      values.set("itemRaw", PropertiesEnum.coins);
    }

    if (!count && itemRaw) {
      const DEFAULT_COUNT = 1;
      values.set("count", DEFAULT_COUNT);
    }
  }
}

class Item {
  static from(itemData) {
    const item = Object.assign(Object.create(this.prototype), itemData);
    this.normalize(item);
    return item;
  }

  static normalize(item) {
    item.names = [...item.names].map((alias) => alias.toLowerCase());
  }

  display(...args) {
    return this.ending(...args);
  }
  // Default getter
  getter({ target }) {
    return target[this.key];
  }
  setter({ target, count }) {
    return (target[this.key] = count);
  }

  getLimit() {
    return this.limit || null;
  }
}

const ITEMS = [
  {
    key: "coins",
    names: PropertiesList.coins.alias.split(" "),
    ending: (count) =>
      `<:coin:637533074879414272> ${Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞")}`,
    onUse({ context }) {
      const {
        interaction: { channel },
      } = context;

      const contents = {
        description: "–í—ã –∫–∏–¥–∞–µ—Ç–µ –º–æ–Ω–µ—Ç–∫—É",
        endFlip: Util.random(1) ? "–û—Ä—ë–ª" : "–†–µ—à–∫–∞",
        result: ``,
      };

      setTimeout(() => {
        channel.msg({
          description: `${contents.endFlip}. ${contents.result}`,
        });
      }, SECOND * 2);

      const phrase = `${contents.description}`;
      return { phrase, used: 1 };
    },
  },
  {
    key: "exp",
    names: PropertiesList.exp.alias.split(" "),
    ending: (count) =>
      `<:crys2:763767958559391795> ${Util.ending(count, "–û–ø—ã—Ç", "–∞", "", "–∞")}`,
  },
  {
    key: "chestBonus",
    names: PropertiesList.chestBonus.alias.split(" "),
    ending: (count) =>
      `<a:chest:805405279326961684> ${Util.ending(
        count,
        "–ë–æ–Ω—É—Å",
        "–æ–≤",
        "",
        "–∞",
      )} —Å—É–Ω–¥—É–∫–∞`,
  },
  {
    key: "void",
    names: PropertiesList.void.alias.split(" "),
    onUse({ count, context }) {
      const MULTIPLAYER = 2;
      const randomized = Util.random(1);
      const { user } = context;
      if (randomized === 1) {
        Util.addResource({
          resource: PropertiesEnum.void,
          user,
          context,
          executor: user,
          source: "command.bag.item.use.void",
          value: count * MULTIPLAYER,
        });
      }
      const phrase = `–®–∞—É—Ä–º–∞ —Ç—ã. ${randomized ? "+" : "-"} ${
        randomized ? count * MULTIPLAYER : count
      } –Ω–µ—Å—Ç`;
      return { phrase, used: count };
    },
    ending: (count) =>
      `<a:void:768047066890895360> ${Util.ending(
        count,
        "–ö–∞–º",
        "–Ω–µ–π",
        "–µ–Ω—å",
        "–Ω—è",
      )} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏`,
  },
  {
    key: "berrys",
    names: PropertiesList.berrys.alias.split(" "),
    ending: (count) =>
      `<:berry:756114492055617558> ${Util.ending(
        count,
        "–ö–ª—É–±–Ω–∏–∫",
        "",
        "–∞",
        "–∏",
      )}`,
  },
  {
    key: "chilli",
    names: PropertiesList.chilli.alias.split(" "),
    ending: (count) => `üå∂Ô∏è ${Util.ending(count, "–ü–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")}`,
  },
  {
    key: "monster",
    names: PropertiesList.monster.alias.split(" "),
    ending: (count) => `üê≤ ${Util.ending(count, "–ú–æ–Ω—Å—Ç—Ä", "–æ–≤", "", "–∞")}`,
  },
  {
    key: "thiefGloves",
    names: PropertiesList.thiefGloves.alias.split(" "),
    ending: (count) => `üß§ ${Util.ending(count, "–ü–µ—Ä—á–∞—Ç", "–∫–∏", "—É", "–∫–∏")}`,
    display: (count) => `üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ ${count}—à—Ç.`,
  },
  {
    key: "keys",
    names: PropertiesList.keys.alias.split(" "),
    ending: (count) => `üî© ${Util.ending(count, "–ö–ª—é—á", "–µ–π", "", "–∞")}`,
  },
  {
    key: "seed",
    names: PropertiesList.seed.alias.split(" "),
    ending: (count) => `üå± ${Util.ending(count, "–°–µ–º", "—è–Ω", "–µ—á–∫–æ", "–µ—á–∫–∞")}`,
  },
  {
    key: "presents",
    names: PropertiesList.presents.alias.split(" "),
    ending: (count) => `üéÅ ${Util.ending(count, "–ü–æ–¥–∞—Ä", "–∫–æ–≤", "–æ–∫", "–∫–∞")}`,
    onUse({ context }) {
      const { interaction } = context;
      interaction.channel.msg({
        content: `–í–≤–µ–¥–∏—Ç–µ !–ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –≠—Ç–æ –ø—Ä–æ–∫–ª—è—Ç–∏–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ${NEW_YEAR_DAY_DATE}, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏—è`,
      });
    },
  },
  {
    key: "cheese",
    names: PropertiesList.cheese.alias.split(" "),
    ending: (count) => `üßÄ ${Util.ending(count, "–°—ã—Ä", "–æ–≤", "", "–∞")}`,
  },
  {
    key: "snowyTree",
    names: ["snowy", "–Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ"],
    ending: (count) => `${Emoji.snowyTree.toString()} ${count} SnowyTree`,
  },
  {
    key: "iq",
    names: ["iq", "icq", "iqbanana", "–∞–π–∫—å—é"],
    ending: (count) => `<a:iq:768047041053196319> ${count} IQ`,
  },
  {
    key: "coinsPerMessage",
    names: [
      "–∫–æ–∏–Ω–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      "–Ω–∞–≥—Ä–∞–¥–∞ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π",
      "coinsPerMessages",
    ],
    ending: (count) =>
      `‚ú® ${Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞")} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
  },
  {
    key: "voidCooldown",
    names: [
      "—É–º–µ–Ω—å—à–µ–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–∞",
      "—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞",
      "—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞",
      "voidcooldown",
    ],
    limit: 20,
    ending: (count) => `üåÄ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üåÄ –ë–æ–Ω—É—Å "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞" ${count}/20`,
  },
  {
    key: "voidPrice",
    names: ["—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª", "—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç–µ–ª", "voidprice"],
    limit: 3,
    ending: (count) => `‚öúÔ∏è ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `‚öúÔ∏è –ë–æ–Ω—É—Å "–°–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª" ${count}/3`,
  },
  {
    key: "voidDouble",
    names: ["–Ω–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏", "voiddouble"],
    limit: 1,
    ending: (count) => `üÉè ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üÉè –ë–æ–Ω—É—Å "–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏" ${count}/1`,
  },
  {
    key: "voidQuests",
    names: ["—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤", "—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞", "voidquests"],
    limit: 5,
    ending: (count) => `üî± ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üî± –ë–æ–Ω—É—Å "–£—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤" ${count}/5`,
  },
  {
    key: "voidCoins",
    names: ["—à–∞–Ω—Å –∫–æ–∏–Ω–∞", "—à–∞–Ω—Å –∫–æ–∏–Ω–æ–≤", "voidcoins"],
    limit: 7,
    ending: (count) => `‚ô¶Ô∏è ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `‚ô¶Ô∏è –ë–æ–Ω—É—Å "–®–∞–Ω—Å –∫–æ–∏–Ω–∞" ${count}/7`,
  },
  {
    key: "voidMonster",
    names: ["–º–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫", "–º–æ–Ω—Å—Ç—Ä –∑–∞—â–∏—Ç–Ω–∏–∫", "voidmonster"],
    limit: 1,
    ending: (count) => `üíñ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üíñ –ë–æ–Ω—É—Å "–ú–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫" ${count}/1`,
  },
  {
    key: "voidThief",
    names: ["–±–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫", "voidthief"],
    ending: (count) => `üí† ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üí† –ë–æ–Ω—É—Å "–ë–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫" ${count}`,
  },
  {
    key: "voidMysticClover",
    names: [
      "—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –∫–ª–µ–≤–µ—Ä",
      "—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä",
      "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏–µ –∫–ª–µ–≤–µ—Ä–∞",
      "–∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä",
      "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏—è –∫–ª–µ–≤–µ—Ä–∞",
      "voidmysticclover",
    ],
    ending: (count) => `üçµ ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üçµ –ë–æ–Ω—É—Å "–£–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –ö–ª–µ–≤–µ—Ä" ${count}/50`,
  },
  {
    key: "voidTreeFarm",
    names: ["—Ñ–µ—Ä–º–µ—Ä", "—Ñ–µ—Ä–º–µ—Ä–æ–≤", "—Ñ–µ—Ä–º–µ—Ä–∞", "voidtreefarm"],
    ending: (count) => `üìï ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `üìï –ë–æ–Ω—É—Å "–§–µ—Ä–º–µ—Ä" ${count}`,
  },
  {
    key: "voidCasino",
    names: ["–∫–∞–∑–∏–Ω–æ", "voidcasino"],
    limit: 1,
    ending: (count) => `ü•Ç ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `ü•Ç –ë–æ–Ω—É—Å "–ö–∞–∑–∏–Ω–æ" ${count}/1`,
  },
  {
    key: "voidCasino",
    names: ["–∫–∞–∑–∏–Ω–æ", "voidcasino"],
    limit: 1,
    ending: (count) => `ü•Ç ${Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞")}`,
    display: (count) => `ü•Ç –ë–æ–Ω—É—Å "–ö–∞–∑–∏–Ω–æ" ${count}/1`,
  },
  {
    key: PropertiesEnum.lollipops,
    names: PropertiesList.lollipops.alias.split(" "),
    ending: (count) => `üç≠ ${Util.ending(count, "–õ–µ–¥–µ–Ω", "—Ü–æ–≤", "–µ—Ü", "—Ü–∞")}`,
    async onUse({ context }) {
      const { guild } = context;
      const today = Util.timestampDay(Date.now());
      const { boss } = guild.data;

      const BossManager = (await import("#lib/modules/BossManager.js")).default;
      if (BossManager.isArrivedIn(guild) || boss?.apparanceAtDay - 3 <= today) {
        const phrase =
          "–ù–µ—É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ª–µ–¥–µ–Ω–µ—Ü:\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–æ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ –∑–∞ 3 –¥–Ω—è –¥–æ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è";
        return { phrase };
      }

      const used = 1;
      const phrase = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–µ–¥–µ–Ω–µ—Ü, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –±–æ—Å—Å–∞ –Ω–∞ –æ–¥–Ω–∏ —Å—É—Ç–∫–∏";

      ((previous) => {
        const previousApparanceDate = previous?.apparanceAtDay;
        const boss = BossManager.summonBoss(guild);
        boss.endingAtDay = today + 1;
        boss.apparanceAtDay = previousApparanceDate || boss.apparanceAtDay;
        boss.avatarURL = BossManager.Speacial.AVATAR_OF_SNOW_QUEEN;
        boss.elementType = BossManager.BOSS_TYPES.get("wind").type;
        boss.level = Util.random(5, 30);
        boss.healthThresholder = BossManager.calculateHealthPointThresholder(
          boss.level,
        );
      })(boss);

      return { used, phrase };
    },
  },
];

class CommandUtil {
  static summarizeInInventoryAndBag({ user, key }) {
    const userData = user.data;
    return (+userData[key] || 0) + (+userData.bag?.[key] || 0);
  }

  static isPointerAll(target) {
    return target === "+";
  }

  static addResourceAndMoveToBag({
    user,
    resource,
    value,
    source,
    executor,
    context,
  }) {
    Util.addResource({
      resource,
      user,
      value,
      source,
      context,
      executor,
    });

    this.moveToBagBrute({ key: resource, count: value, user });
  }

  static moveToBagBrute({ key, count, user }) {
    const bag = CommandUtil.getBagTargetOf(user);
    user.data[key] -= count;
    bag[key] ||= 0;
    bag[key] += count;
  }

  static getBagTargetOf(user) {
    const userData = user.data;
    userData.bag ||= {};
    return userData.bag;
  }
}

class Command extends BaseCommand {
  static CommandUtil = CommandUtil;

  constructor() {
    super();
    this.items = ITEMS.map((itemData) => Item.from(itemData));
  }

  findItemByalias(alias) {
    return this.items.find((item) => item.names.includes(alias.toLowerCase()));
  }

  findItemByKey(key) {
    return this.items.find(
      (item) => item.key.toLowerCase() === key.toLowerCase(),
    );
  }

  findItem(item = "") {
    return this.findItemByKey(item) || this.findItemByalias(item);
  }

  async onActionUseItem(context) {
    const { item, interaction, userData, user } = context;
    if (!item.onUse) {
      interaction.channel.msg({
        reference: interaction.message.id,
        content: "–£ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å—É–º–∫—É",
      });
      return;
    }

    const { key } = item;
    const userResourceCount = CommandUtil.summarizeInInventoryAndBag({
      user,
      key,
    });
    const count = CommandUtil.isPointerAll(context.count)
      ? userResourceCount
      : context.count;

    if (count > userResourceCount) {
      interaction.channel.msg({
        reference: interaction.message.id,
        content: `–°—ç—Ä::: –í –≤–∞—à–µ–π —Å—É–º–∫–µ + –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ ‚Äî :::–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${count}, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –≤ –∏–Ω–≤–µ—Ç–∞—Ä–µ = ${
          userData[key] ?? 0
        }; –≤ —Å—É–º–∫–µ = ${
          userData.bag?.[key] ?? 0
        }\n(${userResourceCount} - ${count}), ‚Äî AAAAAAAAAA`,
      });
      return;
    }

    const {
      used = 0,
      phrase = "\\*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞*",
    } =
      (await item.onUse.call(this, {
        context,
        count,
      })) ?? {};

    if (used > userData[key]) {
      this._moveItem({
        isToBag: false,
        user,
        count: used - userData[key],
        context,
        item,
      });
    }

    if (used) {
      Util.addResource({
        user,
        executor: user,
        resource: item.key,
        value: -used,
        context,
        source: "command.bag.usingItem",
      });
    }

    const emoji = Emoji[PropertiesList[item.key].emojiKey];

    interaction.channel.msg({
      description: `${Util.ending(used, "–µ–¥–∏–Ω–∏—Ü", "", "–∞", "—ã")} –ø—Ä–µ–¥–º–µ—Ç–∞ ${emoji} ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n${phrase}`,
    });
  }

  getMoveTargetsOf({ user, isToBag }) {
    const userData = user.data;
    const bagData = CommandUtil.getBagTargetOf(user);
    const targetFrom = isToBag ? userData : bagData;
    const targetTo = isToBag ? bagData : userData;
    return { targetTo, targetFrom };
  }

  async onChatInput(msg, interaction) {
    if (interaction.mention) {
      msg.msg({
        title:
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        color: "#ff0000",
        delete: 15_000,
        description:
          "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–∫—É, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
      });
      return;
    }

    const context = await CommandRunContext.new(interaction, this);
    context.parseCli(interaction.params);

    const { action, count, item, userData } = context;

    interaction.user.action(Actions.beforeBagInteracted, context);
    const needPrevent = context.defaultPrevented;
    if (action && needPrevent) {
      interaction.channel.msg({
        delete: 7_000,
        title: "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–º–∫–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–Ω–µ—à–Ω–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º",
      });
      return;
    }

    if (context.isUseAction) {
      this.onActionUseItem(context);
      return;
    }

    if (!this.processItemIsExists(context)) {
      return;
    }

    if (item) {
      const isToBag = context.isPutAction;
      userData.bag ||= {};
      this.moveItem(context, item.key, count, isToBag);
      return;
    }

    this.displayBag(context);
    return;
  }

  processItemIsExists(context) {
    const { action, count, item, itemRaw, channel } = context;
    if (!action || !count) {
      return true;
    }
    if (item) {
      return true;
    }
    const list = this.items.reduce((acc, item) => acc.concat(item.names), []);
    const similarItem = Util.getSimilar(list, itemRaw);
    channel.msg({
      title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç:",
      description: `\`${itemRaw}\`${
        similarItem ? `\n\n–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É: ${similarItem}?` : ""
      }`,
      delete: 7000,
    });
    return false;
  }

  displayBag(context) {
    const { userData, interaction } = context;
    const items = Object.entries(userData.bag || {})
      .map(([key, count]) => ({
        item: this.items.find((item) => item.key === key),
        count,
      }))
      .filter(({ item }) => item !== undefined)
      .map(({ item, count }) => item.display(count))
      .map((line) => `‚Äì ${line}`);

    const description = items.length
      ? items.join("\n")
      : "–û–Ω–∞ –ø—É—Å—Ç–∞—è!! –ì–∞–¥—ã, –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å..\n!bag put 1 coin";

    const embed = {
      title: "–°—ç—Ä, –í–∞—à–∞ —Å—É–º–∫–∞?",
      description,
      footer: {
        text: `–¢—ã, –°—ç—Ä ${interaction.user.tag}`,
        iconURL: interaction.user.avatarURL(),
      },
    };
    interaction.channel.msg(embed);
    return;
  }

  _moveItem({ user, isToBag, count, item, context }) {
    const { targetTo, targetFrom } = this.getMoveTargetsOf({ isToBag, user });
    user.action(Actions.resourceChange, {
      value: isToBag ? -count : count,
      executor: user,
      source: "command.bag",
      resource: item.key,
      context,
    });

    item.setter({
      target: targetFrom,
      count: item.getter({ target: targetFrom }) - count,
    });
    item.setter({
      target: targetTo,
      count: item.getter({ target: targetTo }) + count,
    });
  }

  moveItem(context, key, count, isToBag) {
    const { userData, interaction, user } = context;
    const item = this.items.find((item) => item.key === key);
    const { targetTo, targetFrom } = this.getMoveTargetsOf({ user, isToBag });

    if (CommandUtil.isPointerAll(count)) {
      const value = item.getter({ target: targetFrom });
      count = value || 0;
    }
    count = Math.max(Math.floor(count), 0);

    if (userData[key] === undefined)
      item.setter({ count: 0, target: userData });

    if (userData.bag[key] === undefined)
      item.setter({ count: 0, target: userData.bag });

    const currentCount = item.getter({ target: targetFrom });
    if (currentCount < count) {
      const description = `–ù–∞–¥–æ –Ω–∞ ${item.ending(
        count - currentCount,
      )} –±–æ–ª—å—à–µ!`;
      interaction.channel.msg({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞",
        delete: 7000,
        description,
      });
      return;
    }

    if (item.getLimit() && !isToBag) {
      const current = item.getter({ target: targetTo });
      const limit = item.getLimit();
      count = Math.min(count, limit - current);
    }

    this._moveItem({
      user: interaction.user,
      isToBag,
      count,
      item,
      context,
    });

    const bagDescription = isToBag
      ? "–≤ –∞-–ª—è –≤–∞–∫—É—É–º–Ω—ã–π –æ–±—ä–µ–∫—Ç"
      : "–∏–∑ —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã";
    const description = `–í—ã —É—Å–ø–µ—à–Ω–æ ${
      isToBag ? "–ø–æ–ª–æ–∂–∏–ª–∏" : "–≤–∑—è–ª–∏"
    } ${item.ending(count)} ${bagDescription}.`;

    interaction.channel.msg({
      title: `–î–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–º–∫–∞ ${interaction.user.tag}`,
      delete: 9000,
      description,
    });
  }

  options = {
    name: "bag",
    id: 58,
    media: {
      description:
        '\n\n–ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏. –í –Ω–µ—ë –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –±—É–¥—å —Ç–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∫–ª—É–±–Ω–∏–∫–∞ –∏ –¥–∞–∂–µ –±–æ–Ω—É—Å—ã\n–°—É–º–∫–∞ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∑–Ω—ã –∫–∞–∫ –ª–∏—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n‚úèÔ∏è\n```python\n!bag <"take" | "put"> <item> <count | "+"> # –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ\n```\n\n',
    },
    accessibility: {
      publicized_on_level: 5,
    },
    cliParser: {
      flags: [],
    },
    alias: "—Å—É–º–∫–∞ —Ä—é–∫–∑–∞–∫",
    allowDM: true,
    type: "user",
  };
}

export default Command;
