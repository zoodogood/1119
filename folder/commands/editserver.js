import { question } from "#bot/util.js";
import { Emoji } from "#constants/emojis.js";
import { BaseCommand } from "#lib/BaseCommand.js";
import { BaseCommandRunContext } from "#lib/CommandRunContext.js";
import CommandsManager from "#lib/modules/CommandsManager.js";
import { util_store_and_send_audit } from "#lib/modules/ErrorsHandler.js";
import Template from "#lib/modules/Template.js";
import { DotNotatedInterface } from "@zoodogood/utils/objectives";

class CommandRunContext extends BaseCommandRunContext {
  guildData;
  intefaceMessage;

  static new(interaction, command) {
    const context = new this(interaction, command);
    context.guildData = interaction.guild.data;
    return context;
  }

  parseCli() {}

  get randomEmoji() {
    return (this._randomEmoji ||= ["üîß", "üî®", "üí£", "üõ†Ô∏è", "üîè"].random());
  }

  setInterfaceMessage(message) {
    this.intefaceMessage = message;
  }
}
class Command_GuildChannels_Manager {
  CHANNELS = [
    {
      key: "chatChannel",
      label: "–ß–∞—Ç",
      emoji: "üî•",
    },
    {
      key: "logChannel",
      label: "–î–ª—è –ª–æ–≥–æ–≤",
      emoji: "üìí",
    },
    {
      key: "hiChannel",
      label: "–î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π",
      emoji: "üëå",
    },
  ];

  constructor(context) {
    this.context = context;
  }

  channelBaseToString(channelBase) {
    const { guildData, guild } = this.context;

    const value = this.isChannelInstalled(guild, channelBase)
      ? this.getChannelOfChannelBase(guild, channelBase).toString()
      : channelBase.key in guildData
        ? "–Ω–µ –Ω–∞–π–¥–µ–Ω"
        : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";

    return `${channelBase.emoji} ${channelBase.label}: ${value}`;
  }

  getChannelOfChannelBase(guild, channelBase) {
    return guild.channels.cache.get(guild.data[channelBase.key]);
  }

  isChannelInstalled(guild, channelBase) {
    return !!this.getChannelOfChannelBase(guild, channelBase);
  }
  async onProcess() {
    const { user, channel } = this.context;
    await question({
      reactions: this.CHANNELS.map(({ emoji }) => emoji),
      channel,
      user,
      message: {
        fields: [
          {
            name: "–ö–∞–Ω–∞–ª—ã",
            value: this.CHANNELS.map((channelBase) =>
              this.channelBaseToString(channelBase),
            ).join("\n"),
          },
        ],
      },
    });
  }

  processChannelIsExists(channel, channelBase) {
    if (channel) {
      return true;
    }
    const { guild } = this.context;
    delete guild.data[channelBase.key];
  }
}

class Command_GuildBanner_Manager {
  constructor(context) {
    this.context = context;
  }

  async onProcess() {
    const { context } = this;
    const { user, channel, guild } = context;
    const { content } = await question({
      user,
      channel,
      message: { title: "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", description: "–ê–ø—á—Ö–∏" },
    });

    if (!content) {
      return;
    }

    if (!this.processContentIsLink(content, context)) {
      return;
    }

    guild.data.banner = content;
    channel.msg({
      title: "–ë–∞–Ω–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
      delete: 7_000,
      image: guild.data.banner,
    });
  }
  processContentIsLink(content, context) {
    if (content.startsWith("http")) {
      return true;
    }

    const { channel } = context;
    channel.msg({
      title: "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      color: "#ff0000",
      delete: 3000,
    });
  }
}

class Command_GuildDescription_Manager {
  TEMPLATE_KEY_PREFIX = "_i_know_how_work_with_eval";
  constructor(context) {
    this.context = context;
  }

  async onProcess() {
    const { context } = this;
    const { user, channel, guild } = context;
    let { content } = await question({
      user,
      channel,
      message: {
        title: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —á—É–¥–µ—Å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        description: `–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JavaScript –∫–æ–¥, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞: ${this.TEMPLATE_KEY_PREFIX} :green_heart:`,
      },
    });

    if (this.processTimeEnd(content, context)) {
      return;
    }

    const isTemplate =
      content.startsWith(this.TEMPLATE_KEY_PREFIX) &&
      !!(content = content.replace(this.TEMPLATE_KEY_PREFIX, "").trim());

    const guildData = guild.data;
    guildData.description ||= {};
    Object.assign(guildData.description, {
      isTemplate,
      authorId: user.id,
      content,
    });

    const resolveTemplate = (content) => {
      const templater = new Template({
        executor: user,
        type: Template.sourceTypes.involuntarily,
      });
      return templater.createVM().run(content);
    };

    const description = isTemplate ? await resolveTemplate(content) : content;
    channel.msg({
      title: "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Æ—Ö—É!",
      delete: 7_000,
      description,
    });
  }

  processTimeEnd(answer, context) {
    if (answer) {
      return false;
    }

    const { channel } = context;
    channel.msg({
      title: "–í—Ä–µ–º—è –≤—ã—à–ª–æ ‚è∞",
      color: "#ff0000",
      delete: 7_000,
    });
    return true;
  }
}

class Command_GuildSetHello_Manager {
  constructor(context) {
    this.context = context;
  }

  async onProcess() {
    const { interaction } = this.context;
    const { message } = interaction;
    await CommandsManager.callMap
      .get("sethello")
      .onChatInput(message, interaction);
  }
}

class Command_GuildPartners_Manager {
  constructor(context) {
    this.context = context;
  }

  async onProcess() {
    const { interaction } = this.context;
    const { message } = interaction;
    await CommandsManager.callMap
      .get("partners")
      .onChatInput(message, interaction);
  }
}

class Command_GuildChatFilter_Manager {
  emojiEnum = {
    enable: "685057435161198594",
    disable: "763804850508136478",
  };

  constructor(context) {
    this.context = context;
  }

  async onProcess() {
    const { user, channel, guild } = this.context;
    const { emoji } = await question({
      user,
      channel,
      message: {
        title: "–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —á–∞—Ç–∞?",
        description:
          '–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç: —Ä–µ–∫–ª–∞–º—É, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –∫–∞–ø—Å –∏ —Ç.–¥.\n–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è "—Å—ã—Ä–æ–π" –∏ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º',
      },
      reactions: [this.emojiEnum.enable, this.emojiEnum.disable],
    });

    const guildData = guild.data;
    if (emoji === this.emojiEnum.enable) {
      guildData.chatFilter = 1;
      channel.msg({ title: "–§–∏–ª—å—Ç—Ä –≤–∫–ª—é—á—ë–Ω", delete: 7_000 });
      return;
    }

    if (emoji === this.emojiEnum.disable) {
      guildData.chatFilter = 0;
      channel.msg({ title: "–§–∏–ª—å—Ç—Ä –≤—ã–∫–ª—é—á–µ–Ω", delete: 3000 });
      return;
    }
  }
}

class CommandDefaultBehavior {
  constructor(context) {
    this.context = context;
    this.command = this.context.command;
  }
  createDescription(context) {
    const { guild, command } = context;
    const guildData = guild.data;
    const channels = new Command_GuildChannels_Manager(context);

    const channelContent = channels.CHANNELS.map((channelBase) =>
      channels.channelBaseToString(channelBase),
    ).join("\n");

    const on_emoji = Emoji.animation_tick_block.toString();
    const target = new DotNotatedInterface(guildData);

    const instrumentsContent = command.SETTING_FIELDS.map(
      ({ key, label_on, label_off, emoji }) =>
        target.hasItem(key)
          ? `${on_emoji} ${label_on}`
          : `${emoji} ${label_off}`,
    ).join("\n");

    return `–ö–∞–Ω–∞–ª—ã:\n${channelContent}\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n${instrumentsContent}`;
  }

  createEmbed(context) {
    const emoji = context.randomEmoji;
    return {
      title: `–ù–∞—Å—Ç—Ä–æ–∏–º —Å–µ—Ä–≤–µ—Ä?... ${emoji}`,
      description: this.createDescription(context),
      reactions: this.command.SETTING_FIELDS.map((field) => field.emoji),
    };
  }

  async onProcess() {
    const { context } = this;
    const { interaction } = context;
    /**@type {import("discord.js").Message} */
    const message = await interaction.msg(this.createEmbed(context));

    const collector = message.createReactionCollector();
    collector.on("collect", (reaction, user) => {
      this.onReaction(reaction, user, context).catch(
        util_store_and_send_audit.bind(null, context),
      );
    });
    collector.on("end", () => {
      message.reactions.removeAll();
    });
    context.setInterfaceMessage(message);
  }

  async onReaction(reaction, user, context) {
    const { emoji } = reaction;
    if (!this.processUserCanUseReaction(user, context)) {
      return;
    }

    await context.channel.msg({ content: String(emoji), delete: 5_000 });
    this.command.SETTING_FIELDS.find(
      (field) => field.emoji === emoji.name,
    )?.onReaction(reaction, user, context);
  }

  processUserCanUseReaction(user, context) {
    if (user === context.user) {
      return true;
    }

    return false;
  }
}

class Command extends BaseCommand {
  componentsCallbacks = {
    open(interaction) {
      const context = CommandRunContext.new(interaction, this);
      context.setWhenRunExecuted(this.onProcess(context));
      return context;
    },
  };

  options = {
    name: "editserver",
    id: 29,
    media: {
      description:
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–±–æ—Ç) ‚Äî –§–∏–ª—å—Ç—Ä —á–∞—Ç–∞, –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤, –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∞–Ω–Ω–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `!—Å–µ—Ä–≤–µ—Ä` ‚Äî —Å–ø–æ—Å–æ–±—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.",
      example: `!editserver #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤`,
    },
    alias:
      "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å–µ—Ä–≤–µ—Ä —Å–µ—Ä–≤–∞—Ç–∏—É—Å servatius –Ω–∞–ª–∞–≥–æ–¥–∏—Ç–∏—Å–µ—Ä–≤–µ—Ä —Å–µ—Ä–≤–∞—Ç—ñ—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è settings",
    allowDM: true,
    type: "guild",
    Permissions: 32n,
  };

  SETTING_FIELDS = [
    {
      key: "description",
      emoji: "ü™ß",
      label_off: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
      label_on: "–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É–¥–∞—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ",
      onReaction(reaction, user, context) {
        new Command_GuildDescription_Manager(context).onProcess();
      },
    },
    {
      key: "banner",
      emoji: "üåå",
      label_off: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–Ω–Ω–µ—Ä",
      label_on: "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å —Å–≤–æ–π –±–∞–Ω–Ω–µ—Ä!",
      onReaction(reaction, user, context) {
        new Command_GuildBanner_Manager(context).onProcess();
      },
    },
    {
      key: "chatFilter",
      emoji: "üö∏",
      label_off: "–§–∏–ª—å—Ç—Ä —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω",
      label_on: "–§–∏–ª—å—Ç—Ä —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω :)",
      onReaction(reaction, user, context) {
        new Command_GuildChatFilter_Manager(context).onProcess();
      },
    },
    {
      key: "partners.isEnable",
      emoji: "ü™Ç",
      label_off: "–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞",
      label_on: "–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã",
      onReaction(reaction, user, context) {
        new Command_GuildPartners_Manager(context).onProcess();
      },
    },
    {
      key: "hi",
      emoji: "üëã",
      label_off: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
      label_on: "¬´–ü—Ä–∏–≤–µ—Ç —Ç–µ–±–µ, –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫¬ª",
      onReaction(reaction, user, context) {
        new Command_GuildSetHello_Manager(context).onProcess();
      },
    },
  ];

  async onChatInput(msg, interaction) {
    const context = await CommandRunContext.new(interaction, this);
    context.setWhenRunExecuted(this.run(context));
    return context;
  }

  /**
   * Process the default behavior using the provided context.
   * @param {CommandRunContext} context - the context object containing channel information
   */
  async processDefaultBehavior(context) {
    await new CommandDefaultBehavior(context).onProcess();
  }

  async run(context) {
    context.parseCli();
    await this.processDefaultBehavior(context);
  }
}

export default Command;
