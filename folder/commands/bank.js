import { Actions } from "#lib/modules/ActionManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";
import * as Util from "#lib/util.js";

class Command {
  getContext(interaction) {
    const guildData = interaction.guild.data;
    const isAdmin = !interaction.member.wastedPermissions(32n)[0];

    const context = {
      parsedParams: {
        action: null,
        coins: null,
        cause: null,
      },
      interaction,
      guildData,
      isAdmin,
    };
    if (interaction.params) {
      const target = context.parsedParams;
      target.action = interaction.params.split(" ")[0];
      target.coins = interaction.params.split(" ")[1];
      target.cause = interaction.params.split(" ").slice(2).join(" ");
    }

    return context;
  }

  async interactWithBank(context, { value, isPut, cause }) {
    const { guildData, interaction, isAdmin } = context;
    const { user } = interaction;

    if (value === "+") {
      value = isPut ? interaction.userData.coins : guildData.coins;
    }
    value = Math.max(Math.floor(value), 0);

    if (isNaN(value)) {
      return interaction.channel.msg({
        title: "–£–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞",
        color: "#ff0000",
        delete: 5000,
      });
    }

    if (value === 0) {
      return interaction.channel.msg({
        title: "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å 0 –∫–æ–∏–Ω–æ–≤",
        color: "#ff0000",
        delete: 5000,
      });
    }

    if (isPut) {
      const heAccpet = await Util.awaitUserAccept({
        name: "bank_put",
        message: {
          title: "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
          description:
            "<a:message:794632668137652225> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–µ–Ω–Ω—ã–µ –≤ –æ–±—â—É—é –∫–∞–∑–Ω—É –∫–æ–∏–Ω—ã –±–æ–ª–µ–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–Ω–∞–ª–µ–∂–∞—Ç—å –≤–∞–º, –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        },
        channel: interaction.channel,
        userData: interaction.userData,
      });
      if (!heAccpet) return;

      if (interaction.userData.coins < value) {
        interaction.channel.msg({
          title: "–û–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–∫–∏..",
          description: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤",
          color: "#ff0000",
          delete: 7000,
        });
        return;
      }

      user.action(Actions.resourceChange, {
        value: -value,
        executor: user,
        source: "command.bank.interacted",
        resource: PropertiesEnum.coins,
      });
      interaction.userData.coins -= value;
      guildData.coins += value;

      interaction.guild.logSend({
        title: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:",
        description: `${
          interaction.member.displayName
        } –æ—Ç–Ω—ë—Å –≤ –∫–∞–∑–Ω—É ${Util.ending(value, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")}`,
        footer: {
          iconURL: interaction.user.avatarURL(),
          text: interaction.user.tag,
        },
      });
      interaction.message.react("üëå");
      interaction.channel.msg({
        title: `–í—ã —É—Å–ø–µ—à–Ω–æ –≤–ª–æ–∂–∏–ª–∏ **${Util.ending(
          value,
          "–∫–æ–∏–Ω",
          "–æ–≤",
          "",
          "–∞",
        )}** –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞`,
        delete: 5000,
      });
      return;
    }

    if (!isPut) {
      const heAccpet = await Util.awaitUserAccept({
        name: "bank",
        message: {
          title: "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å!",
          description:
            "<a:message:794632668137652225> –ù–µ –≤–∞–∂–Ω–æ –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç –∫–æ–∏–Ω—ã, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –æ–Ω–∏ –ø—Ä–µ–¥–Ω–∞–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n–†–∞—Å–ø–æ—Ä—è–∂–∞–π—Ç–µ—Å—å –∏–º–∏ —Å –ø–æ–ª—å–∑–æ–π, —É–º–æ–º.",
        },
        channel: interaction.channel,
        userData: interaction.userData,
      });
      if (!heAccpet) return;
      const problems = [];

      if (!isAdmin)
        problems.push(
          '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∑–Ω—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º"',
        );
      if (guildData.coins < value)
        problems.push(
          `–ü–æ—Ö–æ–∂–µ, —Ç—É—Ç –ø—É—Å—Ç–æ. –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏—à—å ${Util.ending(
            guildData.coins,
            "–∫–æ–∏–Ω",
            "–æ–≤",
            "",
            "–∞",
          )}.`,
        );
      if (!cause)
        problems.push(
          `–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ${Util.ending(
            value,
            "–∫–æ–∏–Ω",
            "–æ–≤",
            "–∞",
            "–æ–≤",
          )}.`,
        );
      if (!cause || !cause.match(/.{2,}\s+?.{2,}/i))
        problems.push(`–ü—Ä–∏—á–∏–Ω–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞.`);

      if (problems[0]) {
        interaction.channel.msg({
          title: "–û–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–∫–∏..",
          description: problems.join("\n"),
          color: "#ff0000",
          delete: 7000,
        });
        return;
      }

      user.action(Actions.resourceChange, {
        value,
        executor: user,
        source: "command.bank.interacted",
        resource: PropertiesEnum.coins,
      });
      interaction.userData.coins += value;
      guildData.coins -= value;

      interaction.guild.logSend({
        title: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:",
        description: `${
          interaction.member.displayName
        } –æ–±–Ω–∞–ª–∏—á–∏–ª –∫–∞–∑–Ω—É –Ω–∞ —Å—É–º–º—É **${Util.ending(
          value,
          "–∫–æ–∏–Ω",
          "–æ–≤",
          "–∞",
          "–æ–≤",
        )}**\n–ü—Ä–∏—á–∏–Ω–∞: ${cause}`,
        footer: {
          iconURL: interaction.user.avatarURL(),
          text: interaction.user.tag,
        },
      });
      interaction.message.react("üëå");
      const title = `–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ **${Util.ending(
        value,
        "–∫–æ–∏–Ω",
        "–æ–≤",
        "–∞",
        "–æ–≤",
      )}** –∏–∑ –∫–∞–∑–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞\n–ü–æ –ø—Ä–∏—á–∏–Ω–µ: ${cause}`;
      interaction.channel.msg({ title, delete: 5000 });
      return;
    }
  }

  async onReaction(data, context) {
    const { interaction, isAdmin } = context;

    switch (data.react) {
      case "637290387655884800":
        data.questionMessage = await interaction.channel.msg({
          title: "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –∫–∞–∑–Ω—É",
        });
        data.answer = await interaction.channel.awaitMessage({
          user: interaction.user,
        });
        data.questionMessage.delete();
        if (!data.answer) {
          break;
        }

        data.cause = data.answer.content
          .replace(/\d+/, (number) => {
            data.value = number;
            return "";
          })
          .trim();

        await this.interactWithBank(context, {
          value: data.value,
          isPut: true,
          cause: data.cause,
        });
        data.embed.description = `–í –∫–∞–∑–Ω—É –≤–Ω–µ—Å–ª–∏ –∫–æ–∏–Ω—ã`;
        break;
      case "755844134677512273":
        data.questionMessage = await interaction.channel.msg({
          title:
            "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤. –ê —Ç–∞–∫–∂–µ –ø—Ä–∏—á–∏–Ω—É –∏—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π –∫–∞–∑–Ω—ã.",
        });
        data.answer = await interaction.channel.awaitMessage({
          user: interaction.user,
        });
        data.questionMessage.delete();
        if (!data.answer) {
          break;
        }

        data.cause = data.answer.content
          .replace(/\d+/, (number) => {
            data.value = number;
            return "";
          })
          .trim();

        await this.interactWithBank(context, {
          value: data.value,
          isPut: false,
          cause: data.cause,
        });
        data.embed.description = `–ò–∑ –∫–∞–∑–Ω—ã –∏–∑–≤–ª–µ–∫–ª–∏ –∫–æ–∏–Ω—ã`;
        break;
      case "794632668137652225":
        data.professions =
          interaction.guild.data.professions ||
          (interaction.guild.data.professions = {});

        data.workers = new Set();
        data.costs = 0;
        data.workersList = [];

        data.workersContent =
          "<a:message:794632668137652225> –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ, —Ç–∞–∫–∂–µ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞";

        if (Object.keys(data.professions).length) {
          // Clean not exists professions
          Object.keys(data.professions).forEach(([id]) =>
            interaction.guild.roles.cache.get(id)
              ? true
              : delete data.professions[id],
          );

          interaction.guild.members.cache.each((memb) => {
            Object.entries(data.professions).forEach(([id, cost]) =>
              memb.roles.cache.has(id)
                ? data.workers.add(memb) && (data.costs += +cost)
                : false,
            );
          });

          data.workersList = Object.entries(data.professions).map(
            ([id, cost]) => {
              const allCost = [...data.workers].filter((memb) =>
                memb.roles.cache.has(id),
              ).length;
              return `${interaction.guild.roles.cache.get(
                id,
              )}\n${cost} <:coin:637533074879414272> –≤ –¥–µ–Ω—å (${Util.ending(
                allCost,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª",
                "–µ–π",
                "—å",
                "—è",
              )})`;
            },
          );
          data.workersContent = data.workersList.filter((e) => e).join("\n");
        }
        data.professionManager = await interaction.channel.msg({
          title: "- –†–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞",
          description: `**–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ${
            Object.keys(data.professions).length
          }/20**\n${data.workersContent}\n\n\`\`\`–î–æ—Ö–æ–¥—ã: ${
            interaction.guild.memberCount * 2
          }\n–†–∞—Å—Ö–æ–¥—ã: ${data.costs}\n${Util.ending(
            data.workers.size,
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª",
            "–µ–π",
            "—å",
            "—è",
          )} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É\`\`\``,
          footer: {
            text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.",
          },
        });
        while (true) {
          data.react = await data.professionManager.awaitReact(
            { user: interaction.user, removeType: "all" },
            isAdmin ? "‚úÖ" : null,
            isAdmin && Object.keys(data.professions).length ? "‚ùé" : null,
            "‚ùå",
          );
          data.embed.description = `<a:message:794632668137652225> –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`;
          if (data.react === "‚úÖ") {
            if (Object.keys(data.professions).length >= 20) {
              interaction.channel.msg({
                title: `–õ–∏–º–∏—Ç 20 –ø—Ä–æ—Ñ–µ—Å—Å–∏–π`,
                delete: 4500,
                color: "#ff0000",
              });
              continue;
            }

            data.questionMessage = await interaction.channel.msg({
              title:
                "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Ä–æ–ª–∏, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤, –≤—ã–¥–∞–≤–∞–µ–º–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            });
            data.answer = await interaction.channel.awaitMessage({
              user: interaction.user,
            });

            data.questionMessage.delete();
            if (!data.answer) {
              data.professionManager.delete();
              return;
            }
            data.answer = data.answer.content.split(" ");

            const role = interaction.guild.roles.cache.get(data.answer[0]);
            if (!role) {
              interaction.channel.msg({
                title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å –∞–π–¥–∏ ${data.answer[0]}`,
                delete: 4500,
                color: "#ff0000",
              });
              continue;
            }
            if (isNaN(data.answer[1]) || +data.answer[1] === 0) {
              interaction.channel.msg({
                title: `–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã–¥–∞–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤`,
                delete: 4500,
                color: "#ff0000",
              });
              continue;
            }
            interaction.guild.data.professions[data.answer[0]] = Math.max(
              Math.floor(data.answer[1]),
              1,
            );
            data.embed.description = `<a:message:794632668137652225> –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n(${role} ${data.answer[1]} <:coin:637533074879414272>)`;
          }

          if (data.react === "‚ùé") {
            data.questionMessage = interaction.channel.msg({
              title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è",
            });
            data.answer = await interaction.channel.awaitMessage({
              user: interaction.user,
            });
            data.questionMessage.delete();

            if (!data.answer) {
              data.professionManager.delete();
              return;
            }
            if (data.answer.content in data.professions) {
              delete data.professions[data.answer.content];
              data.embed.description = `<a:message:794632668137652225> –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é! ${interaction.guild.roles.cache.get(
                data.answer.content,
              )}`;
            } else {
              interaction.channel.msg({
                title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å –∞–π–¥–∏ ${data.answer.content} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏`,
                delete: 4500,
                color: "#ff0000",
              });
              continue;
            }
          }
          break;
        }

        data.professionManager.delete();
        break;
      default:
        return data.message.delete();
    }
  }
  async displayMessageInterface(context) {
    const { guildData, isAdmin, interaction } = context;

    const embed = {
      title: "–ö–∞–∑–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      description: `–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ **${Util.NumberFormatLetterize(
        guildData.coins,
      )}** <:coin:637533074879414272>\n\n<a:message:794632668137652225> ‚†ø –ó–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã\n<:meow:637290387655884800> ‚†ø –ü–æ–ª–æ–∂–∏—Ç—å\n<:merunna:755844134677512273> ${[
        ..."‚†Ø‚†∑‚†ü‚†ª",
      ].random()} –í–∑—è—Ç—å`,
      author: {
        name: interaction.guild.name,
        iconURL: interaction.guild.iconURL(),
      },
      image:
        "https://media.discordapp.net/attachments/629546680840093696/830774000597991434/96-967226_tree-forest-green-vector-map-of-the-trees.png",
    };

    const startsCoinsCount = guildData.coins;
    let react;
    const reactions = [
      "637290387655884800",
      isAdmin ? "755844134677512273" : null,
      "794632668137652225",
    ];
    let message = await interaction.channel.msg(embed);
    embed.edit = true;

    while (true) {
      message = await message.msg(embed);
      react = await message.awaitReact(
        { user: interaction.user, removeType: "all" },
        ...reactions,
      );

      await this.onReaction({ react, embed, message }, context);

      embed.description += `\n\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${Util.ending(
        guildData.coins,
        "–∑–æ–ª–æ—Ç",
        "—ã—Ö",
        "–∞—è",
        "—ã—Ö",
      )}!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ ${
        guildData.coins - startsCoinsCount === 0
          ? "–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"
          : guildData.coins - startsCoinsCount > 0
          ? "—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ " + (guildData.coins - startsCoinsCount)
          : "—É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ " + (startsCoinsCount - guildData.coins)
      } <:coin:637533074879414272>`;
    }
  }

  async onChatInput(msg, interaction) {
    const context = this.getContext(interaction);

    if (context.parsedParams) {
      const { action, coins, cause } = context.parsedParams;
      if (action === "–ø–æ–ª–æ–∂–∏—Ç—å" || action === "put") {
        await this.interactWithBank(context, {
          value: coins,
          isPut: true,
          cause,
        });
        return;
      }

      if (action === "–≤–∑—è—Ç—å" || action === "take") {
        await this.interactWithBank(context, {
          value: coins,
          isPut: false,
          cause,
        });
        return;
      }
    }

    await this.displayMessageInterface(context);
  }

  onDayStats(guild, context) {
    const workers = new Set();
    let costs = 0;
    let entries = Object.entries(guild.data.professions);
    if (!entries.length) {
      delete guild.data.professions;
      return;
    }

    entries = entries.filter(([id]) =>
      guild.roles.cache.get(id) ? true : delete guild.data.professions[id],
    );

    guild.members.cache.each((memb) => {
      entries.forEach(([id, cost]) =>
        memb.roles.cache.has(id)
          ? workers.add(memb) && (costs += +cost)
          : false,
      );
    });
    if (guild.data.coins < costs) {
      guild.logSend({
        title: `–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`,
        description: `–í –∫–∞–∑–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–∏–Ω–æ–≤, –ª–∏—à—å ${guild.data.coins}, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è ${costs} <:coin:637533074879414272>`,
        color: "#ffff00",
      });
      return;
    }

    [...workers].forEach((memb) => {
      entries.forEach(([id, cost]) =>
        memb.roles.cache.has(id) ? (memb.user.data.coins += +cost) : false,
      );
    });
    guild.data.coins -= costs;
    guild.logSend({
      title: `–ë—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`,
      description: `–° –∫–∞–∑–Ω—ã –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω–æ ${Util.ending(
        costs,
        "–∫–æ–∏–Ω",
        "–æ–≤",
        "",
        "–∞",
      )} –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ò—Ö —Å–ø–∏—Å–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ \`!–±–∞–Ω–∫\`\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–æ –∫–æ–∏–Ω—ã: ${
        workers.size
      }`,
    });
  }

  options = {
    name: "bank",
    id: 50,
    media: {
      description:
        '–í–æ-–ø–µ—Ä–≤—ã—Ö, –±–∞–Ω–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏, –∞ –≤–æ-–≤—Ç–æ—Ä—ã—Ö, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–æ–±–Ω–æ.\n–¢–∞–∫–∂–µ —Å –∏—Ö –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞–µ–º—ã–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏!\n\n‚úèÔ∏è\n```python\n!bank <"–≤–∑—è—Ç—å" | "–ø–æ–ª–æ–∂–∏—Ç—å"> <coins | "+"> #"+" –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç "–í—Å–µ –∫–æ–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å"\n```',
      poster:
        "https://cdn.discordapp.com/attachments/769566192846635010/872463081672949890/bank.gif",
    },
    allias: "cash –±–∞–Ω–∫ –∫–∞–∑–Ω–∞ —Å–∫–∞—Ä–±–Ω–∏—Ü—è",
    allowDM: true,
    cooldown: 5_00_00,
    type: "guild",
  };
}

export default Command;
