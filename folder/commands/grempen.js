import { BaseCommand } from "#lib/BaseCommand.js";
import { client } from "#bot/client.js";
import CurseManager from "#lib/modules/CurseManager.js";
import DataManager from "#lib/modules/DataManager.js";
import TimeEventsManager from "#lib/modules/TimeEventsManager.js";
import { Actions } from "#lib/modules/ActionManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";
import { DAY, HOUR } from "#constants/globals/time.js";
import { BaseCommandRunContext } from "#lib/CommandRunContext.js";
import {
  addResource,
  ending,
  joinWithAndSeparator,
  random,
  timestampDay,
  sleep,
} from "#lib/util.js";
import { BaseContext } from "#lib/BaseContext.js";

function get_products(context) {
  const { user, userData, interaction, channel } = context;
  return [
    {
      key: "stick",
      label: "–ü—Ä–æ—Å—Ç–æ –ø–∞–ª–∫–∞",
      emoji: "ü¶¥",
      price: 244,
      inline: true,
      others: ["–ø–∞–ª–∫–∞", "–ø–∞–ª–∫—É"],
      fn() {
        const product = this;

        let phrase =
          ".\n–í—ã –∫—É–ø–∏–ª–∏ –ø–∞–ª–∫—É. –≠—Ç–æ —Å–∞–º–∞—è –æ–±—ã—á–Ω–∞—è –ø–∞–ª–∫–∞, –∏ –≤—ã –µ—ë –≤—ã–±—Ä–æ—Å–∏–ª–∏.";
        if (userData.monster) {
          const DENOMINATOR = 0.992;
          const COMMON_VALUE = 3;

          const MIN = 5;

          const max =
            (COMMON_VALUE * (1 - DENOMINATOR ** userData.monster)) /
              (1 - DENOMINATOR) +
            MIN;

          const count = Math.ceil(random(MIN, max));
          phrase += `\n–í–∞—à–∏ —Ä—É—á–Ω—ã–µ –ú–æ–Ω—Å—Ç—Ä—ã, –ø–æ–≥–Ω–∞–≤—à–∏—Å—å –∑–∞ –Ω–µ–π, –Ω–∞—à–ª–∏ ${ending(
            count,
            "–∫–ª—é—á",
            "–µ–π",
            "",
            "–∞",
          )}`;

          addResource({
            user: interaction.user,
            value: count,
            source: "command.grempen.product.stick",
            executor: interaction.user,
            resource: PropertiesEnum.keys,
            context: { interaction, product },
          });
          userData.keys += count;
        }

        return phrase;
      },
    },
    {
      key: "chilli",
      label: "–ñ–≥—É—á–∏–π –ø–µ—Ä—á–∏–∫",
      emoji: "üå∂Ô∏è",
      price: 160,
      inline: true,
      others: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—á–∏–∫"],
      fn() {
        const product = this;
        if (userData.chilli === undefined) {
          channel.msg({
            title: "–û–∫–µ–π, –≤—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä–µ—Ü, –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å—Ç–µ –µ–≥–æ...",
            description: "–ö–æ–º–∞–Ω–¥–∞ –±—Ä–æ—Å–∫–∞ `!chilli @–ü–∏–Ω–≥`",
            delete: 12000,
          });
        }

        addResource({
          user: interaction.user,
          value: 1,
          source: "command.grempen.product.chilli",
          executor: interaction.user,
          resource: PropertiesEnum.chilli,
          context: { interaction, product },
        });
        return '. "–ì–æ—Ç–æ–≤—Ç–µ—Å—å –≥–ª—É–ø—Ü—ã, –≥—Ä—è–¥—ë—Ç —ç—Ä–∞ –ø–µ—Ä—á–∏–∫–æ–≤"';
      },
    },
    {
      key: "gloves",
      label: "–ü–µ—Ä—á–∞—Ç–∫–∏ –ø–µ—Ä—á–∞—Ç–Ω–∏–∫–∞",
      emoji: "üß§",
      price: 700,
      inline: true,
      others: ["–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫–∞"],
      fn() {
        const product = this;
        userData.thiefGloves === undefined &&
          user.msg({
            title: "–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–æ –ø–µ—Ä—á–∞—Ç–∫–∏?",
            description:
              "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!rob`.\n**–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:**\n–í–∞—à–∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–≥—Ä–∞–±–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω –æ–Ω–ª–∞–π–Ω.\n–í —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –º–∏–Ω—É—Ç —É –æ–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–≥–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–≥–Ω–∞—Ç—å –≤–∞—Å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏.\n–ï—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç–µ—Å—å –¥–≤–∞–∂–¥—ã, —Ç–æ –ø–µ—Ä—á–∞—Ç–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî —ç–¥–∞–∫–∏–π —Ä–∏—Å–∫.\n–ù—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ —É–º–Ω—ã–º, –∏—Å–∫–∞—Ç—å –º–æ–º–µ–Ω—Ç.\n–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–∏—Ç—Ä—ã, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ø–∞–ª–∏–ª, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä—á–∞—Ç–∫–∏.\n–¶–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–ª–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –í–∞—Å –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∞—Å—Ç—å, –∞ –≤–æ—Ä, —Ç–æ –µ—Å—Ç—å –í—ã, –¥–æ–ª–∂–µ–Ω –≤—ã–∂–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É.",
          });

        addResource({
          user: interaction.user,
          value: 2,
          source: "command.grempen.product.gloves",
          executor: interaction.user,
          resource: PropertiesEnum.thiefGloves,
          context: { interaction, product },
        });
        delete userData.CD_39;

        return ". _–†–µ–∂–∏–º –≤–æ—Ä–æ–≤–∏—Ç–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω._";
      },
    },
    {
      key: "nut",
      label: "–°—Ç–∞—Ä—ã–π –∫–ª—é—á",
      emoji: "üî©",
      price: 15,
      inline: true,
      others: ["–∫–ª—é—á", "–∫–ª—é—á–∏–∫", "key"],
      fn() {
        const product = this;

        addResource({
          user: interaction.user,
          value: 1,
          source: "command.grempen.product.nut",
          executor: interaction.user,
          resource: PropertiesEnum.keys,
          context: { interaction, product },
        });
        return " –∏ —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ? –ù–µ—Ç! –≠—Ç–æ –Ω–µ –§–∏–∫—Å–∏–∫!";
      },
    },
    {
      key: "exp",
      label: "–ë—É—Ç—ã–ª—ë–∫ –æ–ø—ã—Ç–∞",
      emoji: "üß™",
      price: "???",
      inline: true,
      others: ["–æ–ø—ã—Ç", "–±—É—Ç—ã–ª—ë–∫"],
      fn(boughtContext) {
        const product = this;

        const rand = random(3, 7);
        const LIMIT = 15_000;
        const flaconPrice = Math.min(Math.ceil(userData.coins / rand), LIMIT);
        const value = Math.ceil(flaconPrice * 0.2);
        addResource({
          user: interaction.user,
          value,
          source: "command.grempen.product.exp",
          executor: interaction.user,
          resource: PropertiesEnum.exp,
          context: { interaction, product },
        });

        boughtContext.price = flaconPrice;
        return `, –∫–∞–∫ –¥–æ—Ä–æ–≥—É—â–∏–π —Ñ–ª–∞–∫–æ–Ω –¥–∞–≤—à–∏–π –≤–∞–º —Ü–µ–ª—ã—Ö ${value} <:crys:637290406958202880>`;
      },
    },
    {
      key: "monster",
      label: "–†—É—á–Ω–æ–π –º–æ–Ω—Å—Ç—Ä",
      emoji: "üê≤",
      price: 1999 + 1000 * Math.ceil((userData.monstersBought || 0) / 3),
      inline: true,
      others: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–∞"],
      fn() {
        const product = this;

        if (userData.monster === undefined) {
          userData.monster = 0;
          userData.monstersBought = 0;
          channel.msg({
            description:
              "–ú–æ–Ω—Å—Ç—Ä—ã –∑–∞—â–∏—â–∞—é—Ç –≤–∞—Å –æ—Ç –º–µ–ª–∫–∏—Ö –≤–æ—Ä–∏—à–µ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤–æ—Ä–æ–≤, —Ç–∞–∫–∂–µ –æ–Ω–∏ –æ—á–µ–Ω—å –ª—é–±—è—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–∞–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º–∏!",
            author: { name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", iconURL: client.user.avatarURL() },
            delete: 5000,
          });
        }
        addResource({
          user: interaction.user,
          value: 1,
          source: "command.grempen.product.monster",
          executor: interaction.user,
          resource: PropertiesEnum.monster,
          context: { interaction, product },
        });
        addResource({
          user: interaction.user,
          value: 1,
          source: "command.grempen.product.monster",
          executor: interaction.user,
          resource: PropertiesEnum.monstersBought,
          context: { interaction, product },
        });
        return ", –æ–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–≤–µ—Ä—è*";
      },
    },
    {
      key: "cannedFood",
      label: "–ö–æ–Ω—Å–µ—Ä–≤—ã –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
      emoji: "ü•´",
      price: 1200,
      inline: true,
      others: ["–∫–æ–Ω—Å–µ—Ä–≤—ã", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
      fn() {
        const product = this;

        if (userData.iq === undefined) {
          userData.iq = random(27, 133);
        }

        const value = random(3, 7);
        addResource({
          user: interaction.user,
          value,
          source: "command.grempen.product.cannedFood",
          executor: interaction.user,
          resource: PropertiesEnum.iq,
          context: { interaction, product },
        });

        return ".\n–í—ã –µ–¥–∏—Ç–µ —ç—Ç–∏ –∫–æ–Ω—Å–µ—Ä–≤—ã –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —É–º–Ω–µ–µ. –≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ—á–Ω–æ –±—ã–ª–∞ –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω–æ–π...";
      },
    },
    {
      key: "bottle",
      label: "–ë—É—Ç—ã–ª–∫–∞ –≥–ª—É–ø–æ—Å—Ç–∏",
      emoji: "üçº",
      price: 400,
      inline: true,
      others: ["–±—É—Ç—ã–ª–∫–∞", "–±—É—Ç—ã–ª–∫—É", "–≥–ª—É–ø–æ—Å—Ç—å", "–≥–ª—É–ø–æ—Å—Ç–∏"],
      fn() {
        const product = this;

        if (userData.iq === undefined) {
          userData.iq = random(27, 133);
        }
        const value = random(3, 7);
        addResource({
          user: interaction.user,
          value: -value,
          source: "command.grempen.product.bottle",
          executor: interaction.user,
          resource: PropertiesEnum.iq,
          context: { interaction, product },
        });
        return ".\n–ì—É-–≥—É, –≥–∞-–≥–∞?... –ü–æ—Ä–∞ —É—á–∏—Ç—Å—è...!";
      },
    },
    {
      key: "coat",
      label: "–®—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞",
      emoji: "üëú",
      price: 3200,
      inline: true,
      others: ["—à—É–±–∞", "—à—É–±—É", "—à—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞"],
      fn(boughtContext) {
        const product = this;

        const isFirst = !(
          userData.questsGlobalCompleted &&
          userData.questsGlobalCompleted.includes("beEaten")
        );
        const refund = boughtContext.price + (isFirst ? 200 : -200);
        addResource({
          user: interaction.user,
          value: refund,
          executor: interaction.user,
          source: "command.grempen.product.coat.refund",
          resource: PropertiesEnum.coins,
          context: { interaction, product },
        });
        interaction.user.action(Actions.globalQuest, { name: "beEaten" });

        if (userData.curses.length > 0) {
          for (const curse of userData.curses) {
            curse.values.timer = -1;
            CurseManager.checkAvailable({ curse, user: interaction.user });
          }
          CurseManager.checkAvailableAll(interaction.user);
          return ", –∫–∞–∫ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –≤–∞—à–∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è";
        }

        return isFirst
          ? ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É –∏ –≤ –º–∏–≥ –±—ã–ª–∏ —Å—ä–µ–¥–µ–Ω—ã –æ–∑–ª–æ–±–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –µ–Ω–æ—Ç–æ–≤.\n–•–æ—Ä–æ—à–æ, —á—Ç–æ —ç—Ç–æ –±—ã–ª –≤—Å–µ–≥–æ-–ª–∏—à—å —Å–æ–Ω, –¥—É–º–∞–µ—Ç–µ –≤—ã...\n–ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–≤–æ—é —Å—Ç–∞—Ä—É—é —à—É–±—É –∏–∑ –∫—Ä–æ–ª–∏–∫–∞ –≤—ã –≤—ã–∫–∏–Ω—É–ª–∏."
          : ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É. –û–Ω–∞ –≤–∞–º –æ—á–µ–Ω—å –∏–¥—ë—Ç.";
      },
    },
    {
      key: "casinoTicket",
      label: userData.voidCasino ? "Casino" : "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
      emoji: userData.voidCasino ? "ü•Ç" : "üéüÔ∏è",
      price: userData.voidCasino ? Math.floor(userData.coins / 3.33) : 130,
      inline: true,
      others: [
        "–±–∏–ª–µ—Ç",
        "–ª–æ—Ç–µ—Ä–µ—è",
        "–ª–æ—Ç–µ—Ä–µ—é",
        "–∫–∞–∑–∏–Ω–æ",
        "casino",
        "–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
      ],
      fn() {
        const product = this;

        const coefficient = 220 / 130;
        const bet = userData.voidCasino ? userData.coins * 0.3 : 130;
        const odds = userData.voidCasino ? 22 : 21;
        if (random(odds) > 8) {
          const victory = Math.ceil(bet * coefficient);
          addResource({
            user: interaction.user,
            value: victory,
            executor: interaction.user,
            source: "command.grempen.product.casino",
            resource: PropertiesEnum.coins,
            context: { interaction, bet, product },
          });
          return userData.voidCasino
            ? `. –ö—É—à –ø–æ–ª—É—á–µ–Ω! ‚Äî ${victory}`
            : ", –≤–µ–¥—å —Å –ø–æ–º–æ—â—å—é –Ω–µ—ë –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 220 <:coin:637533074879414272>!";
        }

        return userData.voidCasino
          ? ". –ü—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑—å–º—ë—Ç–µ —Ä–µ–≤–∞–Ω—à –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
          : ", –∫–∞–∫ –±—É–º–∞–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Ç–∏—Ä–∞–Ω–∏—è. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü§™";
      },
    },
    {
      key: "idea",
      label: "–ò–¥–µ—è",
      emoji: "üí°",
      price:
        userData.iq &&
        userData.iq % 31 === +DataManager.data.bot.dayDate.match(/\d{1,2}/)[0]
          ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
          : 80,
      inline: true,
      others: ["–∏–¥–µ—è", "–∏–¥–µ—é"],
      fn() {
        const ideas = [
          "–ø–æ–∑–Ω–∞—Ç—å –º–∏—Ä —à–∞–±–ª–æ–Ω–æ–≤",
          "–∫—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π –ª–∞–≤–∫–µ",
          "–Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–ª—é—á–∏–∫–∏",
          "–∑–∞–Ω—è—Ç—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º",
          "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
          "–∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å—É–Ω–¥—É–∫",
          "—É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä",
          "–∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–æ–≤",
          "–≤—ã–ø–∏—Ç—å —Å–æ–¥–æ–≤—É—é –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å... –ø–∏–≤–∞?",
          "–ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é",
          "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–µ—Ä—á–∏–∫–∞–º",
          "–æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–¥–µ—Å—å –ø–∞—Å—Ö–∞–ª–∫–∏",
          "–∫—É–ø–∏—Ç—å —à—É–±—É",
          "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å",
          "—Å–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ",
          "–Ω–∞–∫–æ—Ä–º–∏—Ç—å –∑–ª–æ –¥–æ–±—Ä–æ—Ç–æ–π",
          "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ",
          "—Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å",
          "—É–ª—ã–±–Ω—É—Ç—å—Å—è",
          "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –ª—é–±–≤–∏",
          "—Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è –¥–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ Infinity Train",
          "–ø—Ä–æ–π—Ç–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞",
          "–∑'—ó—Å—Ç–∏ –∫–æ–≥–æ-–Ω–µ–±—É–¥—å",
          "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ñ–∏–ª—å–º",
          "–ø–æ–ª—é–±–∏—Ç—å?",
          "–≤–µ—Ä–Ω—É—Ç—å –º–Ω–µ –≤–µ—Ä—É –≤ —Å–µ–±—è",
          "\\*–º–Ω–µ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –ø–∞—Å—Ö–∞–ª–æ–∫\\*",
          "–ø–æ–Ω—è—Ç—å ‚Äî –ø—Ä–æ–∫–ª—è—Ç—å—è ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ",
        ];
        const phrase = [
          "–∑–≤—É—á–∏—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ",
          "–ø–µ—á–µ–Ω—å–µ...",
          "–∑–∞—á–µ–º –≤–∞–º –≤—Å—ë —ç—Ç–æ –Ω–∞–¥–æ.",
          "–ª—É—á—à–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤—ã—Å–ø–∏—Ç–µ—Å—å.",
          "–ª—É—á—à–µ –∑–∞–π–º–∏—Ç–µ—Å—å –Ω–∏—á–µ–º.",
          "–∑–∞–Ω—è—Ç—Å—è –Ω–∏—á–µ–≥–æ–Ω–µ–¥–µ–ª–∞–Ω–∏–µ–º –≤—Å—ë-—Ä–∞–≤–Ω–æ –ª—É—á—à–µ.",
        ].random();
        return `.\n**–ò–¥–µ—è:** –í—ã –º–æ–≥–ª–∏ –±—ã ${ideas.random()}, –Ω–æ ${phrase}`;
      },
    },
    {
      key: "clover",
      label: "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä",
      emoji: "‚òòÔ∏è",
      price: 400,
      inline: true,
      others: ["–∫–ª–µ–≤–µ—Ä", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä", "clover"],
      createCloverTimeEvent(guildId, channelId) {
        const endsIn = HOUR * 4;
        return TimeEventsManager.create("clover-end", endsIn, [
          guildId,
          channelId,
        ]);
      },
      fn() {
        const phrase =
          ". –ö–ª–µ–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 —á–∞—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 15%!\n–î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.";
        const guild = interaction.guild;
        const guildData = guild.data;

        if (!guildData.cloverEffect) {
          guildData.cloverEffect = {
            coins: 0,
            createdAt: Date.now(),
            uses: 1,
            timestamp: null,
          };
          const event = this.createCloverTimeEvent(
            guild.id,
            interaction.channel.id,
          );
          guildData.cloverEffect.timestamp = event.timestamp;
          return phrase;
        }

        const clover = guildData.cloverEffect;
        clover.uses++;

        const increaseTimestamp = (previous) => {
          const WEAKING = 18;
          const adding = Math.floor(
            HOUR * 4 - (previous - Date.now()) / WEAKING,
          );
          const ms = previous + Math.max(adding, 0);
          return ms;
        };
        const day = timestampDay(clover.timestamp);
        clover.timestamp = increaseTimestamp(clover.timestamp);

        const filter = (event) =>
          event.name === "clover-end" &&
          event._params_as_json.includes(guild.id);

        const event =
          TimeEventsManager.at(day)?.find(filter) ??
          this.createCloverTimeEvent(guild.id, interaction.channel.id);

        TimeEventsManager.update(event, { timestamp: clover.timestamp });
        return phrase;
      },
    },
    {
      key: "ball",
      label: "–í—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
      emoji: "üîÆ",
      price: 8000,
      inline: true,
      others: [
        "—à–∞—Ä",
        "–∫—É–±–∏–∫",
        "—Å–ª—É—á–∞–π",
        "–≤—Å–µ–≤–∏–¥—è—â–∏–π",
        "ball",
        "–≤—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
      ],
      fn() {
        const product = this;

        const resources = [
          "void",
          "seed",
          "coins",
          "level",
          "exp",
          "coinsPerMessage",
          "chilli",
          "key",
          "monster",
          "berrys",
          "iq",
          "chestBonus",
        ];
        const resource = resources.random();
        addResource({
          user: interaction.user,
          value: 1,
          executor: interaction.user,
          source: "command.grempen.product.ball",
          resource,
          context: { interaction, product },
        });

        return ` –∫–∞–∫ \`gachi-${resource}\`, –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–¥–∏–Ω.`;
      },
    },
    {
      key: "renewal",
      label: "–ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤",
      emoji: "üîß",
      price: 312 + userData.level * 2,
      inline: true,
      others: ["–∑–∞–≤–æ–∑", "–∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤"],
      fn() {
        userData.grempenBoughted = 0;
        return " –∫–∞–∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–π –∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏";
      },
    },
    {
      key: "curseStone",
      label: "–ö–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏",
      emoji: "üëÄ",
      price: 600,
      inline: true,
      others: ["–∫–∞–º–µ–Ω—å", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ", "–∫–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏"],
      fn(boughtContext) {
        const product = this;
        userData.curses ||= [];

        const already = userData.curses.length;

        if (already && !userData.voidFreedomCurse) {
          addResource({
            user: interaction.user,
            value: boughtContext.price,
            executor: interaction.user,
            source: "command.grempen.product.curse.refund",
            resource: PropertiesEnum.coins,
            context: { interaction, product },
          });

          userData.grempenBoughted -=
            2 ** context.today_products.indexOf(product);
          return " –∫–∞–∫ –Ω–∏—á—Ç–æ. –í–µ–¥—å –≤—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã!";
        }

        const { user, guild } = interaction;
        const context = { guild };

        const curse = CurseManager.generate({
          hard: null,
          user,
          context,
        });
        const { description } = CurseManager.cursesBase.get(curse.id);
        CurseManager.init({ user, curse });
        const descriptionContent =
          typeof description === "function"
            ? description(user, curse, context)
            : description;

        return ` –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ. –ß—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –±–∏—á–∞ –∫–∞–º–Ω—è: ${descriptionContent}.`;
      },
    },
  ];
}

class Slot {
  constructor(product, price, index) {
    this.product = product;
    this.price = price;
    this.index = index;
  }
  product;
  isBoughted = false;
  index;
  price;
}

class BoughtContext extends BaseContext {
  constructor(commandRunContext, slot) {
    super("command.grempen.bought", commandRunContext);
    this.commandRunContext = commandRunContext;
    this.slot = slot;
    this.product = slot.product;
    this.price = slot.price;
  }
  product;
  price;
  commandRunContext;
  slot;
  phrase;
}
// MARK: TodayProducts
function slotIsBoughted(userData, index) {
  if (index === -1) {
    return false;
  }
  return (userData.grempenBoughted & (2 ** index)) !== 0;
}
class CommandRunContext extends BaseCommandRunContext {
  /**@type {Slot[]} */
  slots = [];
  userData;
  options = {};

  static new(interaction, command) {
    const context = new this(interaction, command);
    context.userData = interaction.user.data;
    return context;
  }
}

async function process_bought(boughtContext) {
  const { slot, commandRunContext } = boughtContext;
  const { product } = slot;
  const { channel, userData, interaction, user } = commandRunContext;

  if (userData.coins < (boughtContext.price || 0)) {
    await channel.msg({
      title: "<:grempen:753287402101014649> –¢-–í—ã —á—Ç–æ —É–¥—É–º–∞–ª–∏?",
      description: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤, ${product.emoji} ${product.label} —Å—Ç–æ–∏—Ç –Ω–∞ ${
        boughtContext.price - userData.coins
      } –¥–æ—Ä–æ–∂–µ`,
      color: "#400606",
      delete: 5_000,
    });
    return;
  }

  const phrase = (() => {
    try {
      return product.fn(boughtContext);
    } catch (error) {
      return error;
    }
  })();
  if (phrase instanceof Error) {
    throw phrase;
  }

  boughtContext.phrase = `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É ${product.emoji} !\n–¶–µ–Ω–∞ –≤ ${ending(
    !isNaN(boughtContext.price) ? boughtContext.price : 0,
    "–º–æ–Ω–µ—Ç",
    "",
    "—É",
    "—ã",
  )} –ø—Ä–æ—Å—Ç–æ –Ω–∏—á—Ç–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫—É—é —Ö–æ—Ä–æ—à—É—é –≤–µ—â—å${phrase}`;

  if (!isNaN(boughtContext.price)) {
    addResource({
      user: interaction.user,
      value: -boughtContext.price,
      executor: interaction.user,
      source: `command.grempen.bought.${product.key}`,
      resource: PropertiesEnum.coins,
      context: boughtContext,
    });
  }

  if (!boughtContext.commandRunContext.disableSyncSlots) {
    userData.grempenBoughted += 2 ** slot.index;
  }

  interaction.user.action(Actions.buyFromGrempen, boughtContext);
  if (userData.grempenBoughted === 63) {
    interaction.user.action(Actions.globalQuest, { name: "cleanShop" });
  }

  slot.isBoughted = true;

  return channel.msg({
    description: boughtContext.phrase,
    author: { name: user.username, iconURL: user.avatarURL() },
    color: "#400606",
  });
}
class Command extends BaseCommand {
  process_mention(context) {
    const { interaction, channel } = context;
    if (!interaction.mention) {
      return false;
    }
    const mentionUserData = interaction.mention.data;
    const wordNumbers = [
      "–Ω–æ–ª—å",
      "–æ–¥–∏–Ω",
      "–¥–≤–∞",
      "—Ç—Ä–∏",
      "—á–µ—Ç—ã—Ä–µ",
      "–ø—è—Ç—å",
      "—à–µ—Å—Ç—å",
      "—Å–µ–º—å",
      "–≤–æ—Å–µ–º—å",
      "–¥–µ–≤—è—Ç—å",
      "–¥–µ—Å—è—Ç—å",
    ];

    const getList = (mask) =>
      wordNumbers.filter((word, index) => (2 ** index) & mask);

    const list = getList(mentionUserData.grempenBoughted || 0);

    const buyingItemsContent =
      mentionUserData.shopTime === Math.floor(Date.now() / DAY) &&
      mentionUserData.grempenBoughted
        ? `–ø—Ä–∏–æ–±—Ä–µ–ª ${ending(
            list.length,
            "—Ç–æ–≤–∞—Ä",
            "–æ–≤",
            "",
            "–∞",
          )} –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: ${joinWithAndSeparator(
            list.sort(Math.random),
          )}. –ï—Å–ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å –Ω—É–ª—è –∫–æ–Ω–µ—á–Ω–æ-–∂–µ.`
        : "—Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª.\n–ú–æ–∂–µ—Ç –í—ã —Å–∞–º–∏ –∂–µ–ª–∞–µ—Ç–µ —á–µ–≥–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–∫—É–ø–∏—Ç—å?";

    const description = `–û—Ö, —Ç–∞–∫–∏ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–ª–æ–≤–µ–∫, –æ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ${buyingItemsContent}`;
    channel.msg({
      title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
      description,
      color: "#541213",
      thumbnail: interaction.mention.avatarURL(),
    });
    return true;
  }

  async onChatInput(msg, interaction) {
    const context = await CommandRunContext.new(interaction, this);
    context.setWhenRunExecuted(this.run(context));
    return context;
  }
  async run(context) {
    const { interaction } = context;
    const { channel, user } = interaction;

    if (this.process_mention(context)) {
      return;
    }

    const { userData } = context;
    const products_list = get_products(context);
    const getTodayItems = () =>
      products_list
        .filter((item) => !item.isSpecial)
        .filter((_item, i) =>
          DataManager.data.bot.grempenItems.includes(i.toString(16)),
        );

    context.slots.push(
      ...(context.options.slots ||
        getTodayItems().map(
          (product, index) => new Slot(product, product.price, index),
        )),
    );

    !context.disableSyncSlots &&
      context.slots.forEach((slot, index) => {
        slotIsBoughted(userData, index) && (slot.isBoughted = true);
      });

    const today_products = getTodayItems();
    context.today_products = today_products;

    if (Math.floor(Date.now() / DAY) !== userData.shopTime) {
      userData.grempenBoughted = 0;
      userData.shopTime = Math.floor(Date.now() / DAY);
    }

    const buyFunc = async (index) => {
      const slot = context.slots[index];

      const contextBought = new BoughtContext(context, slot);
      await process_bought(contextBought);
    };

    if (interaction.params) {
      const target = interaction.params.toLowerCase();
      const index = context.slots.findIndex(
        (slot) =>
          slot.product.label.includes(target) ||
          slot.product.others.includes(target),
      );
      const slot = context.slots[index];
      if (!slot || slot.isBoughted) {
        const product = slot?.product;
        const emoji = product ? product.emoji : "üë∫";
        const today_available = context.slots
          .filter((slot) => !slot.isBoughted)
          .map(({ product }) => product.emoji)
          .join(" ");

        await channel.msg({
          title: "<:grempen:753287402101014649> –£–ø—Å!",
          description: `**–°–µ–≥–æ–¥–Ω—è —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç (${emoji}) –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –≤ –ª–∞–≤–∫–µ.**\n–ñ–µ–ª–∞–µ—Ç–µ –≤–∑–ª—è–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã?\n${today_available}`,
          color: "#400606",
          delete: 8000,
        });
        return;
      }
      await buyFunc(index);
      return;
    }

    if (userData.coins < 80) {
      interaction.channel.sendTyping();
      await sleep(1700);
      return channel.msg({
        title: "<:grempen:753287402101014649>",
        description: "–ò–∑—ã–¥–∏ –±–µ–∑–¥–æ–º–Ω—ã–π –ø–æ–ø—Ä–æ—à–∞–π–∫–∞\n–±–µ–∑ –¥–µ–Ω–µ–≥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!",
        color: "#541213",
        delete: 3000,
      });
    }

    const slots_to_fields = () => {
      return context.slots.map((slot) => {
        const { product } = slot;
        const name = `${product.emoji} ${product.label}`;
        let { price: value } = product;

        if (slot.isBoughted) {
          value = "–ö—É–ø–ª–µ–Ω–æ";
        }

        return { name, value, inline: true };
      });
    };

    let embed = {
      title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
      description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É, –º–µ–Ω—è –∑–æ–≤—É—Ç –ì—Ä–µ–º–ø–ª–µ–Ω—Å –∏ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∫–∏–¥–∫–∏!\n–û, –≤–∏–∂—É —É –≤–∞—Å –µ—Å—Ç—å **${userData.coins}** <:coin:637533074879414272>, –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ª–∏ —á–µ–≥–æ –Ω–∏–±—É–¥—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?`,
      fields: slots_to_fields(),
      color: "#400606",
      footer: { text: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è, —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ü–µ–Ω—ã!" },
    };
    const shop = await interaction.channel.msg(embed);

    let react;
    while (true) {
      let reactions = context.slots
        .filter(
          (slot) =>
            !slot.isBoughted &&
            (isNaN(slot.price) || slot.price <= userData.coins),
        )
        .map(({ product }) => product.emoji);
      if (reactions.length === 0) reactions = ["‚ùå"];

      react = await shop.awaitReact(
        { user: user, removeType: "all" },
        ...reactions,
      );

      if (!react || react === "‚ùå") {
        await shop.reactions.removeAll();
        await shop.msg({
          title: "–õ–∞–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë <:grempen:753287402101014649>",
          edit: true,
          color: "#400606",
          description:
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `!grempen`, –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
          image:
            "https://cdn.discordapp.com/attachments/629546680840093696/847381047939432478/grempen.png",
        });
        return;
      }

      const product = products_list.find((product) => product.emoji === react);
      await buyFunc(
        context.slots.findIndex((slot) => slot.product === product),
      );

      if (userData.coins < 80) {
        channel.sendTyping();
        await sleep(1200);

        shop.msg({
          title: "–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –ù–µ—Ç? –ù—É –∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π—Ç–µ!",
          edit: true,
          delete: 3_500,
        });
        return;
      }
      embed = {
        title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
        edit: true,
        description: `–£ –≤–∞—Å –µ—Å—Ç—å-–æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –û—Ç–ª–∏—á–Ω–æ! **${userData.coins}** <:coin:637533074879414272> —Ö–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–∫—É–ø–∏—Ç—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –µ—â—ë!`,
        fields: slots_to_fields(),
        footer: { text: "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë, –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!" },
        color: "#400606",
      };
      await shop.msg(embed);
    }
  }

  options = {
    name: "grempen",
    id: 25,
    media: {
      description:
        "–õ–∞–≤–∫–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π, —Ü–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–≤—ã—à–µ–Ω—ã, –Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
      example: `!grempen #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤`,
    },
    alias:
      "–≥—Ä–µ–º–ø–ª–µ–Ω—Å –≥—Ä–µ–º–ø–µ–Ω—Å evil_shop –∑–ª–æ–≤–µ—â–∞—è_–ª–∞–≤–∫–∞ hell –ª–∞–≤–∫–∞ grempens shop —à–∞–ª—É–Ω “ë—Ä–µ–º–ø–µ–Ω—Å –∫—Ä–∞–º–Ω–∏—Ü—è –º–∞–≥–∞–∑–∏–Ω",
    allowDM: true,
    cooldown: 2_000,
    cooldownTry: 2,
    type: "other",
    myChannelPermissions: 8256n,
  };
}

export default Command;
