import * as Util from "#lib/util.js";
import { client } from "#bot/client.js";
import CurseManager from "#lib/modules/CurseManager.js";
import DataManager from "#lib/modules/DataManager.js";
import TimeEventsManager from "#lib/modules/TimeEventsManager.js";
import { Actions } from "#lib/modules/ActionManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";

class Command {
  async onChatInput(msg, interaction) {
    if (interaction.mention) {
      const mentionUserData = interaction.mention.data;
      const wordNumbers = [
        "–Ω–æ–ª—å",
        "–æ–¥–∏–Ω",
        "–¥–≤–∞",
        "—Ç—Ä–∏",
        "—á–µ—Ç—ã—Ä–µ",
        "–ø—è—Ç—å",
        "—à–µ—Å—Ç—å",
        "—Å–µ–º—å",
        "–≤–æ—Å–µ–º—å",
        "–¥–µ–≤—è—Ç—å",
        "–¥–µ—Å—è—Ç—å",
      ];

      const getList = (mask) =>
        wordNumbers.filter((word, index) => (2 ** index) & mask);

      const list = getList(mentionUserData.grempenBoughted || 0);

      const buyingItemsContent =
        mentionUserData.shopTime === Math.floor(Date.now() / 86400000) &&
        mentionUserData.grempenBoughted
          ? `–ø—Ä–∏–æ–±—Ä–µ–ª ${Util.ending(
              list.length,
              "—Ç–æ–≤–∞—Ä",
              "–æ–≤",
              "",
              "–∞",
            )} –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: ${Util.joinWithAndSeparator(
              list.sort(Math.random),
            )}. –ï—Å–ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å –Ω—É–ª—è –∫–æ–Ω–µ—á–Ω–æ-–∂–µ.`
          : "—Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª.\n–ú–æ–∂–µ—Ç –í—ã —Å–∞–º–∏ –∂–µ–ª–∞–µ—Ç–µ —á–µ–≥–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–∫—É–ø–∏—Ç—å?";

      const description = `–û—Ö, —Ç–∞–∫–∏ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–ª–æ–≤–µ–∫, –æ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ${buyingItemsContent}`;
      msg.msg({
        title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
        description,
        color: "#541213",
        thumbnail: interaction.mention.avatarURL(),
      });
      return;
    }

    const userData = interaction.user.data;

    const allItems = [
      {
        id: "stick",
        name: "ü¶¥ –ü—Ä–æ—Å—Ç–æ –ø–∞–ª–∫–∞",
        value: 244,
        inline: true,
        others: ["–ø–∞–ª–∫–∞", "–ø–∞–ª–∫—É"],
        fn: (product) => {
          let phrase =
            ".\n–í—ã –∫—É–ø–∏–ª–∏ –ø–∞–ª–∫—É. –≠—Ç–æ —Å–∞–º–∞—è –æ–±—ã—á–Ω–∞—è –ø–∞–ª–∫–∞, –∏ –≤—ã –µ—ë –≤—ã–±—Ä–æ—Å–∏–ª–∏.";
          if (userData.monster) {
            const DENOMINATOR = 0.995;
            const COMMON_VALUE = 3;

            const MIN = 5;

            const max =
              (COMMON_VALUE * (1 - DENOMINATOR ** userData.monster)) /
                (1 - DENOMINATOR) +
              MIN;

            const count = Math.ceil(Util.random(MIN, max));
            phrase += `\n–í–∞—à–∏ —Ä—É—á–Ω—ã–µ –ú–æ–Ω—Å—Ç—Ä—ã, –ø–æ–≥–Ω–∞–≤—à–∏—Å—å –∑–∞ –Ω–µ–π, –Ω–∞—à–ª–∏ ${Util.ending(
              count,
              "–∫–ª—é—á",
              "–µ–π",
              "",
              "–∞",
            )}`;

            Util.addResource({
              user: interaction.user,
              value: count,
              source: "command.grempen.product.stick",
              executor: interaction.user,
              resource: PropertiesEnum.keys,
              context: { interaction, product },
            });
            userData.keys += count;
          }

          return phrase;
        },
      },
      {
        id: "chilli",
        name: "üå∂Ô∏è –ñ–≥—É—á–∏–π –ø–µ—Ä—á–∏–∫",
        value: 160,
        inline: true,
        others: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—á–∏–∫"],
        fn: (product) => {
          if (userData.chilli === undefined) {
            msg.msg({
              title: "–û–∫–µ–π, –≤—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä–µ—Ü, –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å—Ç–µ –µ–≥–æ...",
              description: "–ö–æ–º–∞–Ω–¥–∞ –±—Ä–æ—Å–∫–∞ `!chilli @–ü–∏–Ω–≥`",
              delete: 12000,
            });
          }

          Util.addResource({
            user: interaction.user,
            value: 1,
            source: "command.grempen.product.chilli",
            executor: interaction.user,
            resource: PropertiesEnum.chilli,
            context: { interaction, product },
          });
          return '. "–ì–æ—Ç–æ–≤—Ç–µ—Å—å –≥–ª—É–ø—Ü—ã, –≥—Ä—è–¥—ë—Ç —ç—Ä–∞ –ø–µ—Ä—á–∏–∫–æ–≤"';
        },
      },
      {
        id: "gloves",
        name: "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ –ø–µ—Ä—á–∞—Ç–Ω–∏–∫–∞",
        value: 700,
        inline: true,
        others: ["–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫–∞"],
        fn: (product) => {
          userData.thiefGloves === undefined &&
            msg.author.msg({
              title: "–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–æ –ø–µ—Ä—á–∞—Ç–∫–∏?",
              description:
                "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!rob`.\n**–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:**\n–í–∞—à–∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–≥—Ä–∞–±–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω –æ–Ω–ª–∞–π–Ω.\n–í —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –º–∏–Ω—É—Ç —É –æ–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–≥–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–≥–Ω–∞—Ç—å –≤–∞—Å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏.\n–ï—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç–µ—Å—å –¥–≤–∞–∂–¥—ã, —Ç–æ –ø–µ—Ä—á–∞—Ç–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî —ç–¥–∞–∫–∏–π —Ä–∏—Å–∫.\n–ù—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ —É–º–Ω—ã–º, –∏—Å–∫–∞—Ç—å –º–æ–º–µ–Ω—Ç.\n–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–∏—Ç—Ä—ã, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ø–∞–ª–∏–ª, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä—á–∞—Ç–∫–∏.\n–¶–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–ª–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –í–∞—Å –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∞—Å—Ç—å, –∞ –≤–æ—Ä, —Ç–æ –µ—Å—Ç—å –í—ã, –¥–æ–ª–∂–µ–Ω –≤—ã–∂–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É.",
            });

          Util.addResource({
            user: interaction.user,
            value: 2,
            source: "command.grempen.product.gloves",
            executor: interaction.user,
            resource: PropertiesEnum.thiefGloves,
            context: { interaction, product },
          });
          delete userData.CD_39;

          return ". _–†–µ–∂–∏–º –≤–æ—Ä–æ–≤–∏—Ç–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω._";
        },
      },
      {
        id: "nut",
        name: "üî© –°—Ç–∞—Ä—ã–π –∫–ª—é—á",
        value: 15,
        inline: true,
        others: ["–∫–ª—é—á", "–∫–ª—é—á–∏–∫", "key"],
        fn: (product) => {
          Util.addResource({
            user: interaction.user,
            value: 1,
            source: "command.grempen.product.nut",
            executor: interaction.user,
            resource: PropertiesEnum.keys,
            context: { interaction, product },
          });
          return " –∏ —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ? –ù–µ—Ç! –≠—Ç–æ –Ω–µ –§–∏–∫—Å–∏–∫!";
        },
      },
      {
        id: "exp",
        name: "üß™ –ë—É—Ç—ã–ª—ë–∫ –æ–ø—ã—Ç–∞",
        value: "???",
        inline: true,
        others: ["–æ–ø—ã—Ç", "–±—É—Ç—ã–ª—ë–∫"],
        fn: (product) => {
          const rand = Util.random(3, 7);
          const LIMIT = 15_000;
          const flaconPrice = Math.min(Math.ceil(userData.coins / rand), LIMIT);
          const value = Math.ceil(flaconPrice * 0.8);
          Util.addResource({
            user: interaction.user,
            value,
            source: "command.grempen.product.exp",
            executor: interaction.user,
            resource: PropertiesEnum.exp,
            context: { interaction, product },
          });

          product.value = flaconPrice;
          return `, –∫–∞–∫ –¥–æ—Ä–æ–≥—É—â–∏–π —Ñ–ª–∞–∫–æ–Ω –¥–∞–≤—à–∏–π –≤–∞–º —Ü–µ–ª—ã—Ö ${value} <:crys:637290406958202880>`;
        },
      },
      {
        id: "monster",
        name: "üê≤ –†—É—á–Ω–æ–π –º–æ–Ω—Å—Ç—Ä",
        value: 1999 + 1000 * Math.ceil((userData.monstersBought || 0) / 3),
        inline: true,
        others: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–∞"],
        fn: (product) => {
          if (userData.monster === undefined) {
            userData.monster = 0;
            userData.monstersBought = 0;
            msg.msg({
              description:
                "–ú–æ–Ω—Å—Ç—Ä—ã –∑–∞—â–∏—â–∞—é—Ç –≤–∞—Å –æ—Ç –º–µ–ª–∫–∏—Ö –≤–æ—Ä–∏—à–µ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤–æ—Ä–æ–≤, —Ç–∞–∫–∂–µ –æ–Ω–∏ –æ—á–µ–Ω—å –ª—é–±—è—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–∞–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º–∏!",
              author: { name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", iconURL: client.user.avatarURL() },
              delete: 5000,
            });
          }
          Util.addResource({
            user: interaction.user,
            value: 1,
            source: "command.grempen.product.monster",
            executor: interaction.user,
            resource: PropertiesEnum.monster,
            context: { interaction, product },
          });
          Util.addResource({
            user: interaction.user,
            value: 1,
            source: "command.grempen.product.monster",
            executor: interaction.user,
            resource: PropertiesEnum.monstersBought,
            context: { interaction, product },
          });
          return ", –æ–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–≤–µ—Ä—è*";
        },
      },
      {
        id: "cannedFood",
        name: "ü•´ –ö–æ–Ω—Å–µ—Ä–≤—ã –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        value: 1200,
        inline: true,
        others: ["–∫–æ–Ω—Å–µ—Ä–≤—ã", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
        fn: (product) => {
          if (userData.iq === undefined) {
            userData.iq = Util.random(27, 133);
          }

          const value = Util.random(3, 7);
          Util.addResource({
            user: interaction.user,
            value,
            source: "command.grempen.product.cannedFood",
            executor: interaction.user,
            resource: PropertiesEnum.iq,
            context: { interaction, product },
          });

          return ".\n–í—ã –µ–¥–∏—Ç–µ —ç—Ç–∏ –∫–æ–Ω—Å–µ—Ä–≤—ã –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —É–º–Ω–µ–µ. –≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ—á–Ω–æ –±—ã–ª–∞ –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω–æ–π...";
        },
      },
      {
        id: "bottle",
        name: "üçº –ë—É—Ç—ã–ª–∫–∞ –≥–ª—É–ø–æ—Å—Ç–∏",
        value: 400,
        inline: true,
        others: ["–±—É—Ç—ã–ª–∫–∞", "–±—É—Ç—ã–ª–∫—É", "–≥–ª—É–ø–æ—Å—Ç—å", "–≥–ª—É–ø–æ—Å—Ç–∏"],
        fn: (product) => {
          if (userData.iq === undefined) {
            userData.iq = Util.random(27, 133);
          }
          const value = Util.random(3, 7);
          Util.addResource({
            user: interaction.user,
            value: -value,
            source: "command.grempen.product.bottle",
            executor: interaction.user,
            resource: PropertiesEnum.iq,
            context: { interaction, product },
          });
          return ".\n–ì—É-–≥—É, –≥–∞-–≥–∞?... –ü–æ—Ä–∞ —É—á–∏—Ç—Å—è...!";
        },
      },
      {
        id: "coat",
        name: "üëú –®—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞",
        value: 3200,
        inline: true,
        others: ["—à—É–±–∞", "—à—É–±—É", "—à—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞"],
        fn: (product) => {
          const isFirst = !(
            userData.questsGlobalCompleted &&
            userData.questsGlobalCompleted.includes("beEaten")
          );
          const refund = product.value + (isFirst ? 200 : -200);
          Util.addResource({
            user: interaction.user,
            value: refund,
            executor: interaction.user,
            source: "command.grempen.product.coat.refund",
            resource: PropertiesEnum.coins,
            context: { interaction, product },
          });
          interaction.user.action(Actions.globalQuest, { name: "beEaten" });

          if (userData.curses.length > 0) {
            for (const curse of userData.curses) {
              curse.values.timer = -1;
              CurseManager.checkAvailable({ curse, user: interaction.user });
            }
            CurseManager.checkAvailableAll(interaction.user);
            return ", –∫–∞–∫ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –≤–∞—à–∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è";
          }

          return isFirst
            ? ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É –∏ –≤ –º–∏–≥ –±—ã–ª–∏ —Å—ä–µ–¥–µ–Ω—ã –æ–∑–ª–æ–±–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –µ–Ω–æ—Ç–æ–≤.\n–•–æ—Ä–æ—à–æ, —á—Ç–æ —ç—Ç–æ –±—ã–ª –≤—Å–µ–≥–æ-–ª–∏—à—å —Å–æ–Ω, –¥—É–º–∞–µ—Ç–µ –≤—ã...\n–ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–≤–æ—é —Å—Ç–∞—Ä—É—é —à—É–±—É –∏–∑ –∫—Ä–æ–ª–∏–∫–∞ –≤—ã –≤—ã–∫–∏–Ω—É–ª–∏."
            : ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É. –û–Ω–∞ –≤–∞–º –æ—á–µ–Ω—å –∏–¥—ë—Ç.";
        },
      },
      {
        id: "casinoTicket",
        name: userData.voidCasino ? "ü•Ç Casino" : "üéüÔ∏è –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        value: userData.voidCasino ? Math.floor(userData.coins / 3.33) : 130,
        inline: true,
        others: [
          "–±–∏–ª–µ—Ç",
          "–ª–æ—Ç–µ—Ä–µ—è",
          "–ª–æ—Ç–µ—Ä–µ—é",
          "–∫–∞–∑–∏–Ω–æ",
          "casino",
          "–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        ],
        fn: (product) => {
          const coefficient = 220 / 130;
          const bet = userData.voidCasino ? userData.coins * 0.3 : 130;
          const odds = userData.voidCasino ? 22 : 21;
          if (Util.random(odds) > 8) {
            const victory = Math.ceil(bet * coefficient);
            Util.addResource({
              user: interaction.user,
              value: victory,
              executor: interaction.user,
              source: "command.grempen.product.casino",
              resource: PropertiesEnum.coins,
              context: { interaction, bet, product },
            });
            return userData.voidCasino
              ? `. –ö—É—à –ø–æ–ª—É—á–µ–Ω! ‚Äî ${victory}`
              : ", –≤–µ–¥—å —Å –ø–æ–º–æ—â—å—é –Ω–µ—ë –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 220 <:coin:637533074879414272>!";
          }

          return userData.voidCasino
            ? ". –ü—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑—å–º—ë—Ç–µ —Ä–µ–≤–∞–Ω—à –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
            : ", –∫–∞–∫ –±—É–º–∞–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Ç–∏—Ä–∞–Ω–∏—è. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü§™";
        },
      },
      {
        id: "idea",
        name: "üí° –ò–¥–µ—è",
        value:
          userData.iq &&
          userData.iq % 31 === +DataManager.data.bot.dayDate.match(/\d{1,2}/)[0]
            ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            : 80,
        inline: true,
        others: ["–∏–¥–µ—è", "–∏–¥–µ—é"],
        fn: () => {
          const ideas = [
            "–ø–æ–∑–Ω–∞—Ç—å –º–∏—Ä —à–∞–±–ª–æ–Ω–æ–≤",
            "–∫—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π –ª–∞–≤–∫–µ",
            "–Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–ª—é—á–∏–∫–∏",
            "–∑–∞–Ω—è—Ç—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º",
            "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
            "–∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å—É–Ω–¥—É–∫",
            "—É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä",
            "–∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–æ–≤",
            "–≤—ã–ø–∏—Ç—å —Å–æ–¥–æ–≤—É—é –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å... –ø–∏–≤–∞?",
            "–ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é",
            "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–µ—Ä—á–∏–∫–∞–º",
            "–æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–¥–µ—Å—å –ø–∞—Å—Ö–∞–ª–∫–∏",
            "–∫—É–ø–∏—Ç—å —à—É–±—É",
            "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å",
            "—Å–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ",
            "–Ω–∞–∫–æ—Ä–º–∏—Ç—å –∑–ª–æ –¥–æ–±—Ä–æ—Ç–æ–π",
            "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ",
            "—Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å",
            "—É–ª—ã–±–Ω—É—Ç—å—Å—è",
            "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –ª—é–±–≤–∏",
            "—Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è –¥–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ Infinity Train",
            "–ø—Ä–æ–π—Ç–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞",
            "–∑'—ó—Å—Ç–∏ –∫–æ–≥–æ-–Ω–µ–±—É–¥—å",
            "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ñ–∏–ª—å–º",
            "–ø–æ–ª—é–±–∏—Ç—å?",
            "–≤–µ—Ä–Ω—É—Ç—å –º–Ω–µ –≤–µ—Ä—É –≤ —Å–µ–±—è",
            "\\*–º–Ω–µ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –ø–∞—Å—Ö–∞–ª–æ–∫\\*",
            "–ø–æ–Ω—è—Ç—å ‚Äî –ø—Ä–æ–∫–ª—è—Ç—å—è ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ",
          ];
          const phrase = [
            "–∑–≤—É—á–∏—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ",
            "–ø–µ—á–µ–Ω—å–µ...",
            "–∑–∞—á–µ–º –≤–∞–º –≤—Å—ë —ç—Ç–æ –Ω–∞–¥–æ.",
            "–ª—É—á—à–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤—ã—Å–ø–∏—Ç–µ—Å—å.",
            "–ª—É—á—à–µ –∑–∞–π–º–∏—Ç–µ—Å—å –Ω–∏—á–µ–º.",
            "–∑–∞–Ω—è—Ç—Å—è –Ω–∏—á–µ–≥–æ–Ω–µ–¥–µ–ª–∞–Ω–∏–µ–º –≤—Å—ë-—Ä–∞–≤–Ω–æ –ª—É—á—à–µ.",
          ].random();
          return `.\n**–ò–¥–µ—è:** –í—ã –º–æ–≥–ª–∏ –±—ã ${ideas.random()}, –Ω–æ ${phrase}`;
        },
      },
      {
        id: "clover",
        name: "‚òòÔ∏è –°—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä",
        value: 400,
        inline: true,
        others: ["–∫–ª–µ–≤–µ—Ä", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä", "clover"],
        fn: () => {
          const phrase =
            ". –ö–ª–µ–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 —á–∞—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 15%!\n–î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.";
          const guild = interaction.guild;
          const guildData = guild.data;

          if (!guildData.cloverEffect) {
            guildData.cloverEffect = {
              coins: 0,
              timestamp: Date.now(),
              uses: 1,
            };
            TimeEventsManager.create("clover-end", 14400000, [
              guild.id,
              interaction.channel.id,
            ]);
            return phrase;
          }

          const clover = guildData.cloverEffect;
          clover.uses++;

          const increaseTimestamp = (timestamp) => {
            const adding = Math.floor(
              14_400_000 - (timestamp - Date.now()) / 18,
            );
            const ms = timestamp + Math.max(adding, 0);
            return ms;
          };
          const day = TimeEventsManager.Util.timestampDay(clover.timestamp);
          clover.timestamp = increaseTimestamp(clover.timestamp);

          const filter = (event) =>
            event.name === "cloverEnd" && event.params.includes(guild.id);
          const event = TimeEventsManager.at(day).find(filter);
          TimeEventsManager.change(event, { timestamp: clover.timestamp });
          return phrase;
        },
      },
      {
        id: "ball",
        name: "üîÆ –í—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
        value: 8000,
        inline: true,
        others: [
          "—à–∞—Ä",
          "–∫—É–±–∏–∫",
          "—Å–ª—É—á–∞–π",
          "–≤—Å–µ–≤–∏–¥—è—â–∏–π",
          "ball",
          "–≤—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
        ],
        fn: () => {
          const items = [
            "void",
            "seed",
            "coins",
            "level",
            "exp",
            "coinsPerMessage",
            "chilli",
            "key",
            "monster",
            "berrys",
            "iq",
            "chestBonus",
          ];
          const item = items.random();
          Util.addResource({
            user: interaction.user,
            value: 1,
            executor: interaction.user,
            source: "command.grempen.product.ball",
            resource: item,
            context: { interaction },
          });

          return ` –∫–∞–∫ \`gachi-${item}\`, –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–¥–∏–Ω.`;
        },
      },
      {
        id: "renewal",
        name: "üîß –ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤",
        value: 312 + userData.level * 2,
        inline: true,
        others: ["–∑–∞–≤–æ–∑", "–∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤"],
        fn: () => {
          userData.grempenBoughted = 0;
          return " –∫–∞–∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–π –∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏";
        },
      },
      {
        id: "curseStone",
        name: "üëÄ –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏",
        value: 600,
        inline: true,
        others: ["–∫–∞–º–µ–Ω—å", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ", "–∫–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏"],
        fn: (product) => {
          userData.curses ||= [];

          const already = userData.curses.length;

          if (already && !userData.voidFreedomCurse) {
            Util.addResource({
              user: interaction.user,
              value: product.value,
              executor: interaction.user,
              source: "command.grempen.product.curse.refund",
              resource: PropertiesEnum.coins,
              context: { interaction, product },
            });

            userData.grempenBoughted -= 2 ** todayItems.indexOf(product);
            return " –∫–∞–∫ –Ω–∏—á—Ç–æ. –í–µ–¥—å –≤—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã!";
          }

          const curse = CurseManager.generate({
            hard: null,
            user: interaction.user,
            context: { guild: interaction.guild },
          });
          const curseBase = CurseManager.cursesBase.get(curse.id);
          CurseManager.init({ user: interaction.user, curse });

          return ` –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ. –ß—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –±–∏—á–∞ –∫–∞–º–Ω—è: ${curseBase.description}.`;
        },
      },
    ];

    const getTodayItems = () =>
      allItems.filter((e, i) =>
        DataManager.data.bot.grempenItems.includes(i.toString(16)),
      );

    const todayItems = getTodayItems();

    if (Math.floor(Date.now() / 86400000) !== userData.shopTime) {
      userData.grempenBoughted = 0;
      userData.shopTime = Math.floor(Date.now() / 86400000);
    }

    const isBought = (product) => {
      const index = todayItems.indexOf(product);
      if (index === -1) return null;

      return (userData.grempenBoughted & (2 ** index)) !== 0;
    };

    const buyFunc = async (name) => {
      const product = allItems.find(
        (item) => item.name === name || item.others.includes(name),
      );

      if (!product || isBought(product) !== false) {
        const emoji = product ? product.name.split(" ")[0] : "üë∫";
        const itemList = todayItems
          .filter((item) => item !== product)
          .map((item) => item.name.split(" ")[0])
          .join(" ");
        await msg.msg({
          title: "<:grempen:753287402101014649> –£–ø—Å!",
          description: `**–°–µ–≥–æ–¥–Ω—è —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç (${emoji}) –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –≤ –ª–∞–≤–∫–µ.**\n–ñ–µ–ª–∞–µ—Ç–µ –≤–∑–ª—è–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã?\n${itemList}`,
          color: "#400606",
          delete: 8000,
        });
        return;
      }

      if (userData.coins < (product.value || 0)) {
        await msg.msg({
          title: "<:grempen:753287402101014649> –¢-–í—ã —á—Ç–æ —É–¥—É–º–∞–ª–∏?",
          description: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤, ${product.name} —Å—Ç–æ–∏—Ç –Ω–∞ ${
            product.value - userData.coins
          } –¥–æ—Ä–æ–∂–µ`,
          color: "#400606",
          delete: 5000,
        });
        return;
      }

      const phrase = product.fn(product);

      if (!isNaN(product.value)) {
        Util.addResource({
          user: interaction.user,
          value: -product.value,
          executor: interaction.user,
          source: `command.grempen.bought.${product.id}`,
          resource: PropertiesEnum.coins,
          context: { interaction, product },
        });
      }

      userData.grempenBoughted += 2 ** todayItems.indexOf(product);
      interaction.user.action(Actions.buyFromGrempen, {
        product,
        channel: interaction.channel,
      });
      if (userData.grempenBoughted === 63) {
        interaction.user.action(Actions.globalQuest, { name: "cleanShop" });
      }

      return msg.msg({
        description: `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É ${
          product.name.split(" ")[0]
        } !\n–¶–µ–Ω–∞ –≤ ${Util.ending(
          product.value,
          "–º–æ–Ω–µ—Ç",
          "",
          "—É",
          "—ã",
        )} –ø—Ä–æ—Å—Ç–æ –Ω–∏—á—Ç–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫—É—é —Ö–æ—Ä–æ—à—É—é –≤–µ—â—å${phrase}`,
        author: { name: msg.author.username, iconURL: msg.author.avatarURL() },
        color: "#400606",
      });
    };

    if (interaction.params) {
      buyFunc(interaction.params.toLowerCase());
      return;
    }

    if (userData.coins < 80) {
      interaction.channel.sendTyping();
      await Util.sleep(1700);
      return msg.msg({
        title: "<:grempen:753287402101014649>",
        description: "–ò–∑—ã–¥–∏ –±–µ–∑–¥–æ–º–Ω—ã–π –ø–æ–ø—Ä–æ—à–∞–π–∫–∞\n–±–µ–∑ –¥–µ–Ω–µ–≥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!",
        color: "#541213",
        delete: 3000,
      });
    }

    const productsToFields = () => {
      const list = todayItems.map((item) => {
        const { name } = item;
        let { value } = item;

        if (isBought(item)) {
          value = "–ö—É–ø–ª–µ–Ω–æ";
        }

        return { name, value, inline: true };
      });

      return list;
    };

    let embed = {
      title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
      description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É, –º–µ–Ω—è –∑–æ–≤—É—Ç –ì—Ä–µ–º–ø–ª–µ–Ω—Å –∏ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∫–∏–¥–∫–∏!\n–û, –≤–∏–∂—É —É –≤–∞—Å –µ—Å—Ç—å **${userData.coins}** <:coin:637533074879414272>, –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ª–∏ —á–µ–≥–æ –Ω–∏–±—É–¥—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?`,
      fields: productsToFields(),
      color: "#400606",
      footer: { text: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è, —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ü–µ–Ω—ã!" },
    };
    const shop = await interaction.channel.msg(embed);

    let react;
    while (true) {
      let reactions = todayItems
        .filter(
          (item) =>
            isBought(item) === false &&
            (isNaN(item.value) || item.value <= userData.coins),
        )
        .map((item) => item.name.split(" ")[0]);
      if (reactions.length === 0) reactions = ["‚ùå"];

      react = await shop.awaitReact(
        { user: msg.author, removeType: "all" },
        ...reactions,
      );

      if (!react || react === "‚ùå") {
        await shop.reactions.removeAll();
        await shop.msg({
          title: "–õ–∞–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë <:grempen:753287402101014649>",
          edit: true,
          color: "#400606",
          description:
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `!grempen`, –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
          image:
            "https://cdn.discordapp.com/attachments/629546680840093696/847381047939432478/grempen.png",
        });
        return;
      }

      const product = allItems.find(
        (item) => item.name.split(" ")[0] === react,
      );
      buyFunc(product.name);

      if (userData.coins < 80) {
        msg.channel.sendTyping();
        await Util.sleep(1200);

        shop.msg({
          title: "–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –ù–µ—Ç? –ù—É –∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π—Ç–µ!",
          edit: true,
          delete: 3000,
        });
        return;
      }
      embed = {
        title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞",
        edit: true,
        description: `–£ –≤–∞—Å –µ—Å—Ç—å-–æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –û—Ç–ª–∏—á–Ω–æ! **${userData.coins}** <:coin:637533074879414272> —Ö–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–∫—É–ø–∏—Ç—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –µ—â—ë!`,
        fields: productsToFields(),
        footer: { text: "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë, –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!" },
        color: "#400606",
      };
      await shop.msg(embed);
    }
  }

  options = {
    name: "grempen",
    id: 25,
    media: {
      description:
        "\n\n–õ–∞–≤–∫–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π, —Ü–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–≤—ã—à–µ–Ω—ã, –Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n‚úèÔ∏è\n```python\n!grempen #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n```\n\n",
    },
    allias:
      "–≥—Ä–µ–º–ø–ª–µ–Ω—Å –≥—Ä–µ–º–ø–µ–Ω—Å evil_shop –∑–ª–æ–≤–µ—â–∞—è_–ª–∞–≤–∫–∞ hell –ª–∞–≤–∫–∞ grempens shop —à–∞–ª—É–Ω “ë—Ä–µ–º–ø–µ–Ω—Å –∫—Ä–∞–º–Ω–∏—Ü—è",
    allowDM: true,
    cooldown: 10_000,
    type: "other",
  };
}

export default Command;
