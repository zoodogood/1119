import * as Util from "#lib/util.js";
import DataManager from "#lib/modules/DataManager.js";
import CurseManager from "#lib/modules/CurseManager.js";
import { Actions } from "#lib/modules/ActionManager.js";
import CooldownManager from "#lib/modules/CooldownManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";

class Chest {
  static callOpen({ user }) {
    const count = this.calculateOpenCount({ user });
    return this.getResources({ user, openCount: count });
  }

  static applyTreasures({ user, treasures, context }) {
    const apply = (item, quantity) => {
      switch (item) {
        case "trash":
          break;

        case "gloves":
          Util.addResource({
            user,
            value: quantity,
            executor: user,
            source: "chestManager.applyTreasures",
            resource: PropertiesEnum.thiefGloves,
            context: { treasures, ...context },
          });
          break;

        default:
          Util.addResource({
            user,
            value: quantity,
            executor: user,
            source: "chestManager.applyTreasures",
            resource: item,
            context: { treasures, context },
          });
          break;
      }
    };

    Object.entries(treasures).forEach(([item, quantity]) =>
      apply(item, quantity),
    );
  }

  static calculateOpenCount({ user }) {
    const bonuses = user.data.chestBonus || 0;
    return 2 + Math.ceil(bonuses / 3);
  }

  static getResources({ user, openCount }) {
    const userData = user.data;

    const pushTreasure = (item, quantity) =>
      (treasures[item] = treasures[item]
        ? quantity + treasures[item]
        : quantity);
    const treasuresPull = this.TREASURES_PULL[userData.chestLevel ?? 0];
    const treasures = {};

    let i = openCount;
    while (i > 0) {
      i--;
      const { item, quantity } = treasuresPull.random({ weights: true });
      switch (item) {
        case "bonus":
          i += quantity;
          openCount += quantity;
      }
      pushTreasure(item, quantity);
    }

    return { treasures, openCount };
  }

  static TREASURES_PULL = [
    [
      { item: "void", quantity: 1, _weight: 1 },
      { item: "berrys", quantity: 1, _weight: 4 },
      { item: "keys", quantity: Util.random(2, 3), _weight: 9 },
      { item: "trash", quantity: 0, _weight: 13 },
      { item: "exp", quantity: Util.random(19, 89), _weight: 22 },
      { item: "coins", quantity: Util.random(23, 40), _weight: 46 },
      { item: "chilli", quantity: 1, _weight: 4 },
      { item: "gloves", quantity: 1, _weight: 1 },
    ],
    [
      { item: "void", quantity: 1, _weight: 1 },
      { item: "berrys", quantity: Util.random(1, 2), _weight: 8 },
      { item: "keys", quantity: Util.random(3, 5), _weight: 7 },
      { item: "trash", quantity: 0, _weight: 3 },
      { item: "exp", quantity: Util.random(39, 119), _weight: 22 },
      { item: "coins", quantity: Util.random(88, 148), _weight: 54 },
      { item: "chilli", quantity: 1, _weight: 3 },
      { item: "gloves", quantity: 1, _weight: 2 },
    ],
    [
      { item: "void", quantity: 1, _weight: 1 },
      { item: "berrys", quantity: Util.random(1, 3), _weight: 12 },
      { item: "keys", quantity: 9, _weight: 1 },
      { item: "exp", quantity: Util.random(229), _weight: 22 },
      { item: "coins", quantity: Util.random(304, 479), _weight: 62 },
      { item: "gloves", quantity: 1, _weight: 1 },
      { item: "bonus", quantity: 5, _weight: 1 },
    ],
  ];
}

class ChestManager {
  static open({ user, context }) {
    const userData = user.data;
    const nowBirthday = userData.BDay === DataManager.data.bot.dayDate;
    nowBirthday && (userData.chestBonus = 30 + (userData.chestBonus || 0));

    const { treasures, openCount } = Chest.callOpen({ user });
    delete userData.chestBonus;
    Chest.applyTreasures({ user, treasures, context });

    Object.entries(treasures).forEach((item, quantity) =>
      this.handleTreasure(item, quantity, user),
    );

    return { treasures, openCount };
  }

  static handleTreasure(item, quantity, user) {
    switch (item) {
      case "keys":
        if (quantity > 99) {
          user.action(Actions.globalQuest, { name: "bigHungredBonus" });
        }
        break;
    }
  }

  static cooldown = {
    key: "CD_32",
    for(userData) {
      const cooldown = CooldownManager.api(userData, this.key);
      cooldown.install = function () {
        const timestamp = +Util.dayjs().endOf("date");
        this.setCooldownThreshold(timestamp);
        return this;
      };

      return cooldown;
    },
  };
}

class Command {
  async onChatInput(msg, interaction) {
    const { user, userData } = interaction;

    const cooldown = ChestManager.cooldown.for(userData);
    if (cooldown.checkYet()) {
      const diffContent = Util.timestampToDate(cooldown.diff());
      msg.msg({
        title: `–°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!`,
        color: "#ffda73",
        footer: {
          text: `–î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${diffContent}`,
          iconURL:
            "https://vignette.wikia.nocookie.net/e2e-expert/images/b/b3/Chest.png/revision/latest?cb=20200108233859",
        },
      });
      return;
    }

    const chest = {
      icon: [
        "https://cdn.discordapp.com/attachments/629546680840093696/778990528947027988/ezgif.com-gif-maker.gif",
        "https://cdn.discordapp.com/attachments/629546680840093696/778990564779229234/ezgif.com-gif-maker_1.gif",
      ].random(),
      color: "#ffda73",
    };

    const { treasures, openCount } = ChestManager.open({
      user,
      context: { interaction },
    });

    let actualOpenCount = openCount;
    const items = [];

    const handleTreasure = (item, quantity) => {
      switch (item) {
        case "trash":
          actualOpenCount -= quantity;
          delete treasures.trash;
          break;

        case "void":
          Object.assign(chest, {
            color: "#3d17a0",
            icon: "https://media.discordapp.net/attachments/631093957115379733/842122055527694366/image-removebg-preview.png",
          });
          items.push(
            `${Util.ending(
              quantity,
              "–£—Ä–æ–≤",
              "–Ω–µ–π",
              "–µ–Ω—å",
              "–Ω—è",
            )} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:void:768047066890895360>`,
          );
          break;

        case "keys":
          items.push(`${Util.ending(quantity, "–ö–ª—é—á", "–µ–π", "", "–∞")} üî©`);
          break;

        case "coins":
          items.push(
            `${Util.ending(
              quantity,
              "–ö–æ–∏–Ω",
              "–æ–≤",
              "",
              "–∞",
            )} <:coin:637533074879414272>`,
          );
          break;

        case "exp":
          (() => {
            const emoji = [
              "<:crys:637290406958202880>",
              "<:crys2:763767958559391795>",
              "<:crys3:763767653571231804>",
            ][Math.min(2, Math.floor(quantity / 10))];
            items.push(
              `${Util.ending(quantity, "–û–ø—ã—Ç", "–∞", "", "–∞")} ${emoji}`,
            );
          })();
          break;

        case "berrys":
          items.push(
            `${Util.ending(
              quantity,
              "–ö–ª—É–±–Ω–∏–∫",
              "",
              "–∞",
              "–∏",
            )} <:berry:756114492055617558>`,
          );
          break;

        case "cake":
          items.push("–û–¥–∏–Ω –¢–æ—Ä—Ç–∏–∫ üéÇ");
          break;

        case "bonus":
          items.push(
            `${Util.ending(
              quantity,
              "–°–æ–∫—Ä–æ–≤–∏—â",
              "",
              "–µ",
              "–∞",
            )} –¥–ª—è —ç—Ç–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ <a:chest:805405279326961684>`,
          );
          break;

        case "gloves":
          items.push(`${Util.ending(quantity, "–ü–µ—Ä—á–∞—Ç", "–æ–∫", "–∫–∞", "–∫–∏")} üß§`);
          break;

        case "chilli":
          items.push(`${Util.ending(quantity, "–ü–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")} üå∂Ô∏è`);
          break;

        default:
          break;
      }
    };

    Object.entries(treasures).forEach(([item, quantity]) =>
      handleTreasure(item, quantity),
    );

    const itemsOutput = structuredClone(items);
    msg.author.action(Actions.openChest, { msg, interaction, treasures });

    msg.author.action(Actions.globalQuest, { name: "firstChest" });
    cooldown.install();

    const embed = {
      title: actualOpenCount > 30 ? "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å—É–Ω–¥—É–∫" : "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—É–Ω–¥—É–∫",
      description: items.length
        ? `–ë–û–ù–£–°–û–í –°–£–ù–î–£–ö–ê ‚Äî ${actualOpenCount}:`
        : "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—É–Ω–¥—É–∫ ‚Äî –ø—É—Å—Ç. –í—Å–µ–≥–æ-–ª–∏—à—å –ø–∞—Ä–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –∫—Ä–∞–±—å–∏—Ö –Ω–æ–∂–µ–∫ –∏ –≥–æ—Ä—ã –ø–µ—Å–∫–∞... <a:penguin:780093060628873296>",
      color: chest.color,
      thumbnail: !items.length ? chest.icon : null,
      footer: { text: `–£—Ä–æ–≤–µ–Ω—å —Å—É–Ω–¥—É–∫–∞: ${userData.chestLevel + 1}` },
    };
    const message = await msg.msg(embed);
    embed.edit = true;

    while (itemsOutput.length) {
      await Util.sleep(1500 / (itemsOutput.length / 2));
      embed.description += itemsOutput
        .splice(0, 1)
        .map((e) => `\n${e}`)
        .join("");
      embed.thumbnail = itemsOutput.length ? null : chest.icon;
      await message.msg(embed);
    }

    if (items.length === 0 && Util.random(2) === 0) {
      const curse = CurseManager.generate({
        hard: null,
        user: interaction.user,
        guild: interaction.guild,
      });

      CurseManager.init({ user: interaction.user, curse });
      await Util.sleep(3000);
      msg.msg({
        description: `${interaction.user}, –≤—ã –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã. –í –ø—É—Å—Ç–æ–º —Å—É–Ω–¥—É–∫–µ –∏ –Ω–µ —Ç–∞–∫–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è.. ü™∏`,
      });
    }
  }

  options = {
    name: "chest",
    id: 32,
    media: {
      description:
        "\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π-–æ–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫, –Ω–∏—á–µ–º –Ω–µ –ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –≤ –Ω–µ–≥–æ –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å 20 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n\n‚ùì –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω:\n–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞ –≤ –∫–æ—Ç–ª–µ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ—Å—É—Ä—Å–∞, –ö–ª—é—á–µ–π.\n–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É–Ω–¥—É–∫–∞ –¥–æ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ 150 –∫–ª—é—á–µ–π, –∏ 500 –¥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ.\n\n‚úèÔ∏è\n```python\n!chest #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n```\n\n",
    },
    allias: "—Å—É–Ω–¥—É–∫ daily —Å–∫—Ä–∏–Ω—è —Å–∫—Ä–∏–Ω—å–∫–∞",
    allowDM: true,
    type: "other",
  };
}

export default Command;
export { Chest, ChestManager };
