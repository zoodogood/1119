import * as Util from '#src/modules/util.js';
import { client } from '#src/index.js';
import DataManager from '#src/modules/DataManager.js';
import BerryCommand from '#src/commands/berry.js';

class Command {

	async onChatInput(msg, interaction){
    

    const guildData = msg.guild.data;
    Object.assign(interaction, {
      level: guildData.treeLevel || 0,
      guildData,
      costsUp: null,
      interfaceMessage: null,
      berrysCollected: 0
    });

    interaction.costsUp = this.getCosts(interaction);
    
    const embed = this.createEmbed(interaction);
    const message = interaction.interfaceMessage = await msg.msg(embed);



    if (interaction.level < 20){
      await message.react("üå±");
    }

    if (guildData.berrys >= 1){
      await message.react("756114492055617558");
    }

    const filter = (reaction, user) => user.id !== client.user.id && ( reaction.emoji.name === "üå±" || reaction.emoji.id === "756114492055617558" )
    const collector = message.createReactionCollector({filter, time: 180000});
    collector.on("collect", async (reaction, user) => {
      this.onCollect(reaction, user, interaction);
    });

    collector.on("end", message.reactions.removeAll);
  }

  updateBerrysCount({level, guildData}){
    const timePassed = (Date.now() - guildData.treeEntryTimestamp) || 0;
    const speedGrowth = this.getSpeedGrowth({level});
    const limit = speedGrowth * 360;

    const adding = (timePassed / 86_400_000) * speedGrowth;
    const berrys = (guildData.berrys || 0) + adding;
    guildData.berrys = Math.min(berrys, limit);

    guildData.treeEntryTimestamp = Date.now();
    return;
  }

  createEmbed(interaction){
    const { level, costsUp, guildData } = interaction;
    this.updateBerrysCount(interaction);

    const speedGrowth = this.getSpeedGrowth({level});
    const createFields = () => {

      const FIELDS = [
        {
          label: "–ù–µ –ø–æ—Å–∞–∂–µ–Ω–æ",
          callback: () => {
            const value =  "–ï–º—É –µ—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—Ä–∞—Å—Ç–∏, –±—É–¥—É—á–∏ —Å–µ–º–µ—á–∫–æ–º –¥–µ—Ä–µ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ø–ª–æ–¥—ã.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–∞–¥–∏—Ç–µ —Å–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å.\n\n‚ùì –í—ã–ø–æ–ª–Ω—è—è –∫–∞–∂–¥—ã–π 50-–π –∫–≤–µ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ –¥–≤–µ —à—Ç—É–∫–∏";
            return {name: "–†–æ—Å—Ç", value};
          },
          filter: () => level === 0
        },
        {
          callback: () => {
            const {metric, count} = speedGrowth > 100 ? {metric: "–º–∏–Ω—É—Ç—É", count: speedGrowth / 1440} : speedGrowth > 10 ? {metric: "—á–∞—Å", count: speedGrowth / 24} : {metric: "–¥–µ–Ω—å", count: speedGrowth};
            const contents = {
              speed: `–ö–ª—É–±–Ω–∏–∫–∏ –≤—ã—Ä–æ—Å—Ç–∞–µ—Ç ${ count } –≤ ${ metric }`,
              ready: `–ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–±–æ—Ä–∞: ${ Math.floor(guildData.berrys) }`,
              nextIn: `–°–ª–µ–¥—É—â–∞—è –¥–æ–∑—Ä–µ–µ—Ç —á–µ—Ä–µ–∑: ${ Util.timestampToDate((1 - guildData.berrys % 1) * 86400000 / speedGrowth) } <:berry:756114492055617558>`
            }
            const name = "–ü–ª–æ–¥—ã";
            const value = `${ contents.speed }\n${ contents.ready }\n${ contents.nextIn }`
            
            return {name, value};
          },
          filter: () => level !== 0
        },
        {
          callback: () => {
            const entrySeeds = guildData.treeSeedEntry || 0;
            const contents = {
              forIncreaseNeed: `${ costsUp - entrySeeds > 5 ? costsUp - entrySeeds : ["–Ω–æ–ª—å", "–æ–¥–Ω–æ", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å"][costsUp - entrySeeds]} ${Util.ending(costsUp - entrySeeds, "—Å–µ–º", "—è–Ω", "–µ—á–∫–æ", "–µ—á–∫–∞", {unite: (_quantity, word) => word})}`,
              level: `–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤—Ü–∞ ${ level }`
            };
            const name = "–î–µ—Ä–µ–≤–æ";
            const value = `${ contents.level } ${level === 20 ? "(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)" : `\n–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ ${ contents.forIncreaseNeed }` }`;
            return {name, value};
          },
          filter: () => level !== 0
        },
        {
          callback: () => {
            const messagesNeed = this.calculateMessagesNeed(interaction);

            const status = guildData.treeMisstakes ?
              messagesNeed <= guildData.day_msg ? "–î–µ—Ä–µ–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è" : "–°–ª–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–µ—Ä–µ–≤–æ –Ω–µ –∑–∞—Å–æ—Ö–ª–æ" :
              messagesNeed <= guildData.day_msg ? "–î–µ—Ä–µ–≤–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ" : "–î–µ—Ä–µ–≤–æ —Ä–∞–¥—É–µ—Ç—Å—è";

            const value = messagesNeed <= guildData.day_msg ? 
              "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ!" :
              `–°–æ–æ–±—â–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ: ${guildData.day_msg}/${messagesNeed} ${  guildData.treeMisstakes ? `\n–†–∏—Å–∫—É–µ—Ç –∑–∞–≤—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ ${+(4 - guildData.treeMisstakes).toFixed(1)}–¥` : ""}`;

            return {name: `üíß ${ status }`, value};
          },
          filter: () => level !== 0
        },
        {
          callback: () => {
            const count = interaction.berrysCollected;
            const name = "–ö–ª—É–±–Ω–∏–∫–∏ —Å–æ–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏";
            const value = `${ Util.ending(count, "—à—Ç—É–∫", "", "–∞", "–∏") };`;
            return {name, value};
          },
          filter: () => interaction.berrysCollected
        },
      ];

      return FIELDS
        .filter(field => field.filter())
        .map(field => field.callback());
    };


  


    const embed = {
      title: "–ñ–∏–≤–æ–µ, –∫–ª—É–±–Ω–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
      thumbnail: this.THUMBAIL_IMAGES_TABLE[ Math.ceil(level / 4) ],
      description: `–≠—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ–∫–µ–∞–Ω –∫–ª—É–±–Ω–∏–∫–∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫. –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –Ω—ë–º: –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–µ—Å–µ–ª–æ. –û–Ω–æ –º–æ–∂–µ—Ç –º–æ–∂–µ—Ç –∑–∞—Å–æ—Ö–Ω—É—Ç—å!`,
      fields: createFields(),
      footer: {text: "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç —Å–æ–±–æ–π –≤–æ–¥—É, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π", iconURL: "https://media.discordapp.net/attachments/629546680840093696/1065874615055958056/water.png"}
    };

    return embed;
  }

  MESSAGES_NEED_TABLE   = [0, 70, 120, 180, 255, 370, 490, 610, 730, 930, 1270, 1500, 1720, 2200, 2700, 3200, 3700, 4500, 5400, 7400, 12000];
  GROWTH_SPEED_TABLE    = [0, 1.2, 1.8, 2.5, 5, 7.5, 10, 12, 15.6, 21, 24, 42, 54, 66, 84, 108, 144, 252, 360, 450, 792, 1008];
  COSTS_TABLE           = [1, 1, 1, 3, 2, 2, 2, 4, 2, 2, 2, 5, 3, 3, 3, 7, 4, 4, 4, 10];
  THUMBAIL_IMAGES_TABLE = [null, "https://cdn.discordapp.com/attachments/629546680840093696/875367772916445204/t1.png", "https://cdn.discordapp.com/attachments/629546680840093696/875367713411858492/t2.png", "https://cdn.discordapp.com/attachments/629546680840093696/875367267318247444/t3.png", "https://cdn.discordapp.com/attachments/629546680840093696/875366344642662510/t4_digital_art_x4.png", "https://cdn.discordapp.com/attachments/629546680840093696/875366096952246312/t9.png"];

  GLOBAL_MESSAGES_NEED_MULTIPLAYER = 0.3;

  calculateMessagesNeed({level, guildData, guild}){
    const basic = this.MESSAGES_NEED_TABLE[level];
    const byMembersCount = guild.memberCount * 3;
    const byDayAverage = (guildData.day_average || 0) / 5;

    const treeMistakesMultiplayer = "treeMisstakes" in guildData ? 1 - 0.1 * guildData.treeMisstakes : 1;
    const globalMultiplayer = this.GLOBAL_MESSAGES_NEED_MULTIPLAYER;
    const count = (  basic + byMembersCount + byDayAverage  ) * globalMultiplayer * treeMistakesMultiplayer;
    return Math.floor(count);
  }

  getCosts({level}){
    return this.COSTS_TABLE[level];
  }

  getSpeedGrowth({level}){
    return this.GROWTH_SPEED_TABLE[level];
  }

  async onLevelUp(interaction){
    const {guildData, message} = interaction;
    guildData.treeSeedEntry = 0;
    interaction.level = guildData.treeLevel = (guildData.treeLevel ?? 0) + 1;
    interaction.costsUp = this.COSTS_TABLE[interaction.level];
    guildData.berrys = Math.round(1.5 ** (interaction.level + 3) + guildData.berrys) + this.getSpeedGrowth(interaction) * 5;

    await message.react("756114492055617558");

    interaction.channel.msg({title: "–î–µ—Ä–µ–≤–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ—Å–ª–æ", description: `–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–µ–º–µ—á–∫–∞ üå±, –¥–µ—Ä–µ–≤–æ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ –∏ –¥–æ—Å—Ç–∏–≥–ª–æ —É—Ä–æ–≤–Ω—è ${ interaction.level }!`});
    delete guildData.treeMisstakes;
  }

  async onCollect(reaction, user, interaction){
    const react = reaction.emoji.id || reaction.emoji.name;
    const userData = user.data;
    const guildData = interaction.guildData;

    if (react === "üå±"){
      if ( interaction.level >= 20 ){
        interaction.channel.msg({title: "–ï—â—ë –±–æ–ª—å—à–µ?", description: `–ù–µ –Ω—É–∂–Ω–æ, –¥–µ—Ä–µ–≤–æ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`, author: {name: user.username, iconURL: user.avatarURL()}, delete: 7000});
        interaction.interfaceMessage.reactions.resolve("üå±").remove();
        return;
      }

      if (!userData.seed){
        interaction.channel.msg({title: "–£ –≤–∞—Å –Ω–µ—Ç –°–µ–º—è–Ω", description: `–ì–¥–µ –∏—Ö –¥–æ—Å—Ç–∞—Ç—å? –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã, –∫–∞–∂–¥—ã–π 50-–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–π –∫–≤–µ—Å—Ç –±—É–¥–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å –≤–∞—Å –¥–≤—É–º—è —Å–µ–º–µ—á–∫–∞–º–∏.`, author: {name: user.username, iconURL: user.avatarURL()}, delete: 7000});
        return;
      }

      guildData.treeSeedEntry = (guildData.treeSeedEntry ?? 0) + 1;
      userData.seed--;
      interaction.channel.msg({title: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–µ–º–µ—á–∫–æ, ${user.username}`, description: `üå± `, delete: 7000});
      
      if (guildData.treeSeedEntry >= interaction.costsUp){
        this.onLevelUp(interaction);
      }
    }

    
    // Berry take
    if (react === "756114492055617558"){
      if (userData.CD_54 > Date.now()){
        interaction.channel.msg({title: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞...", description: `–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∫–ª—É–±–Ω–∏–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ **${Util.timestampToDate( userData.CD_54 - Date.now() )}**`, footer: {text: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–∞"}, author: {name: user.username, iconURL: user.avatarURL()}, delete: 7000, color: "#ff0000"});
        return;
      }

      if (guildData.berrys < 1){
        interaction.channel.msg({title: "–£–ø—Å..!", description: "–ù–∞ –¥–µ—Ä–µ–≤–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫–ª—É–±–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å –∫–ª—É–±–Ω–∏–∫—É —Ä–∞–Ω—å—à–µ –≤–∞—Å.. –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –¥–æ–∑—Ä–µ–µ—Ç —Å–ª–µ–¥—É—â–∞—è, –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –µ—ë!", author: {name: user.username, iconURL: user.avatarURL()}, delete: 7000, color: "#ff0000"});
        return;
      }

      const berrys = this.calculateBerrysTake({guildData, userData, level: interaction.level});

      userData.berrys += berrys;
      guildData.berrys -= berrys;
      interaction.berrysCollected += berrys;

      DataManager.data.bot.berrysPrise += berrys * BerryCommand.INFLATION;
      interaction.channel.msg({
        title: "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –∫–ª—É–±–Ω–∏–∫—É",
        author: {name: user.username, iconURL: user.avatarURL()},
        description: `${ berrys > 5 ? berrys : ["–ù–æ–ª—å", "–û–¥–Ω–∞", "–î–≤–µ", "–¢—Ä–∏", "–ß–µ—Ç—ã—Ä–µ", "–ü—è—Ç—å"][berrys] } ${ Util.ending(berrys, "—è–≥–æ–¥", "", "–∞", "—ã", {unite: (_quantity, word) => word}) } ${Util.ending(berrys, "–ø–æ–ø–∞", "–¥–∞—é—Ç", "–ª–∞", "–ª–∏", {unite: (_quantity, word) => word})} –≤ –≤–∞—à –∫–∞—Ä–º–∞–Ω <:berry:756114492055617558>`,
        delete: 9000
      });
      userData.CD_54 = Date.now() + this.calculateCooldown(interaction);

      this.becomeCoinMessage({user});
    }



    const embed = this.createEmbed(interaction);
    await interaction.interfaceMessage.msg({...embed, edit: true});
  }

  calculateBerrysTake({guildData, level, userData}){
    const isBerryMany = guildData.berrys > this.getSpeedGrowth({level}) * 3;

    const farmerBonus = userData.voidTreeFarm ?? 0;

    const basic = 1 + farmerBonus;
    const berryManyBonus = isBerryMany ? Util.random(0, 3 + farmerBonus * 2, {round: false}) : 0;

    const berrys = basic + berryManyBonus;

    return Math.floor(
      Math.min(berrys, guildData.berrys)
    );
  }

  calculateCooldown(interaction){
    return Math.max( 86_400_000 / this.getSpeedGrowth(interaction) * (1 + interaction.level), 7_200_000 );
  }

  onDayStats(guild, context){
    const guildData = guild.data;
    const level = guildData.treeLevel;
    const messagesNeed = this.calculateMessagesNeed({guild, guildData, level});
 

    if (guildData.day_msg < messagesNeed){
      guildData.treeMisstakes = (guildData.treeMisstakes ?? 0) + 0.2 + Number( (1 - guildData.day_msg / messagesNeed).toFixed(1) );
      context.guilds[guild.id] ||= {};
      context.guilds[guild.id].messagesNeed = messagesNeed;

      if (guildData.treeMisstakes >= 4){
        delete guildData.treeMisstakes;
        guildData.treeLevel--;
      }

      return;
    }

    guildData.treeMisstakes = (guildData.treeMisstakes ?? 0) - 0.2;

    if (guildData.treeMisstakes <= 0)
      delete guildData.treeMisstakes;


  }

  becomeCoinMessage({user}){
    const become = async (userData) => {
      const filter = (message) => message.author.id === userData.id;
      const collector = new Util.CustomCollector({target: client, event: "message", filter, time: 500_000});
      collector.setCallback((message) => {
        collector.end();
        getCoinsFromMessage(userData, message);
      });
    }
    
    !Util.random(0, 5) && become(user.data);
  }

	options = {
	  "name": "seed",
	  "id": 54,
	  "media": {
	    "description": "\n\n–ö–ª—É–±–Ω–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ? –ú-–º, –≤–∫—É—Å–Ω–æ, –∞ –≥–æ–≤–æ—Ä—è—Ç –æ–Ω–∏ –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö –Ω–µ —Ä–æ—Å—Ç—É—Ç..\n–û–Ω–æ –æ–±—â–µ–µ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ —Å–µ—Ä–≤–µ—Ä—É. –ë—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —è–≥–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∫–∞–∂–¥—ã–π\n_–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Ä–∞—Å—Ç–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞—Å–æ—Ö–Ω—É—Ç—å, –µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ \"–∞–∫—Ç–∏–≤–∞\"_\n\n:pencil2:\n```python\n!tree #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n```\n\n"
	  },
	  "allias": "tree livetree —Å–µ–º–µ—á–∫–æ berrystree –¥–µ—Ä–µ–≤–æ –∫–ª—É–±–Ω–∏—á–Ω–æ–µ–¥–µ—Ä–µ–≤–æ –∂–∏–≤–æ–µ–¥–µ—Ä–µ–≤–æ",
		"allowDM": true,
		"type": "other"
	};
};

export default Command;