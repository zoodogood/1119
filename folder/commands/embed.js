//@ts-check
import { BaseCommand } from "#lib/BaseCommand.js";
import * as Util from "#lib/util.js";
import { FormattingPatterns } from "discord-api-types/v10";
import { BaseCommandRunContext } from "#lib/CommandRunContext.js";
import { MINUTE } from "#constants/globals/time.js";

class CommandRunContext extends BaseCommandRunContext {
  embed = {};
  addable = {
    reactions: null,
    webhook: null,
  };
  previewMessage = null;
  reactionsPool = null;
  user;
  channel;
  guild;

  updatePreviewMessage() {
    this.previewMessage.msg({ edit: true, ...this.embed });
  }

  static async new(interaction, command) {
    return new this(interaction, command);
  }

  constructor(interaction, command) {
    super(interaction, command);
    const { user, channel, guild } = interaction;
    Object.assign(this, { user, channel, guild });
    this.reactionsPool = this.command.DEFAULT_REACTIONS_POOL;
  }
}

class Command extends BaseCommand {
  createBaseEmbed(json) {
    const title = "–≠–º–±–µ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä";
    const description = `–° –ø–æ–º–æ—â—å—é —Ä–µ–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–π—Ç–µ –≤–µ–ª–∏–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, \n–∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º\n–ü–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!\n\nüìå - –∑–∞–≥–ª–∞–≤–∏–µ/–Ω–∞–∑–≤–∞–Ω–∏–µ\nüé® - —Ü–≤–µ—Ç\nüé¨ - –æ–ø–∏—Å–∞–Ω–∏–µ\nüë§ - –∞–≤—Ç–æ—Ä\nüéè - –ø–æ–¥–≥—Ä—É–ø–ø–∞\nü™§ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É\nü™Ñ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–∑—É\nüß± - –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å\nüïµÔ∏è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫\nüòÜ - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\nüì• - —Ñ—É—Ç–µ—Ä\n\n‚≠ë –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∂–º—è–∫–∞–π—Ç–µ <:arrowright:640449832799961088>\n`;

    const embed = {
      title,
      description,
    };

    if (json) {
      const parsed = JSON.parse(json);
      Object.assign(embed, parsed);
    }

    return embed;
  }

  DEFAULT_WEBHOOK_ICON_URL =
    "https://www.emojiall.com/images/240/openmoji/1f7e9.png";

  actions = [
    {
      emoji: "üìå",
      async callback(context) {
        const { channel, user, embed } = context;
        embed.title = "{–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å}";
        await context.updatePreviewMessage();

        const question = await channel.msg({
          title: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üìå",
          color: embed.color,
        });
        let answer = (
          await channel.awaitMessage({
            user,
            remove: true,
          })
        )?.content;
        question.delete();
        if (!answer) {
          return;
        }

        const link = answer.match(/https:\/\/.+?(\s|$)/);
        if (link) {
          answer = answer.replace(link[0], "").trim();
          embed.url = link;
        }
        embed.title = answer;
      },
    },
    {
      emoji: "üé®",
      async callback(context) {
        const { channel, user, embed } = context;
        const HEX_PALLETTE_PICKER_URL = "https://g.co/kgs/nZmh1XP";
        const { content: answer } = await Util.question({
          channel,
          user,
          message: {
            title: "–¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: #2c2f33",
            description: `[–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–Ω–ª–∞–π–Ω –ø–∞–ª–∏—Ç—Ä–µ](${HEX_PALLETTE_PICKER_URL})`,
            color: embed.color,
          },
        });
        if (!answer) {
          return;
        }

        const color = answer.match(/[a-f0-9]{6}/i)?.[0];
        if (!color) {
          channel.msg({
            title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–ª—Å—è —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX `#38f913`",
            color: "#ff0000",
            delete: 7_000,
          });
          return;
        }
        embed.color = color.toLowerCase();
      },
    },
    {
      emoji: "üé¨",
      async callback(context) {
        const { channel, user, embed } = context;
        embed.description = "{–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å}";
        await context.updatePreviewMessage();
        const { content: answer } = await Util.question({
          channel,
          user,
          time: MINUTE * 15,
          message: {
            title: "–û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∏–ª—å–º—É üé¨",
            color: embed.color,
          },
        });

        if (!answer) {
          return;
        }
        embed.description = answer;
      },
    },
    {
      emoji: "üë§",
      async callback(context) {
        const { channel, user, embed } = context;
        embed.author = { name: "{–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å}" };
        await context.updatePreviewMessage();
        const { value: response } = await Util.question({
          channel,
          user,
          message: {
            title:
              "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∏–∫",
            description:
              "–ò–ª–∏ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            color: embed.color,
          },
        });

        if (!response) {
          return;
        }
        const member = response.mentions.users.first();
        const iconURL = member
          ? member.avatarURL()
          : (() => {
              const url = response.content.match(/https:\/\/.+?(\s|$)/)?.[0];
              response.content = response.content.replace(url, "").trim();
            })();
        const name = member ? member.username : response.content;
        embed.author = { name, iconURL };
      },
    },
    {
      emoji: "üéè",
      async callback(context) {
        await context.previewMessage.reactions.removeAll();
        context.reactionsPool = context.command.WHEN_UNCOVERED_REACTIONS_POOL;
      },
    },
    {
      emoji: "üì•",
      async callback(context) {
        const { channel, user, embed } = context;
        embed.footer = { text: "{–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å}" };
        await context.updatePreviewMessage();
        const { value: response } = await Util.question({
          channel,
          user,
          message: {
            title: "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ñ—É—Ç–µ—Ä–∞",
            description: `–ê —Ç–∞–∫–∂–µ –≤–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞`,
            color: embed.color,
          },
        });

        if (!response) {
          return;
        }
        const iconURL = response.content.match(/https:\/\/.+?(\s|$)/)?.[0];
        if (iconURL) {
          response.content = response.content.replace(iconURL[0], "").trim();
        }

        embed.footer = { text: response, iconURL };
      },
    },
    {
      emoji: "üòÜ",
      async callback(context) {
        const { channel, user, embed } = context;
        await context.previewMessage.reactions.removeAll();
        const collector = await channel.msg({
          title:
            '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä—è–º–æ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n–ê –∑–∞—Ç–µ–º –∂–º—è–∫–Ω–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é "–ì–æ—Ç–æ–≤–æ"<:mark:685057435161198594>',
          color: embed.color,
        });
        await context.previewMessage.awaitReact(
          { user, removeType: "one" },
          "685057435161198594",
        );
        const reactions = Array.from(collector.reactions.cache.keys());
        context.addable.reactions = reactions;

        collector.delete();
        await context.previewMessage.reactions.removeAll();
      },
    },
    {
      emoji: "ü™§",
      async callback(context) {
        const { channel, user, embed } = context;
        const { content: answer } = await Util.question({
          channel,
          user,
          message: {
            title: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            description: "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ø—Ä–∞–≤–∞-—Å–≤–µ—Ä—Ö—É",
            color: embed.color,
          },
        });

        if (!answer.startsWith("http")) {
          channel.msg({
            title: "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            color: "#ff0000",
            delete: 7_000,
          });
          return;
        }
        embed.thumbnail = answer;
      },
    },
    {
      emoji: "ü™Ñ",
      async callback(context) {
        const { channel, user, embed } = context;
        const { content: answer } = await Util.question({
          channel,
          user,
          message: {
            title: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            description: "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–º–±–µ–¥–∞",
            color: embed.color,
          },
        });

        if (!answer.startsWith("http")) {
          channel.msg({
            title: "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            color: "#ff0000",
            delete: 7_000,
          });
          return;
        }
        embed.image = answer;
      },
    },
    {
      emoji: "üß±",
      async callback(context) {
        const { channel, user, embed } = context;

        const { content: name } = await Util.question({
          channel,
          user,
          message: {
            title: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏",
            fields: [
              {
                name: "{–¢–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è **–Ω–∞–∑–≤–∞–Ω–∏–µ**}",
                value: "–¢—É—Ç –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ",
              },
            ],
            color: embed.color,
          },
        });
        if (!name) {
          return;
        }
        const { content: value } = await Util.question({
          channel,
          user,
          message: {
            title: "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            fields: [{ name, value: "{–¢—É—Ç –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ}" }],
            color: embed.color,
          },
        });

        if (!value) {
          return;
        }
        embed.fields ||= [];
        embed.fields.push({ name, value, inline: true });
      },
    },
    {
      emoji: "üïµÔ∏è",
      async callback(context) {
        const { channel, user, embed } = context;
        const { value: response } = await Util.question({
          channel,
          user,
          message: {
            title:
              "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä –≤–µ–±—Ö—É–∫–∞, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ.",
            description:
              "–ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è –≤–µ–±—Ö—É–∫, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –µ–≥–æ –∏–º—è.\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–µ–±—Ö—É–∫.",
            color: embed.color,
          },
        });

        if (!response) {
          return;
        }

        const avatar = Util.match(response.content, /http\S+/);
        if (avatar) {
          response.content = response.content.replace(avatar, "").trim();
        }

        context.addable.webhook = { name: response.content, iconURL: avatar };
        channel.msg({
          description:
            "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —ç–º–±–µ–¥",
          author: {
            name: response.content,
            iconURL: avatar || context.command.DEFAULT_WEBHOOK_ICON_URL,
          },
          delete: 9_000,
        });
      },
    },
    {
      emoji: "640449848050712587",
      async callback(context) {
        // Arror-Left
        await context.previewMessage.reactions.removeAll();
        context.reactionsPool = context.command.DEFAULT_REACTIONS_POOL;
      },
    },
    {
      emoji: "640449832799961088",
      async callback(context) {
        const { channel, user, embed, guild } = context;
        // Send Embed-Message
        await context.previewMessage.reactions.removeAll();

        const response = await Util.question({
          channel,
          user,
          message: {
            title: "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–º–±–µ–¥–∞",
            color: embed.color,
            description:
              "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é <:arrowright:640449832799961088>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
            reactions: ["640449832799961088"],
          },
        });

        if (!response.value) {
          return;
        }

        const target =
          response.emoji === "640449832799961088"
            ? channel
            : guild.channels.cache.get(
                response.content.match(FormattingPatterns.Channel)?.groups.id,
              );

        if (!target) {
          channel.msg({
            title: "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            color: "#ff0000",
            delete: 7500,
          });
          return;
        }

        if (
          target.guild.members
            .resolve(user)
            .wastedPermissions(18432n, target)[0]
        ) {
          target.msg({
            title:
              "–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏—è ",
            color: "#ff0000",
            delete: 7_500,
          });
          return;
        }

        context.command.sendEmbedMessageTo(target, context);
        context.reactionsPool = context.command.BEFORE_SEND_REACTIONS_POOL;
      },
    },
    {
      emoji: "‚ùå",
      async callback(context) {
        await context.previewMessage.delete();
        context.end();
      },
    },
    {
      emoji: "‚úèÔ∏è",
      async callback(context) {
        await context.previewMessage.reactions.removeAll();
        context.reactionsPool = context.command.DEFAULT_REACTIONS_POOL;
      },
    },
  ];

  async getOrInsertWebhookIn(channel, context) {
    const {
      user,
      addable: { webhook },
    } = context;
    const webhooks = await channel.fetchWebhooks();

    let hook = webhooks.find((compare) => compare.name === webhook.name);

    if (hook && webhook.avatar) {
      await webhook.edit({ avatar: webhook.avatar });
    }

    if (!hook) {
      const avatar = webhook.avatar || this.DEFAULT_WEBHOOK_ICON_URL;

      hook = await channel.createWebhook({
        name: webhook.name,
        avatar,
        reason: `${user.tag} (${user.id}) Created a message with Embed-constructor`,
      });
    }
    return hook;
  }

  async sendEmbedMessageTo(channel, context) {
    const {
      embed,
      addable: { webhook, reactions },
    } = context;
    const target = webhook
      ? await this.getOrInsertWebhookIn(channel, context)
      : channel;

    target.msg({ ...embed, reactions });
  }

  DEFAULT_REACTIONS_POOL = [
    "üìå",
    "üé®",
    "üé¨",
    "üë§",
    "üéè",
    "üì•",
    "üòÜ",
    "640449832799961088",
  ];
  WHEN_UNCOVERED_REACTIONS_POOL = [
    "640449848050712587",
    "üß±",
    "ü™Ñ",
    "ü™§",
    "üïµÔ∏è",
  ];
  BEFORE_SEND_REACTIONS_POOL = ["‚úèÔ∏è", "‚ùå", "640449832799961088"];

  async onChatInput(msg, interaction) {
    const context = await CommandRunContext.new(interaction, this);
    Object.assign(context.embed, this.createBaseEmbed(interaction.params));

    const { user, channel } = context;
    context.previewMessage = await channel.msg(context.embed);

    while (true) {
      if (context.isEnded) {
        return;
      }

      const react = await context.previewMessage.awaitReact(
        { user, removeType: "one" },
        ...context.reactionsPool,
      );

      const action = this.actions.find(({ emoji }) => emoji === react);
      if (!action) {
        context.channel.msg({
          description:
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–∞ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏",
          reference: context.previewMessage.id,
        });
        return;
      }

      await action.callback(context);
      context.updatePreviewMessage();
    }
  }

  options = {
    name: "embed",
    id: 9,
    media: {
      description:
        "\n\n–°–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.\n\n‚ùì –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ –ª—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–µ—Å—å–º–∞ –ø—Ä–æ—Å—Ç –∏ –ø–æ–ª–µ–∑–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏, –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–±–µ–¥–∞\n\n‚úèÔ∏è\n```python\n!embed <JSON>\n```\n\n",
    },
    alias: "–µ–º–±–µ–¥ —ç–º–±–µ–¥",
    allowDM: true,
    cooldown: 10_000,
    cooldownTry: 3,
    type: "guild",
    ChannelPermissions: 16384n,
  };
}

export default Command;
