import { BaseCommand } from "#lib/BaseCommand.js";
import * as Util from "#lib/util.js";

import client from "#bot/client.js";
import { HOUR } from "#constants/globals/time.js";
import { CALCULATE_CLOVER_MULTIPLAYER } from "#constants/users/commands.js";
import Template from "#lib/modules/Template.js";
import TimeEventsManager from "#lib/modules/TimeEventsManager.js";
import { ChannelType, PresenceUpdateStatus } from "discord.js";

class Command extends BaseCommand {
  options = {
    name: "server",
    id: 28,
    media: {
      description:
        "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Å–µ—Ä–≤–µ—Ä–µ, –≤ —Ç–æ–º —á–∏—Å–ª–µ –±–æ–Ω—É—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º.\n–í –Ω–µ—ë –≤—Ö–æ–¥—è—Ç: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–∞–Ω–∞–ª–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–µ–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∞ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥—Ä—É–≥–æ–µ",
      example: `!server #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤`,
    },
    alias: "—Å–µ—Ä–≤–µ—Ä guild –≥–∏–ª—å–¥–∏—è",
    allowDM: true,
    type: "guild",
  };

  getCloverData(guild) {
    const { cloverEffect } = guild.data;
    if (!cloverEffect) {
      return null;
    }
    const day = Util.timestampDay(cloverEffect.timestamp);
    const filter = ({ name, _params_as_json }) =>
      name === "clover-end" && _params_as_json.includes(guild.id);
    const event = TimeEventsManager.at(day)?.find(filter);

    if (!event) {
      return null;
    }

    const timeToEnd = event.timestamp - Date.now();
    const multiplayer = CALCULATE_CLOVER_MULTIPLAYER(cloverEffect.uses);

    return { timeToEnd, multiplayer, cloverEffect };
  }

  getCommandsLaunchedOfPreviousDaysInGuild(guild) {
    return guild.data.commandsLaunched || 0;
  }
  getContext(interaction) {
    const { guild } = interaction;
    return {
      guild,
      commandsUsed: this.getUsedCommandsCountOfGuild(guild),
      commandsUsedOfPreviousDays:
        this.getCommandsLaunchedOfPreviousDaysInGuild(guild),
    };
  }

  getCreatedAtContent(guild) {
    return `–°–µ—Ä–≤–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω ${Util.timestampToDate(Date.now() - guild.createdTimestamp, 3)} –Ω–∞–∑–∞–¥.`;
  }
  async getGuildDescription(guild) {
    const field = guild.data.description;
    if (!field) {
      return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <a:who:638649997415677973>\n`!editServer` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞";
    }
    const resolveTemplate = () => {
      return new Template({
        empowered: client.users.resolve(field.authorId),
        type: Template.sourceTypes.involuntarily,
      })
        .createVM()
        .run(field.content);
    };
    return field.isTemplate ? await resolveTemplate() : field.content;
  }

  getUsedCommandsCountOfGuild(guild) {
    return Object.values(guild.data.commandsUsed).reduce(
      (acc, count) => acc + count,
      0,
    );
  }

  async onChatInput(msg, interaction) {
    const context = this.getContext(interaction);
    const { guild } = context;

    const values = {
      stats: {
        msgs: `–ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${guild.data.day_msg}`,
        msgsAll: `–í—Å–µ–≥–æ: ${guild.data.day_msg + guild.data.msg_total}`,
        around: `–í —Å—Ä–µ–¥–Ω–µ–º: ${Math.round(
          (guild.data.day_msg + guild.data.msg_total) / (guild.data.days + 1),
        )}`,
        record: `–†–µ–∫–æ—Ä–¥: ${Util.ending(
          guild.data.day_max,
          "—Å–æ–æ–±—â–µ–Ω–∏",
          "–π",
          "–µ",
          "—è",
        )}\n`,
        commands: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${context.commandsUsed}`,
        todayCommands: `–°–µ–≥–æ–¥–Ω—è: ${
          context.commandsUsed - context.commandsUsedOfPreviousDays
        }`,
      },
      members: {
        count: `–í—Å–µ–≥–æ: ${guild.memberCount}`,
        online: `–û–Ω–ª–∞–π–Ω: ${
          guild.members.cache.filter(
            (member) =>
              member.presence &&
              member.presence.status !== PresenceUpdateStatus.Offline,
          ).size
        }`,
        offline: `–û—Ñ—Ñ–ª–∞–π–Ω: ${
          guild.members.cache.filter(
            (member) =>
              !member.presence ||
              member.presence.status === PresenceUpdateStatus.Offline,
          ).size
        }`,
      },
      channels: {
        categories: `–ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${
          guild.channels.cache.filter(
            (e) => e.type === ChannelType.GuildCategory,
          ).size
        }`,
        texted: `–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: ${
          guild.channels.cache.filter((e) => e.isTextBased()).size
        }`,
        voices: `–ì–æ–ª–æ—Å–æ–≤—ã—Ö: ${
          guild.channels.cache.filter((e) => e.isVoiceBased()).size
        }`,
      },
    };

    const stats = Object.values(values.stats).join("\n");
    const members = Object.values(values.members).join("\n");
    const channels = Object.values(values.channels).join("\n");

    const verification = [
      "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç",
      "–ù–∏–∑–∫–∏–π",
      "–°—Ä–µ–¥–Ω–∏–π",
      "–í—ã—Å–æ–∫–∏–π",
      "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π",
    ];

    const fields = [
      { name: "–£—á–∞—Å—Ç–Ω–∏–∫–∏:", value: members, inline: true },
      { name: "–ö–∞–Ω–∞–ª—ã:", value: channels, inline: true },
      { name: "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**", value: stats },
      {
        name: "**–í–ª–∞–¥–µ–ª–µ—Ü:**",
        value: String(await guild.fetchOwner()),
        inline: true,
      },
      {
        name: "**–£—Ä. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:**",
        value: String(verification[guild.verificationLevel]),
        inline: true,
      },
    ];
    //* CLOVER
    const clover = this.getCloverData(guild);
    if (clover) {
      const { timeToEnd, multiplayer, cloverEffect } = clover;
      const { coins, createdAt, uses } = cloverEffect;

      fields.unshift({
        name: "üçÄ –î–µ–π—Å—Ç–≤–∏–µ –ö–ª–µ–≤–µ—Ä–∞",
        value: `–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${+(timeToEnd / HOUR).toFixed(
          1,
        )}—á.\n–ö–ª–µ–≤–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω: <t:${Math.floor(
          createdAt / 1_000,
        )}>;\n–ù–∞–≥—Ä–∞–¥ –ø–æ–ª—É—á–µ–Ω–æ: ${coins}\n–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–µ—Ç–µ–ª—å: X${(multiplayer + 1).toFixed(2)}\n–ö—É–ø–ª–µ–Ω–æ –∫–ª–µ–≤–µ—Ä–æ–≤: ${uses}`,
      });
    }
    //**

    interaction.channel.msg({
      title: guild.name + " " + ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú"].random(),
      thumbnail: guild.iconURL(),
      description: await this.getGuildDescription(guild),
      footer: {
        text: this.getCreatedAtContent(guild) + `\nID: ${guild.id}`,
      },
      image: guild.data.banner,
      fields,
    });
  }
}

export default Command;
