// @ts-check
import { Emoji } from "#constants/emojis.js";
import { SECOND, YEAR } from "#constants/globals/time.js";
import { BaseCommand } from "#lib/BaseCommand.js";
import { BaseCommandRunContext } from "#lib/CommandRunContext.js";
import { MessageInterface } from "#lib/DiscordMessageInterface.js";
import TimeEventsManager from "#lib/modules/TimeEventsManager.js";
import { ParserTime } from "#lib/parsers.js";
import * as Util from "#lib/util.js";
import { FormattingPatterns } from "discord.js";

class CommandRunContext extends BaseCommandRunContext {
  _interface = new MessageInterface();
  description;
  title;
  winnerRoleId;
  winners = 1;

  end() {
    this._interface.close();
    this._interface.message.delete();
    super.end();
  }

  interface_reactions() {
    // @ts-expect-error
    return this.command.reactions
      .filter(({ filter }) => !filter || filter(this))
      .map(({ emoji }) => emoji);
  }
}
class Command extends BaseCommand {
  options = {
    name: "giveaway",
    id: 45,
    media: {
      description:
        "–•–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞? –ü–æ–¥–Ω—è—Ç—å –ø–ª–∞–Ω–∫—É –∞–∂–∏–æ—Ç–∞–∂–∞? :tada:\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑—ã–≥—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∞ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ ‚Äî —Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–º, –±—É–¥—å —ç—Ç–æ —Ä–æ–ª—å, –∫–ª—é—á–∏–∫ –æ—Ç –∏–≥—Ä—ã –∏–ª–∏ –º–µ—à–æ—á–µ–∫ –∫–æ–∏–Ω–æ–≤?",
      example: `!giveaway #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤`,
    },
    alias: "—Ä–∞–∑–¥–∞—á–∞ —Ä–æ–∑—ã–≥—Ä—ã—à —Ä–æ–∑—ñ–≥—Ä–∞—à",
    allowDM: true,
    type: "guild",
    userPermissions: 32n,
  };
  reactions = [
    {
      emoji: "ü™ß",
      key: "title",
      label: "–¢–µ–∫—Å—Ç",
      required: true,
      callback: async (interaction, context) => {
        const { channel, user } = interaction;

        const { content: title } = await Util.question({
          message: { title: "–£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–ª–∞–≤–∏–µ" },
          user,
          channel,
        });

        if (!title) {
          return;
        }
        context.title = title;

        const { content: description } = await Util.question({
          message: {
            title: `–£–∫–∞–∂–∏—Ç–µ ${context.description ? "–Ω–æ–≤–æ–µ " : ""}–æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π —Ä–∞–∑–¥–∞—á–∏`,
            description: context.description
              ? `–°—Ç–∞—Ä–æ–µ: ${context.description}`
              : null,
          },
          user,
          channel,
        });

        if (!description) {
          return;
        }
        context.description = description;
      },
    },
    {
      emoji: "‚è∞",
      key: "timestamp",
      label: "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
      required: true,
      callback: async (interaction, context) => {
        const { channel, user } = interaction;
        const now = new Date();
        const { content } = await Util.question({
          message: {
            title: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∏–≤–µ–Ω—Ç–∞`,
            description: `–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ, —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –¥–∞—Ç–æ–π, –¥–≤–æ–µ—Ç–æ—á–∏–µ–º ‚Äî –≤—Ä–µ–º—è\n**–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:**\n22:00 ‚Äî —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è\n31.12 ‚Äî —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞\n11:11 01.01 ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ! –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (${new Intl.DateTimeFormat(
              "ru-ru",
              { weekday: "short", hour: "2-digit", minute: "2-digit" },
            ).format(now)}) –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞—à–µ–≥–æ`,
          },
          channel,
          user,
        });
        if (!content) {
          return;
        }
        let parsed = ParserTime.toNumber(content) + Date.now();

        if (parsed < Date.now()) {
          const { emoji } = await Util.question({
            message: {
              title: "–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥?",
            },
            user: interaction.user,
            channel: interaction.channel,
            reactions: ["685057435161198594", "763807890573885456"],
          });

          if (emoji === "685057435161198594") {
            parsed += YEAR;
          } else {
            context.channel.msg({
              title: "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
              delete: 8 * SECOND,
            });
            return;
          }
        }

        context.timestamp = parsed;
        interaction.msg({
          title: `–ì–æ—Ç–æ–≤–æ! –í—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è ~${Util.timestampToDate(
            parsed - Date.now(),
            2,
          )}`,
          timestamp: parsed,
          delete: 8 * SECOND,
        });
      },
    },
    {
      emoji: "üéâ",
      key: "winners",
      label: "–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
      required: false,
      callback: async (interaction, context) => {
        const { content } = await Util.question({
          message: {
            title: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`,
          },
          channel: interaction.channel,
          user: interaction.user,
        });

        if (!content) {
          return;
        }
        if (isNaN(content)) {
          interaction.msg({
            title: "–£–∫–∞–∑–∞–Ω–æ –Ω–µ —á–∏—Å–ª–æ",
            color: "#ff0000",
            delete: 3000,
          });
          return;
        }
        context.winners = Number(content);
      },
    },
    {
      emoji: "üéÅ",
      key: "winnerRoleId",
      label: "–í—ã–¥–∞–≤–∞–µ–º–∞—è —Ä–æ–ª—å",
      required: false,
      callback: async (interaction, context) => {
        const { content } = await Util.question({
          message: { title: `–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∞–π–¥–∏` },
          channel: interaction.channel,
          user: interaction.user,
        });

        if (!content) {
          return;
        }

        context.winnerRoleId = content.match(
          FormattingPatterns.Role,
        )?.groups.id;
      },
    },
    {
      emoji: "640449832799961088",
      required: false,
      label: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
      hidden: true,
      callback: async (interaction, context) => {
        const giveaway = await interaction.msg({
          title: context.title,
          description: context.description,
          timestamp: context.timestamp,
          reactions: ["üå≤"],
          color: "#4a7e31",
          footer: { text: "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏: " },
        });
        TimeEventsManager.create("giveaway", context.timestamp - Date.now(), [
          interaction.channel.id,
          giveaway.id,
          context.winners,
          context.winnerRoleId,
        ]);

        context.end();
      },
      filter: (context) => context.timestamp && context.title,
    },
  ];

  createInterface(context) {
    const { _interface } = context;
    _interface.setChannel(context.channel);
    _interface.setUser(context.user);
    _interface.setRender(() => {
      const fieldsContent = this.reactions
        .filter(({ hidden }) => !hidden)
        .map(({ emoji, key, label, required }) => {
          const icon = !context[key]
            ? emoji
            : Emoji.animation_tick_block.toString();
          return `‚óñ${icon} ${label}${required ? " üö©" : ""}`;
        })
        .join("\n");
      return {
        title: "üå≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏",
        description: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–¥–∞—á—É!\n${fieldsContent}`,
        color: "#4a7e31",
        footer: { text: "üö© –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º" },
      };
    });
    _interface.setReactions(context.interface_reactions());
    _interface.emitter.on(
      MessageInterface.Events.allowed_collect,
      async ({ interaction }) => {
        await this.reactions
          .find(({ emoji }) => emoji === interaction.customId)
          ?.callback(interaction, context);
        !context.isEnded &&
          _interface.setReactions(context.interface_reactions());
        !context.isEnded && _interface.updateMessage();
      },
    );
    _interface.updateMessage();
  }

  async onChatInput(msg, interaction) {
    const context = await CommandRunContext.new(interaction, this);
    context.setWhenRunExecuted(this.createInterface(context));
    return context;
  }
}

export default Command;
