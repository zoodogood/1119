import { BaseCommand } from "#lib/BaseCommand.js";
import * as Util from "#lib/util.js";
import GuildVariablesManager from "#lib/modules/GuildVariablesManager.js";
import { escapeMarkdown } from "discord.js";

class Command extends BaseCommand {
  static MAIN_COLOR = "#ffc135";

  displayListOf({ interaction, targetName, entries }) {
    const listContent = entries.length
      ? entries
          .map(
            ([name, value]) =>
              `${name}„Éª${
                value.length > 20 ? `${value.slice(0, 15)}..` : value
              }`,
          )
          .join("\n")
      : "–ó–¥–µ—Å—å –ø—É—Å—Ç–æ";

    interaction.message.msg({
      color: this.constructor.MAIN_COLOR,
      description: `> –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ${targetName}\n${escapeMarkdown(listContent)}`,
      footer: {
        text: `–°–æ–∑–¥–∞–Ω–æ (${entries.length}/${GuildVariablesManager.LIMIT})`,
      },
    });
    return;
  }

  displayGetValue({ interaction, targetName, name, value }) {
    interaction.message.msg({
      title: "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
      description: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${targetName}, \`${name}\` —Å–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ${
        value ?? "void (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
      }.\nüôä`,
      color: this.constructor.MAIN_COLOR,
    });
  }

  displaySetValue({ interaction, targetName, name, value }) {
    interaction.message.msg({
      title: "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω–µ–Ω–æ",
      description: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${targetName}, \`${name}\` —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ${value}.\nüêµ`,
      color: this.constructor.MAIN_COLOR,
    });
  }

  parseParams(params) {
    params = params.split(" ");
    const targetId = params.at(0).match(/\d{17,19}/);
    if (targetId) {
      params.splice(0, 1);
    }

    const name = params.splice(0, 1).at(0);
    const value = params.join(" ");
    return { targetId, name, value };
  }

  takeNameFor(targetId, interaction) {
    return targetId === interaction.guild.id
      ? "–°–µ—Ä–≤–µ—Ä–∞"
      : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetId}>`;
  }

  async onChatInput(msg, interaction) {
    const manager = new GuildVariablesManager(msg.guild.data);
    const isAdmin = !interaction.member?.wastedPermissions(32)[0];

    if (interaction.params) {
      const params = this.parseParams(interaction.params);

      const targetId = params.targetId ?? interaction.guild.id;
      const targetName = this.takeNameFor(targetId, interaction);

      if (!params.name && !params.value) {
        const entries = manager.interface.entriesOf(targetId);
        this.displayListOf({ interaction, targetName, entries });
        return;
      }

      if (!valueParameter) {
        const value = manager.interface.get(targetId, params.name);
        this.displayGetValue({
          interaction,
          targetName,
          name: params.name,
          value,
        });
        return;
      }

      if (params.name && params.value) {
        const needIncrease =
          params.value.startsWith("+") || params.value.startsWith("-");

        const method = needIncrease
          ? manager.interface.increase
          : manager.interface.set;

        const value = method.apply(manager.interface, [
          targetId,
          params.name,
          params.value,
        ]);
        this.displaySetValue({
          interaction,
          targetName,
          name: params.name,
          value,
        });
        return;
      }
    }

    return this.createController({ interaction, manager });
  }

  async createController({ interaction, manager }) {
    const isAdmin = !interaction.member?.wastedPermissions(32)[0];

    const data = manager.data;

    const count = Object.values(data).reduce(
      (acc, target) => acc + Object.keys(target).length,
      0,
    );
    const countOfYou = manager.interface.entriesOf(interaction.user.id).length;
    const embed = {
      title: "–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞",
      description: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: ${count}${
        countOfYou ? `\n–£ –≤–∞—Å —Å–≤–æ–π—Å—Ç–≤: ${countOfYou}` : ""
      }\n\n${this.constructor.actionsList
        .map(({ emoji, description }) => `${emoji} ${description}`)
        .join("\n")}`,
      color: this.constructor.MAIN_COLOR,
      reactions: this.constructor.actionsList
        .filter((action) => !action.checkPermission || isAdmin === true)
        .map(({ emoji }) => emoji),
    };
    interaction.controllerMessage = await interaction.channel.msg(embed);
    const filter = (reaction, user) => user === interaction.user && reaction.me;
    const collector = interaction.controllerMessage.createReactionCollector({
      filter,
      time: 100_000,
    });
    collector.on("collect", (reaction) => {
      const action = this.constructor.actionsList.find(
        (action) => action.emoji === reaction.emoji.name,
      );
      action.callback.call(this, interaction, manager);
    });

    collector.on("end", () =>
      interaction.controllerMessage.reactions.removeAll(),
    );
  }

  static actionsList = [
    {
      id: "set",
      emoji: "üêµ",
      description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.",
      checkPermission: true,
      callback: async function (interaction, manager) {
        const channel = interaction.channel;
        const questionMessage = await channel.msg({
          title: "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...",
          description: `–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ. –ï—ë –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.`,
        });

        const answer = (
          await channel.awaitMessage({ user: interaction.user, remove: true })
        )?.content;

        questionMessage.delete();
        if (!answer) {
          return;
        }

        const params = this.parseParams(answer);
        const targetId = params.targetId ?? interaction.guild.id;
        const targetName = this.takeNameFor(targetId, interaction);

        const needIncrease =
          params.value.startsWith("+") || params.value.startsWith("-");

        const method = needIncrease
          ? manager.interface.increase
          : manager.interface.set;

        const value = method.apply(manager.interface, [
          targetId,
          params.name,
          params.value,
        ]);
        this.displaySetValue({
          interaction,
          targetName,
          name: params.name,
          value,
        });
        return;
      },
    },
    {
      id: "get",
      emoji: "üôä",
      description: "–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.\n",
      checkPermission: false,
      callback: async function (interaction, manager) {
        const channel = interaction.channel;
        const questionMessage = await channel.msg({
          title: "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è...",
          description: `–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ. –ï—ë –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.`,
        });

        const answer = (
          await channel.awaitMessage({ user: interaction.user, remove: true })
        )?.content;

        questionMessage.delete();
        if (!answer) {
          return;
        }

        const params = this.parseParams(answer);
        const targetId = params.targetId ?? interaction.guild.id;
        const targetName = this.takeNameFor(targetId, interaction);

        const value = manager.interface.get(targetId, params.name);
        this.displayGetValue({
          interaction,
          targetName,
          name: params.name,
          value,
        });
        return;
      },
    },
    {
      id: "list",
      emoji: "üê≠",
      description: "–û—Ç–∫—Ä—ã—Ç—å –°–ø–∏—Å–æ–∫.",
      checkPermission: false,
      callback: async function (interaction, manager) {
        const list = {};
        const increase = (key) => (list[key] ||= 0) & list[key]++;

        for (const target of Object.values(manager.data))
          for (const key in target) increase(key);

        const description = Object.entries(list)
          .map(
            ([key, count]) =>
              `${escapeMarkdown(key)}„Éª${Util.ending(
                count,
                "—Ä–∞–∑",
                "",
                "",
                "–∞",
              )}`,
          )
          .join("\n");

        await interaction.controllerMessage.msg({
          title: "üê≠ –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞",
          description: `–ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è..\n${
            description || "–û–π, –∞ –∑–¥–µ—Å—å —Ç–æ–∂–µ –ø—É—Å—Ç–æ"
          }`,
          edit: true,
          color: this.constructor.MAIN_COLOR,
        });
      },
    },
    {
      id: "find",
      emoji: "ü¶û",
      description: "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.",
      checkPermission: false,
      callback: async function (interaction, manager) {
        const channel = interaction.channel;
        const questionMessage = await channel.msg({
          title: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–ª—è –µ—ë –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        });

        const answer = (
          await channel.awaitMessage({ user: interaction.user, remove: true })
        )?.content;

        questionMessage.delete();
        if (!answer) {
          return;
        }

        const toString = ([id, value]) =>
          `${id === interaction.guild.id ? "–°–µ—Ä–≤–µ—Ä" : `<@${id}>`}„Éª${value}`;

        const param = answer.split(" ").at(0);
        const description = Object.entries(manager.data)
          .filter(([_id, targetData]) => param in targetData)
          .map(([id, targetData]) => [id, targetData[param]])
          .sortBy("1")
          .map(toString)
          .join("\n");

        await interaction.controllerMessage.msg({
          title: "ü¶û –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞",
          description,
          edit: true,
          color: this.constructor.MAIN_COLOR,
        });
      },
    },
    {
      id: "random",
      emoji: "üê£",
      description: "–ü—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.",
      checkPermission: false,
      callback: async function (interaction, manager) {
        const targetId = manager.interface.keys().random();
        const entries = manager.interface.entriesOf(targetId);

        const [name, value] = entries.random();
        const description = `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${this.takeNameFor(
          targetId,
          interaction,
        )} ‚Äî \`${escapeMarkdown(name)}\`„Éª${escapeMarkdown(value)}`;

        await interaction.controllerMessage.msg({
          title: "üê£ –í–∞—à–∞ —Å–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
          description,
          color: this.constructor.MAIN_COLOR,
        });
      },
    },
    {
      id: "remove",
      emoji: "üê≤",
      description: "–£–±—Ä–∞—Ç—å.",
      checkPermission: true,
      callback: async function (interaction, manager) {
        const channel = interaction.channel;
        const questionMessage = await channel.msg({
          title: "–î–ª—è –æ—á–∏—Å—Ç–∫–∏...",
          description: `–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*!. –£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –≥–∏–ª—å–¥–∏–∏ –≤–º–µ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é.`,
        });

        const answer = (
          await channel.awaitMessage({ user: interaction.user, remove: true })
        )?.content;

        questionMessage.delete();
        if (!answer) {
          return;
        }

        const params = this.parseParams(answer);
        const targetId = params.targetId ?? null;

        const willRemoved = [targetId].filter(Boolean);
        if (targetId === null) {
          const list = Object.entries(manager.data)
            .filter(([_id, targetData]) => params.name in targetData)
            .map(([id]) => id);

          willRemoved.push(...list);
        }

        willRemoved.forEach((id) => manager.interface.remove(id, params.name));

        const description = `–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ ${Util.ending(
          willRemoved.length,
          "—ç–ª–µ–º–µ–Ω—Ç",
          "–æ–≤",
          "–∞",
          "–æ–≤",
        )}`;

        await interaction.controllerMessage.msg({
          title: "üê≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏",
          description,
          color: this.constructor.MAIN_COLOR,
        });
      },
    },
  ];

  options = {
    name: "variables",
    id: 35,
    media: {
      description:
        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–¥–æ–±–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –µ—ë –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å.\n–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –†–ü —Å–µ—Ä–≤–µ—Ä–æ–≤, —Ö–æ—Ç—è –¥–ª—è –±–æ–ª—å—à–µ–Ω—Å—Ç–≤–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π.\n\n‚úèÔ∏è\n```python\n!variables <memb | "—Å–µ—Ä–≤–µ—Ä"> <propertyName> <properyValue> # propery –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫: "—Å–≤–æ–π—Å—Ç–≤–æ"\n```\n\n',
    },
    accessibility: {
      publicized_on_level: 15,
    },
    alias: "variable –≤–∞—Ä var –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–º—ñ–Ω–Ω—ñ",
    allowDM: true,
    type: "guild",
    Permissions: 256n,
  };
}

export default Command;

// let youre = manager.variables[msg.author.id] ? Object.keys(manager.variables[msg.author.id]) : [];
//     manager.embed = {
//       title: "–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞",
//       description: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: ${Object.values(manager.variables).reduce((acc, last) => acc + Object.keys(last).length, 0)}${youre.length ? "\n–£ –≤–∞—Å —Å–≤–æ–π—Å—Ç–≤: " + youre.length : ""}\n\nüêµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.\nüôä –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n\nüê≠ –û—Ç–∫—Ä—ã—Ç—å –°–ø–∏—Å–æ–∫.\nü¶Ö –ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\nüê£ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–≤–æ–π—Å—Ç–≤—É.\nüê≤ –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.`,
//       color: "#ffc135"
//     };
//     let baseReactions = ["üê≠", "ü¶Ö", "üê£"];
//     if (isAdmin){
//       baseReactions.unshift("üêµ", "üôä");
//       baseReactions.push("üê≤");
//     }

//     manager.interface = await msg.msg(manager.embed);
//     manager.embed.edit = true;
//     delete manager.embed.description;

//     let
//       react, answer, fields = [],
//       page = 0, pages = [];

//     let output;
//     while (true) {
//       react = await manager.interface.awaitReact({user: msg.author, removeType: "one"}, ...baseReactions, (page != 0 ? "640449848050712587" : null), ((pages[1] && page != pages.length - 1) ? "640449832799961088" : null));
//       switch (react) {
//         case "üêµ":
//           answer = await msg.channel.awaitMessage(msg.author, {title: "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", embed: {description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n–í–º–µ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ \"—Å–µ—Ä–≤–µ—Ä\"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞."}});
//           if (!answer){
//             return;
//           }

//           target = answer.content.match(/^(<@!?(\d{17,19})>|guild|—Å–µ—Ä–≤–µ—Ä|server)/i);
//           if (!target){
//             msg.msg({title: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 5000});
//             break;
//           }

//           answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
//           target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
//           answer.content = answer.content.replace(/\s{1,}/g, " ").split(" ");

//           if (!answer.content[1]){
//             msg.msg({title: "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});
//             break;
//           }

//           output = manager.set(target, answer.content[0], answer.content.slice(1).join(" "));
//           if (output.err){
//             let err;
//             switch (output.err) {
//               case 1:
//                 err = "–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã";
//                 break;
//               case 2:
//                 err = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º: 20 —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É";
//                 break;
//               default:
//                 err = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏";
//             }
//             msg.msg({title: err, color: "#ff0000", delete: 4000});
//             return;
//           }

//           msg.msg({title: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω–µ–Ω–∞:", description: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è \`${output.name}\` ${targetName(answer)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ${output.value}`});
//           fields = [{name: "–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", value: `üêµ`}];
//           break;

//         case "üôä":
//           answer = await msg.channel.awaitMessage(msg.author, {title: "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", embed: {description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n–í–º–µ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ \"—Å–µ—Ä–≤–µ—Ä\"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞."}});
//           if (!answer){
//             return;
//           }

//           target = answer.content.match(/^(<@!?(\d{17,19})>|guild|—Å–µ—Ä–≤–µ—Ä|server)/i);
//           if (!target){
//             msg.msg({title: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å, –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å", color: "#ff0000", delete: 5000});
//             break;
//           }

//           answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
//           target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
//           answer.content = answer.content.replace(/\s{1,}/g, " ").split(" ");

//           if (!answer.content[0]){
//             msg.msg({title: "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞", color: "#ff0000", delete: 3000});
//             break;
//           }

//           output = manager.get(target, answer.content[0]);
//           fields = [{name: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${targerName(answer)} ${output.name}...`, value: `—Å–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ \`${output.value}\`üêµ`}];
//           break;

//         case "üê≠":
//           fields = Object.entries(manager.list()).map(([name, count]) => ({name, value: `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: ${Util.ending(count, "—Ä–∞–∑", "", "", "–∞")}`}));
//           break;

//         case "ü¶Ö":
//           answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–ª—è –µ—ë –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, description: ""});
//           if (!answer){
//               return;
//           }
//           fields = Object.entries(manager.search(answer.content)).map(([id, value], i) => ({name: `${id === "guild" ? "–°–µ—Ä–≤–µ—Ä" : msg.guild.members.cache.get(id).displayName}:`, value: `\`${value}\``}));
//           break;

//         case "üê£":
//           answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–µ–π –¢–û–ü-–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, description: ""});
//           if (!answer){
//               return;
//           }

//           fields = manager.top(answer.content).filter(e => e[0] != "guild").map(([id, value], i) => ({name: `${i + 1}. ${msg.guild.members.cache.get(id).displayName}`, value}));
//           break;

//         case "üê≤":
//           answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, embed: {description: "–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å, —Ç–æ–≥–¥–∞ —Å–≤–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –Ω–µ—ë"}});
//           target = answer.content.match(/(?:<@!?\d{17,19}>|guild|—Å–µ—Ä–≤–µ—Ä|server)$/i);
//           if (target){
//             answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
//             target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
//           }

//           output = manager.remove(answer.content, target);
//           fields = [{name: "–£–¥–∞–ª–µ–Ω–æ", value: `–£–¥–∞–ª–µ–Ω–æ ${ Util.ending(+output, "—Å–≤–æ–π—Å—Ç–≤", "", "–æ", "–∞")} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ${answer.content}`}];
//           break;

//         default: return;
//       }
//       if (react != "640449848050712587" && react != "640449832799961088"){
//         page = 0;
//         pages = [];
//         while (fields.length) pages.push(fields.splice(0, 10));
//       }
//       fields = (pages[0]) ? pages[page] : [{name: "–ó–¥–µ—Å—å –ø—É—Å—Ç–æ", value: "–ê –∑–¥–µ—Å—å –∏ –≤–ø—Ä–∞–≤–¥—É –ø—É—Å—Ç–æ..."}];
//       manager.embed.footer = (pages[1]) ? {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`} : null;
//       manager.embed.fields = fields;

//       manager.interface.msg({title: `${ react } –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞`, ...manager.embed});
//     }

//   }
