import { BaseCommand } from "#lib/BaseCommand.js";
import { board_singleton } from "#lib/modules/mod.js";
import * as Util from "#lib/util.js";
import Discord from "discord.js";

class Command extends BaseCommand {
  options = {
    name: "boards",
    id: 43,
    media: {
      description:
        "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –°–º. –∫–æ–º–∞–Ω–¥—É `!board`",
      example: `!boards #–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤`,
    },
    accessibility: {
      publicized_on_level: 15,
    },
    alias: "—Å—á—ë—Ç—á–∏–∫–∏ —Å—á–µ—Ç—á–∏–∫–∏ —Ä–∞—Ö—ñ–≤–Ω–∏–∫–∏",
    allowDM: false,
    cooldown: 10_000_000,
    type: "guild",
  };

  createEmbed({ interaction, boards }) {
    const toValue = (board) =>
      ({
        message: `üñäÔ∏è [–°–æ–æ–±—â–µ–Ω–∏–µ.](https://discord.com/channels/${board.gid}/${board.cid}/${board.mid})`,
        channel: `ü™ß \`#${
          interaction.guild.channels.cache.get(board.channelId).name
        }\``,
        poster: `üñåÔ∏è <#${board.cid}>`,
      })[board.key];

    const toField = (board, i) => ({
      name: `**${i + 1}.**`,
      value: toValue(board),
      inline: true,
    });

    const fields = boards.map(toField);

    !fields.length &&
      fields.push({
        name: "–ù–æ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ.",
        value: "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!board`",
      });

    return {
      title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
      fields,
    };
  }

  fetchBoardsInGuild(guild) {
    return board_singleton.loop.items.filter((board) => board.gid === guild.id);
  }

  async onChatInput(msg, interaction) {
    const boards = this.fetchBoardsInGuild(interaction.guild);
    const embed = this.createEmbed({ interaction, boards });

    const message = await msg.msg(embed);

    const reactions = () =>
      boards.length && !interaction.user.wastedPermissions(16)[0]
        ? ["‚úèÔ∏è", "üóëÔ∏è"]
        : ["‚ùå"];
    let react, question, answer, board;
    while (true) {
      react = await message.awaitReact(
        { user: msg.author, removeType: "all" },
        ...reactions(),
      );
      switch (react) {
        case "üóëÔ∏è":
          question = await msg.msg({
            title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞, –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è",
          });
          answer = await Util.awaitReactOrMessage(question, msg.author, "‚ùå");
          question.delete();
          if (
            !answer ||
            !answer.content ||
            isNaN(answer.content) ||
            answer.content > boards.length
          )
            break;
          board = boards.splice(answer.content - 1, 1)[0];
          BoardManager.delete(board._original);
          boards.forEach((e, i) => (e.name = `**${i + 1}.**`));
          message.msg({
            title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            edit: true,
            fields: boards[0]
              ? boards
              : { name: "–¢—É—Ç –ø—É—Å—Ç–æ.", value: "–í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç—á–∏–∫" },
            description: `–°—á—ë—Ç—á–∏–∫ #${answer.content} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`,
          });
          break;
        case "‚úèÔ∏è":
          question = await msg.msg({
            title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞, –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          });
          answer = await Util.awaitReactOrMessage(question, msg.author, "‚ùå");

          if (
            !answer ||
            !answer.content ||
            isNaN(answer.content) ||
            answer.content - 1 > boards.length
          ) {
            question.delete();
            msg.msg({
              title: "–≠–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
              color: "#ff0000",
            });
            break;
          }

          board = boards[answer.content - 1];
          question.msg({
            title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            edit: true,
            description: `**–°—Ç–∞—Ä–æ–µ:**\n\`\`\`${Discord.escapeCodeBlock(
              board._original.template,
            )}\`\`\``,
          });
          answer = await msg.channel.awaitMessage(msg.author);
          question.delete();
          board._original.template = answer.content;
          BoardManager.up(board._original);

          message.msg({
            title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            edit: true,
            fields: boards,
            description: `–°–æ–æ–±—â–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ!`,
          });
          break;
        default:
          return message.delete();
      }
    }
  }
}

export default Command;
