import FileSystem from 'fs';
import {Template, ErrorsHandler, Util} from '#src/modules/mod.js';
import { Collection } from '@discordjs/collection';

class CounterManager {

	static async create(counter){
	  this.data.push(counter);
	  const result = await this.call(counter);
	  this.file.write();
 
	  return {result, counter};
	}
 
	static delete(counterOrIndex){
	  const index = typeof counterOrIndex == "number" ?
		 counterOrIndex :
		 this.counterData.indexOf(counterOrIndex);
		 
	  if (~index === 0){
		 return false;
	  }
 
	  this.data.splice(index, 1);
	  this.file.write();
	}

	static freeze(counter){
		counter.freezed = true;
	}

	static reportException(counter, error){
		const channel = this.#client.channels.cache.get(counter.channelId);
		const user = this.#client.users.cache.get(counter.authorId);
		const target = channel.isTextBased() ? channel : user;

		const description = `–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á—ë—Ç—á–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ ${ channel.toString() } –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.\n\n–ó–∞–ø—É—Å–∫–∞–µ–º—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É \`!—Å—á—ë—Ç—á–∏–∫–∏\`.\n–û–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω/–∏–∑–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n${ user.tag } (ID: ${ user.id }).`;
		ErrorsHandler.sendErrorInfo({channel: target, error, description});
	}

	static resume(counter){
		delete counter.freezed;
	}
 
	static async *createGenerator(){
	  let i = 0;
	  const MINUTE = 60_000;
	  const MINUTES = 15;
 
	  while (true) {
		 const counter = this.data[i];
		 yield this.call(counter);
 
		 await Util.sleep(MINUTE * MINUTES / (this.data.length + 1));
		 i++;
		 i %= this.data.length;
	  }
	}
 
	static async handle(){
	  const queue = this.createGenerator();
	  for await (const _counter of queue){};
	}
 
	static async call(counter){
		if (!counter){
			return;
		}

		const client = this.#client;

		if (counter.freezed){
			return null;
		}
	
	
		try {
			const channel = client.guilds.cache.get(counter.guildId).channels.cache.get(counter.channelId);
			const context = {client, counter, channel};
			const templater = new Template({executer: counter.authorId, type: Template.sourceTypes.counter}, context);
		
			const result = await this.countersTypes.get(counter.type).handle(context, templater);
			return result;
		}
		catch (error) {
			this.reportException(counter, error);
			this.freeze(counter);
			return error;
		}
	}
 
	static file = {
		 path: `${ process.cwd() }/data/counters.json`,
		 load: async () => {
			const path = this.file.path;
			const content = FileSystem.readFileSync(path, "utf-8");
			const data = JSON.parse(content);
			this.data = data;
		 },
		 write: async () => {
			const path = this.file.path;
			const data = JSON.stringify(this.data);
			FileSystem.writeFileSync(path, data);
		 }
	}
 
	static data = {};

	static countersTypes = new Collection(Object.entries({
      "message":
		{
			emoji: "üñäÔ∏è",
			label: "üñäÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ",
			description: "–ï–¥–∏–Ω–æ–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ, –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ, –∏–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
			key: "message",
			change: async (context) => {
				const interaction = context.interaction;
				const counter = context.counter;
				counter.type = context.typeBase.key;
				counter.channelId = interaction.channel.id;
				counter.guildId   = interaction.guild.id;
				counter.authorId  = interaction.user.id;

				const questionNeedEmbed = async () => {
					const message = await interaction.message.msg({title: "–í–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–µ–Ω —ç–º–±–µ–¥?", description: `–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å JSON-–Ω–∞–±–æ—Ä –¥–ª—è —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è`});
					const react = await message.awaitReact({user: interaction.user, removeType: "all"}, "685057435161198594", "763807890573885456");
					message.delete();
					return react === "685057435161198594";
				}

				context.needEmbed = await questionNeedEmbed();

				if (context.needEmbed){
					
				}

				return counter;
			},
			async handle({channel, counter}, templater){
				
				const messageOptions = counter.message;
				messageOptions.title 		&&= await templater.replaceAll(messageOptions.title);
				messageOptions.description &&= await templater.replaceAll(messageOptions.description);
				messageOptions.content 		&&= await templater.replaceAll(messageOptions.content);
				 

				const message = await channel.messages.fetch(counter.messageId);
				message.msg({...messageOptions, edit: true});
				return message;
			}
      },
      "channel":
		{
			emoji: "ü™ß",
			label: "ü™ß–ò–º—è –∫–∞–Ω–∞–ª–∞",
			description: "–ò–∑–º–µ–Ω—è–µ—Ç –∏–º—è —É–∫–∞–∑–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
			key: "channel",
			change: async (context) => {
				const interaction = context.interaction;
				const counter = context.counter;

				counter.type = context.typeBase.key;
				counter.guildId   = interaction.guild.id;
				counter.authorId  = interaction.user.id;

				const fetchChannel = async () => {
					const message = await interaction.channel.msg({title: "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ"});
					const answer = await interaction.channel.awaitMessage({user: interaction.user});
					if (!answer){
						return null;
					}
					const id = answer.content.match(/\d{17,19}/)?.[0];
					if (!id){
						message.msg({color: "#ff0000", delete: 8_000, description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –º–µ—Ç–∫—É –∫–∞–Ω–∞–ª–∞"});
						return false;
					}
					const channel = interaction.guild.channels.cache.get(id);
					if (!channel){
						message.msg({color: "#ff0000", delete: 8_000, description: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–∞ —Å ID \`${ id }\``});
						return false;
					}
					
					return channel;
				}

				
				const channel = await fetchChannel();
				if (!channel){
					return;
				}

				counter.channelId = channel.id;
				counter.value = context.template;
				return counter;
			},
			async handle({channel, counter}, templater){
				const value = await templater.replaceAll(counter.value);
				await channel.setName(value, `!commandInfo Counter, initialized by <@${ counter.authorId }>`);
				return value;
			}
      },
      "poster": 
		{
			emoji: "üñåÔ∏è",
			label: "üñåÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
			description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω—ã–π –∫–∞–Ω–∞–ª —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 15 –º–∏–Ω—É—Ç",
			key: "poster",
			change: async (context) => {
				const interaction = context.interaction;
				const counter = context.counter;
				counter.type = context.typeBase.key;
				counter.channelId = interaction.channel.id;
				counter.guildId   = interaction.guild.id;
				counter.authorId  = interaction.user.id;
				counter.value 		= context.template;
				return counter;
			},
			async handle({channel, counter}, templater){
				const content = await templater.replaceAll(counter.value);
				await channel.msg({content});
				return content;
			}
      }
	}));

	static #client;
	static setClient(client){
		this.#client = client;
	}
 }



 
 export default CounterManager;


//  switch (type) {
// 	case "üñäÔ∏è":
// 	  let embed = {embed: true};
// 	  let textValue = template;
// 	  let message = await msg.msg({title: "–í–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–µ–Ω —ç–º–±–µ–¥?", description: `–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —ç–º–±–µ–¥-–æ–±—ë—Ä—Ç–∫–∞, —Ü–≤–µ—Ç –∏ –∑–∞–≥–ª–∞–≤–∏–µ`});
// 	  react = await message.awaitReact({user: msg.author, removeType: "all"}, "685057435161198594", "763807890573885456");
// 	  message.delete();
// 	  if (react == 685057435161198594){
// 		 embed = {description: template}
// 		 answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞", embed: {description: `–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ ‚Äî –≥–æ–ª–æ–≤–∞ —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è...\n–û–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã`, time: 1_200_000}});
// 		 if (!answer) return false;
// 		 textValue = answer.content || "";

// 		 answer = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ", embed: {description: `HEX ‚Äî #ff0000, –≥–¥–µ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ 16-–∑–Ω–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (0,1,2,...,e,f) ‚Äî –∫—Ä–∞—Å–Ω—ã–π, –∑–∞ –Ω–∏–º –∑–µ–ª–µ–Ω—ã–π –∏ —Å–∏–Ω–∏–π`, time: 1_200_000}});
// 		 if (!answer) return false;
// 		 embed.color = answer.content.replace("#", "");
// 	  }

// 	  msg.msg({title: "–ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ", description: "–≠—Ç–æ –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫", delete: 7000});
// 	  await Util.sleep(1500);
// 	  counter = await msg.msg({title: textValue, ...embed});
	  
// 	break;
// 	case "ü™ß":
// 	  let channel = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ"});
// 	  if (channel){
// 		 channel = (channel.mentions.channels.first()) ? channel.mentions.channels.first() : msg.guild.channels.cache.get(channel.content);
// 		 msg.msg({title: "–ì–æ—Ç–æ–≤–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ–º–∞—Ü–∏—é.", description: "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `!counters`", delete: 7000});
// 		 CounterManager.create({channelId: channel.id, guildId: msg.guild.id, type: "channel", template});
// 	  }
// 	  else msg.channel.msg({title: "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", color: "#ff0000"});
// 	break;
// 	case "üñåÔ∏è":
// 	  let interval = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è", description: "–ú–∏–Ω–∏–º—É–º 15–º"});
// 	  interval = interval && +interval.content > 15 && +interval.content;
// 	  if (!interval) return msg.msg({title: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 4000});
// 	  CounterManager.create({channelId: msg.channel.id, guildId: msg.guild.id, type: "poster", template, params: interval});
// 	break;
// 	default: return await Util.sleep(2000);

//  }