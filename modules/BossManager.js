import { Collection } from "@discordjs/collection";
import { DataManager, CurseManager, ResourcesEnum } from "#src/modules/mod.js";
import { elementsEnum } from "#src/commands/thing.js";
import { Actions } from '#src/modules/ActionManager.js';
import * as Util from '#src/modules/util.js';


class BossShop {

	static async createShop({guild, channel, user}){
		const boss = guild.data.boss;

		const userStats = BossManager.getUserStats(boss, user.id);
		const boughtMap = (userStats.bought ||= {});
		

	  	const createEmbed = ({boss, user, edit}) => {
			const data = user.data;

			const getDescription = (product) => typeof product.description === "function" ? product.description({userStats, boss, user, product}) : product.description;
 
			const productsContent = this.PRODUCTS
				.map((product) => ({
					label: `${ product.emoji } ‚Äî ${ getDescription(product) }.`,
					price: this.calculatePrice({ product, boughtCount: this.getBoughtCount({userStats, product}) }),
					product
				}))
				.map(({label, price, product}) => `${ label }\n${ price } ${ ResourcesEnum.endingOf(product.resource, price) };`)
				.join("\n");

			const descriptionContent = `–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã! –í–∞—à–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n${  Util.ending(data.coins, "–º–æ–Ω–µ—Ç", "", "–∞", "—ã") } <:coin:637533074879414272> –∏ ${ Util.ending(data.keys, "–∫–ª—é—á", "–µ–π", "", "–∞") } üî© –Ω–∞ —Ä—É–∫–∞—Ö`;
			const description = `${ descriptionContent }\n\n${ productsContent }`;
 
		 	return {
				title: "–¢–∞–π–Ω–∞—è –ª–∞–≤–∫–∞ –ì—Ä–µ–º–ø–µ–Ω—Å–∞",
				author: {name: user.username, iconURL: user.avatarURL()},
				description,
				edit,
				reactions: edit ? [] : [...this.PRODUCTS.filter(product => this.isUserCanBuyProduct({user, product, userStats})).map(({emoji}) => emoji)]
			};
	  	}
 
		
	  	
	  
	  	let message = await channel.msg( createEmbed({boss, user, edit: false}) );
		const filter = (_reaction, member) => user.id === member.id;
	  	const collector = message.createReactionCollector({filter, time: 60_000});
 
	  	collector.on("collect", async (reaction, user) => {
		 	reaction.users.remove(user);
		 	const product = this.PRODUCTS.get(reaction.emoji.name);
		 	const currentBought = this.getBoughtCount({userStats, product});
			
		 	const price = this.calculatePrice({
				product,
				boughtCount: currentBought
			});

 
		 	if (!this.isUserCanBuyProduct({user, product, userStats})){
				message.msg({title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", delete: 3000});
				reaction.remove();
				return;
			}
 
		 	product.callback({ user, userStats, boss, product });
		 	boughtMap[ product.keyword ] = currentBought + 1;
		 	user.data[ product.resource ] -= price;
		 	message.msg({description: `${ product.emoji } +1`, delete: 7000});
		 	message = await message.msg( createEmbed({boss, user, edit: true}) );
	  	});
	  
	  	collector.on("end", () => message.reactions.removeAll());
	}

	static isUserCanBuyProduct({user, product, userStats}){
		return user.data[product.resource] >= this.calculatePrice({
			product,
			boughtCount: this.getBoughtCount({userStats, product})
		});
	}


	static getBoughtCount({userStats, product}){
		const boughtMap = userStats.bought ?? {};
		return boughtMap[ product.keyword ] || 0;
	}

	static calculatePrice({product, boughtCount}){
		const grossPrice = product.basePrice * product.priceMultiplayer ** (boughtCount ?? 0);
		const price = grossPrice > 30 ? Math.floor(grossPrice - (grossPrice % 5)) : grossPrice;
		return price;
	}

	static PRODUCTS = new Collection(Object.entries({
		"üß©": {
			emoji: "üß©",
			keyword: "puzzle",
			description: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∞—Ç–∞–∫–∏: 1.25",
			basePrice: 100,
			priceMultiplayer: 2,
			resource: "coins",
			callback: ({userStats}) => {
				const multiplier = 1.25;
				userStats.attacksDamageMultiplayer = +(
					(userStats.attacksDamageMultiplayer ?? 1) *
					multiplier
				).toFixed(3);
			}
		 },
		 "üê∫": {
			emoji: "üê∫",
			keyword: "wolf",
			description: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ",
			basePrice: 50,
			priceMultiplayer: 1.75,
			resource: "coins",
			callback: ({userStats}) => {
				userStats.attackCooldown ||= this.USER_DEFAULT_ATTACK_COOLDOWN;
				userStats.attackCooldown = Math.floor(userStats.attackCooldown / 2);

				userStats.attack_CD -= userStats.attackCooldown;
			}
		 },
		 "üì°": {
			emoji: "üì°",
			keyword: "anntena",
			description: "–ù–∞ 1 –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			basePrice: 1,
			priceMultiplayer: 2,
			resource: "keys",
			callback: ({userStats}) => {
				userStats.damagePerMessage ||= 1;
				userStats.damagePerMessage += 1;
			},
		 },
		 "üé≤": {
			emoji: "üé≤",
			keyword: "dice",
			description: "–£—Ä–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 1% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ",
			basePrice: 10,
			priceMultiplayer: 5,
			resource: "coins",
			callback: ({boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
		 }
	}));
}


class BossManager {
	static async bossApparance(guild){
 
		const TWO_MONTH = 5_259_600_000;
 
	  	if ( guild.members.me.joinedTimestamp > Date.now() + TWO_MONTH )
			return;

		
 
	  	const guildData = guild.data;
	  	const now = new Date();
 
	  	const generateEndDate = () => {
			const days = DataManager.data.bot.currentDay;
		 	guildData.boss.endingAtDay = days + 3;
	  	}
 
	  	const generateNextApparance = () => {
 
		 	// the boss cannot spawn on other days
		 	const MIN = 1;
		 	const MAX = 28;
		 	const date = new Date(now.getFullYear(), now.getMonth() + 1, Util.random(MIN, MAX));
		 	const days =  Math.floor(date.getTime() / 86_400_000);
		 	guildData.boss.apparanceAtDay = days;
	  	}
 
 
 
	  	if (!guildData.boss || !guildData.boss.isArrived && !guildData.boss.apparanceAtDay){
 
		 	guildData.boss = {};
		 	generateNextApparance();
	  	}
 
	  	if (guildData.boss.endingAtDay <= DataManager.data.bot.currentDay){
		 	await BossManager.beforeEnd(guild);
		 	delete guildData.boss;
		 	return;
	  	}
 
	  	if (guildData.boss.apparanceAtDay  <= DataManager.data.bot.currentDay){
		 	generateEndDate();
		 	delete guildData.boss.apparanceAtDay;
 
		 	BossManager.initBossData(guildData.boss, guild);
	  	}
 
	}

	static isArrivedIn(guild){
		const boss = guild.data.boss;
		if (!boss){
			return false;
		}

		return !!boss.isArrived;
	}
 
	static getUserStats(boss, id){
	  if (typeof id !== "string"){
		 throw new TypeError("Expected id");
	  }
 
	  const bossUsers = boss.users;
	  if (id in bossUsers === false)
		 bossUsers[id] = { messages: 0 };
 
	  return bossUsers[id];
	}
 
	static onMessage(message){
	  const boss = message.guild.data.boss;
	  const authorId = message.author.id;
 
	  const userStats = this.getUserStats(boss, authorId);
	  userStats.messages++;
 
	  const DEFAULT_DAMAGE = 1;
	  const damage = userStats.damagePerMessage ?? DEFAULT_DAMAGE;
	  BossManager.makeDamage(boss, damage, {sourceUser: message.author});
	}
 
	static calculateHealthPoint(level){
	  return 7_000 + Math.floor(level * 500 * 1.2 ** level);
	}
 
	static calculateHealthPointThresholder(level){
	  const totalOfPrevious = [...new Array(level - 1)]
		 .map((_, level) => BossManager.calculateHealthPoint(level))
		 .reduce((acc, points) => acc + points, 0);
 
	  return BossManager.calculateHealthPoint(level) + totalOfPrevious;
	}
	
	static calculateBossDamageMultiplayer(boss, {context = {}, sourceUser = {}} = {}){
		let multiplier = 1;
		multiplier *= (boss.diceDamageMultiplayer ?? 1);
		multiplier *= (boss.legendaryWearonDamageMultiplayer ?? 1);

		if (context.restoreHealthByDamage){
			multiplier *= -context.restoreHealthByDamage;
		}

		return multiplier;
	}
 
	static makeDamage(boss, damage, {sourceUser, damageSourceType} = {}){
	  	damage *= this.calculateBossDamageMultiplayer(boss, {sourceUser, context: {
			restoreHealthByDamage: sourceUser.effects?.damageRestoreHealht ?? false
		}});
		damage = Math.floor(damage);
	
	
		boss.damageTaken += damage;
	
		if (sourceUser){
			const stats = BossManager.getUserStats(boss, sourceUser.id);
			stats.damageDealt ||= 0;
			stats.damageDealt += damage;
	
			sourceUser.action(Actions.bossMakeDamage, {boss, damage});
		}

		if (damageSourceType){
			const damageStats = boss.stats.damage;
			damageStats[damageSourceType] ??= 0;
			damageStats[damageSourceType] += damage;
		}
		
	
		while (boss.damageTaken >= boss.healthThresholder){
			BossManager.kill({boss, sourceUser});
		}

		return damage;
	}
	
	static calculateKillReward(level){
		return 500 + 500 * level;
	}

	static kill({boss, sourceUser}){
	  	const expReward = this.calculateKillReward(boss.level);

		const mainContent = sourceUser ? `${ sourceUser.username } –Ω–∞–Ω–æ—Å–∏—Ç –ø—Ä–æ–Ω–∑–∞—é—â–∏–π —É–¥–∞—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç ${ expReward } <:crys2:763767958559391795>` : "–ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –∏–∑ –Ω–∏ –æ—Ç–∫—É–¥–∞ –Ω–∞–Ω—ë—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è –±–æ—Å—Å–∞ —É—Ä–æ–Ω";
		if (sourceUser){
			sourceUser.data.exp += expReward;
		}
		 
		const guild = this.client.guilds.cache.get(boss.guildId);
		const footer = {text: "–û–±—Ä–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é", iconURL: sourceUser ? sourceUser.avatarURL() : guild.iconURL()};
		guild.chatSend({description: `–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π!\n${ mainContent }`, footer});
		BossManager.createBonusesChest({guild, boss, thatLevel: boss.level});
		boss.level++;
		boss.healthThresholder = BossManager.calculateHealthPointThresholder(boss.level);

		Object.values(boss.users)
			.forEach(userStats => delete userStats.attack_CD);
	}
	
	static calculateChestBonuses(level){
		return 120 + level * 10;
	}

	static async createBonusesChest({guild, boss, thatLevel}){
	  const color = "ffda73";
	  const embed = {
		 title: "–°—É–Ω–¥—É–∫ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
		 description: `–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –±–æ—Å—Å–æ–º —É—Ä. ${ thatLevel }.\n–í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–≤—É–º—è —á–∞—Å–∞–º–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
		 thumbnail: "https://media.discordapp.net/attachments/629546680840093696/1038767024643522600/1476613756146739089.png?width=593&height=593",
		 footer: {text: "–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ –æ–¥–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ –∑–∞ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –±–æ—Å—Å–∞"},
		 color,
		 reactions: ["637533074879414272"]
	  };
 
	  const calculateReward = this.calculateChestBonuses;
 
	  const message = await guild.chatSend(embed);
	  const collector = message.createReactionCollector({filter: (reaction) => !reaction.me, time: 3_600_000 * 2});
	  collector.on("collect", (_reaction, user) => {
		 const userStats = BossManager.getUserStats(boss, user.id);
  
		 if ("chestRewardAt" in userStats){
			message.msg({title: `–í—ã —É–∂–µ –≤–∑—è–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ —É—Ä. ${ userStats.chestRewardAt }`, delete: 5000});
			return;
		 };
 
		 const reward = calculateReward(thatLevel);
		 userStats.chestRewardAt = thatLevel;
		 user.data.chestBonus = (user.data.chestBonus ?? 0) + reward;
		 message.msg({description: `–ü–æ–ª—É—á–µ–Ω–æ ${  Util.ending(reward, "–±–æ–Ω—É—Å", "–æ–≤", "", "–∞") } –¥–ª—è —Å—É–Ω–¥—É–∫–∞ <a:chest:805405279326961684>`, color, delete: 7000});
	  })
 
	  collector.on("end", () => message.delete());
	}
 
	static async beforeApparance(guild){
 
	  const data = guild.data;
 
	  if (!data.boss){
		 return;
	  }
 
 
	  const isApparanceAtNextDay = () => {
		 return data.boss.apparanceAtDay === DataManager.data.bot.currentDay + 1;
	  }
 
	  if (!isApparanceAtNextDay()){
		 return;
	  }
 
	  await Util.sleep(3000);
 
	  const descriptionImage = `–ù–∞—Å—Ç–æ—è—â–∏–π –±–æ—Å—Å ‚Äî —ç—Ç–æ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å. –ò –≤—Å–µ–º –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å –Ω–∏–º —Å—Ä–∞–∑–∏—Ç—Å—è.`;
	  const descriptionFacts = `<a:bigBlack:829059156069056544> –° –∑–∞–≤—Ç—Ä–∞—à–µ–Ω–µ–≥–æ –¥–Ω—è, –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π, –±–æ—Å—Å –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –∑–µ–º–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –æ–±—Ä–∞–∑–µ. –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞–Ω–µ—Å–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞.\n–ü–æ—Å–ª–µ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ **!–±–æ—Å—Å**, –∞ –ø–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –Ω–µ–±–æ–ª—å—à—É—é –Ω–∞–≥—Ä–∞–¥—É`;
	  const description = `${ descriptionImage }\n\n${ descriptionFacts }`;
 
	  const embed = {
		 color: "210052",
		 description
	  }
  
	  await guild.chatSend(embed);
	}
 
	static async beforeEnd(guild){
	  const boss = guild.data.boss;
	  const client = guild.client;
 
	  if (boss.level > 1 === false){
		 guild.chatSend({content: "–ë–æ—Å—Å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç—Ä–∞—Ö–µ..."});
		 return;
	  }

	  const VOID_REWARD = 1.25;
	  const KEYS_FOR_DAMAGE = 0.0002;
	  
 
	  const contents = {
		 dice: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –•${ this.calculateBossDamageMultiplayer(boss).toFixed(2) };`,
		 bossLevel: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: ${ boss.level } (${ [...new Array(boss.level - 1)].map((_, i) => this.calculateKillReward(i + 1)).reduce((acc, exp) => acc + exp) } –æ–ø—ã—Ç–∞)`,
		 damageDealt: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–º–∏ —É—Å–∏–ª–∏—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–Ω–µ—Å–ª–∏ ${ boss.damageTaken } –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞`,
		 usersCount: `–ü—Ä–∏–Ω—è–ª–æ —É—á–∞—Å—Ç–∏–µ: ${  Util.ending(Object.keys(boss.users).length, "—á–µ–ª–æ–≤–µ–∫", "", "", "–∞") }`,
		 parting: boss.level > 3 ? "–ë–æ—Å—Å –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω.." : "–ë–æ—Å—Å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω..",
		 rewards: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –∫–ª—é—á–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–≤–Ω–æ–º ${ KEYS_FOR_DAMAGE * 100 }% –æ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–≤–Ω–æ \`boss.level ** ${ VOID_REWARD }\``,
		 voidCount: "–í—Å–µ–≥–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:"
	  }
	  
	  const getUsetsRewardTable = () => {
			
		 	const table = Object.fromEntries(
				Object.keys(boss.users).map(id => [id, {}])
			);

			
			const rewardsCount = Math.floor(boss.level ** VOID_REWARD);
			getUsetsRewardTable.rewardsCount = rewardsCount;
		 
			const usersOdds = Object.entries(boss.users)
				.filter(([id]) => guild.members.cache.has(id))
				.map(([id, {damageDealt: _weight}]) => ({id, _weight}))
				.filter(({_weight}) => _weight);
			
			for (let i = 0; i < rewardsCount; i++){
				const id = usersOdds.random({_weights: true})
					.id;
				
				table[id].void ||= 0;
				table[id].void += 1;
			}

			
			for (const id in table){
				table[id].keys = Math.floor(boss.users[id].damageDealt * KEYS_FOR_DAMAGE);
			}
			
			return table;
	  	}
	 
		const usersTable = getUsetsRewardTable();
		
		Object.entries(usersTable).forEach(([id, {void: voidCount, keys}]) => {
			const user = client.users.cache.get(id);
			user.data.void += voidCount;
			user.data.keys += keys;
	  	})
 
	  	const fields = Object.entries(usersTable)
			.filter(([id, {void: voidCount}]) => voidCount)
			.map(([id, {void: voidCount}]) => {
				const userStats = BossManager.getUserStats(boss, id);
				const user = client.users.cache.get(id);
				const damage = userStats.damageDealt;
				const chestBonuses = userStats.chestRewardAt ? calculateChestBonuses(userStats.chestRewardAt) : 0;
				const value = `–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: \`${ voidCount }\`;\n–£—Ä–æ–Ω–∞: ${ damage }–µ–¥.${ chestBonuses ? `\n–ë–æ–Ω—É—Å–æ–≤ –∏–∑ —Å—É–Ω–¥–∫–∞: ${ chestBonuses };` : "" }`;
				return {name: user.tag, value, inline: true};
			});
		 
		const footer = {
			text: `${ contents.voidCount } ${ getUsetsRewardTable.rewardsCount }`,
			iconURL: guild.iconURL()
		};
	
		const description = `${ contents.dice }\n${ contents.bossLevel }\n\n${ contents.damageDealt }. ü©∏\n${ contents.usersCount }. ${ contents.parting }\n${ contents.rewards }.`;
		const embed = {
			title: "–°—Ä–µ–¥–∏ –Ω–æ—á–∏ –æ–Ω –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
			description,
			fields,
			footer
		};
		guild.chatSend(embed);
	}
 
	static initBossData(boss, guild){
		boss.level = 1;
		boss.users = {};
		boss.isArrived = true;
		boss.damageTaken = 0;
		boss.elementType = this.BOSS_TYPES.random().type;

		boss.stats = {
			damage: {}
		}
	
		boss.guildId = guild.id;
		boss.healthThresholder = BossManager.calculateHealthPointThresholder(boss.level);

		boss.avatarURL = this.getMediaAvatars().random();
		return boss;
	}

	static getMediaAvatars(){
		return [
			"https://media.discordapp.net/attachments/629546680840093696/1047587012665933884/batman-gif.gif",
			"https://media.discordapp.net/attachments/629546680840093696/1051424759537225748/stan.png"
		];
	}
 
	static userAttack({boss, user, channel}){
	  const userStats = BossManager.getUserStats(boss, user.id);
	  
	  userStats.attack_CD ||= 0;
	  userStats.attackCooldown ||= this.USER_DEFAULT_ATTACK_COOLDOWN;
 
	  const footer = {iconURL: user.avatarURL(), text: user.tag};
	  if (userStats.attack_CD > Date.now()){
		 const description = `**${ Util.timestampToDate(userStats.attack_CD - Date.now()) }**. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π.`;
		 channel.msg({title: "‚öîÔ∏è –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞..!", color: "ff0000", description, delete: 7000, footer});
		 return;
	  }
 
	  
	  userStats.attack_CD = Date.now() + userStats.attackCooldown;
 
	  
	  const attackContext = {
		 damageMultiplayer: 1,
		 listOfEvents: [],
		 defaultDamage: this.USER_DEFAULT_ATTACK_DAMAGE,
		 eventsCount: Math.floor(boss.level ** 0.5) + Util.random(-1, 1)
	  };
	  const pull = [...BossManager.eventBases.values()];
	  const data = {user, userStats, boss, channel, attackContext};

	  user.action(Actions.bossBeforeAttack, data);
	  
	  for (let i = 0; i < attackContext.eventsCount; i++){
		 for (const event of pull){
			const needSkip = event.filter && !event.filter(data);
			
			if (needSkip){
			  const index = pull.indexOf(event);
			  (~index) ? pull.splice(index, 1) : null;
			}
		 };
 
		 const event = pull.random({weights: true});
		 if (!event){
			break;
		 }
		 if (!event.repeats){
			const index = pull.indexOf(event);
			~index ? pull.splice(index, 1) : null;
		 }
 
		 try {
			event.callback(data);
		 }
		 catch (error){
			channel.msg({title: `–ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${ event.id }. –û–Ω –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫`, description: `**${ error.message }:**\n${ error.stack }`});
			BossManager.eventBases.delete(event.id);
		 }
		 attackContext.listOfEvents.push(event);
	  }
 
	  const damage = Math.ceil((userStats.attacksDamageMultiplayer ?? 1) * attackContext.defaultDamage * attackContext.damageMultiplayer);
	  attackContext.defaultDamage = attackContext.damageDealt = damage;
	  const dealt = BossManager.makeDamage(boss, damage, {sourceUser: user});
 
	  
 
	  const eventsContent = attackContext.listOfEvents.map(event => `„Éª ${ event.description }.`).join("\n");
	  const description = `–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ —Å –ø—Ä—è–º–æ–π –∞—Ç–∞–∫–∏: ${ dealt }–µ–¥.\n\n${ eventsContent }`;
	  const embed = {
		 title: `‚öîÔ∏è –ó–∞ —Å–µ—Ä–≤–µ—Ä ${ channel.guild.name }!`,
		 description,
		 footer
	  }
	  channel.msg(embed);
	}
 
 
	static eventBases = new Collection(Object.entries({
		increaseAttackCooldown: {
			_weight: 15,
			id: "increaseAttackCooldown",
			description: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ –±–æ–ª—å—à–µ –Ω–∞ 20 –º–∏–Ω—É—Ç",
			callback: ({userStats}) => {
				userStats.attackCooldown ||= this.USER_DEFAULT_ATTACK_COOLDOWN;
				const adding = 60_000 * 20;
				userStats.attackCooldown += adding;
				userStats.attack_CD += adding;
			},
			filter: ({attackContext}) => 
				!attackContext.listOfEvents.some(({id}) => ["reduceAttackDamage"].includes(id))      
		},
		increaseCurrentAttackDamage: {
			_weight: 45,
			repeats: true,
			id: "increaseAttackCooldown",
			description: "–£—Ä–æ–Ω —Ç–µ–∫—É—â–µ–π –∞—Ç–∞–∫–∏ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω",
			callback: ({attackContext}) => {
				attackContext.damageMultiplayer *= 5;
			}     
		},
		giveChestBonus: {
			_weight: 12,
			id: "giveChestBonus",
			description: "–í—ã–±–∏—Ç–æ 4 –±–æ–Ω—É—Å–∞ —Å—É–Ω–¥—É–∫–∞",
			callback: ({user}) => {
				user.data.chestBonus = (user.data.chestBonus ?? 0) + 4;
			}     
		},
		applyCurse: {
			_weight: 9,
			id: "applyCurse",
			description: "–í–∞—Å –ø—Ä–æ–∫–ª—è–ª–∏",
			callback: ({user, boss, channel}) => {
				const hard = Math.min(
				Math.floor(boss.level / 3),
				2
				);
				const curse = CurseManager.generate({user, hard, guild: channel.guild});
				CurseManager.init({user, curse});
			},
			filter: ({user}) => !user.data.curses?.length || user.data.voidFreedomCurse     
		},
		improveDamageForAll: {
			_weight: 3,
			id: "improveDamageForAll",
			description: "–ö—É–±–∏–∫ ‚Äî —É—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1%",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.diceDamageMultiplayer 
		},
		choiseAttackDefense: {
			_weight: 7,
			id: "choiseAttackDefense",
			description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
			callback: async ({user, boss, channel, userStats}) => {
				const reactions = ["‚öîÔ∏è", "üõ°Ô∏è"];
				const embed = {
				author: {name: user.username, iconURL: user.avatarURL()},
				description: "–í–∞—Å –∞—Ç–∞–∫—É—é—Ç!\n‚Äî –ü—ã—Ç–∞—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å\n‚Äî –ó–∞—â–∏—Ç–Ω–∞—è –ø–æ–∑–∞",
				reactions,
				footer: {iconURL: user.avatarURL(), text: "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
				}
	
				channel.sendTyping();
				await Util.sleep(2000);
	
				const message = await channel.msg(embed);
				const filter = ({emoji}, member) => user === member && reactions.includes(emoji.name);
				const collector = message.createReactionCollector({filter, time: 30_000, max: 1});
				collector.on("collect", (reaction) => {
				const isLucky = Util.random(0, 1);
				const emoji = reaction.emoji.name;
	
				if (emoji === "‚öîÔ∏è" && isLucky){
					const content = "–£—Å–ø–µ—Ö! –ù–∞–Ω–µ—Å–µ–Ω–æ 125 —É—Ä–æ–Ω–∞";
					message.msg({description: content});
					BossManager.makeDamage(boss, 125, {sourceUser: user});
					return;
				}
	
				if (emoji === "‚öîÔ∏è" && !isLucky){
					const content = "–ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –≤–∞—à–µ –æ—Ä—É–∂–∏–µ —É—à–ª–æ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É";
					message.msg({description: content});
					userStats.attack_CD += 3_600_000;
					return;
				}
	
				if (emoji === "üõ°Ô∏è" && isLucky){
					const content = "–£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–æ 1000 –∑–æ–ª–æ—Ç–∞";
					message.msg({description: content});
					user.data.coins += 1000;
					return;
				}
	
				if (emoji === "üõ°Ô∏è" && !isLucky){
					const content = "–ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤–∞—à–µ –æ—Ä—É–∂–∏–µ —É—à–ª–æ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É";
					message.msg({description: content});
					userStats.attack_CD += 3_600_000;
					return;
				}
				});
	
				collector.on("end", () => message.delete());
			}
		},
		selectLegendaryWearon: {
			_weight: 1,
			id: "selectLegendaryWearon",
			description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
			callback: async ({user, boss, channel, userStats}) => {
				const reactions = [...this.legendaryWearonList.values()].map(({emoji}) => emoji);
				const getLabel = ({description, emoji}) => `${ emoji } ${ description }.`;
				const embed = {
					description: `**–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –í–∞—Å —ç–ø–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º:**\n${ this.legendaryWearonList.map(getLabel).join("\n") }`,
					color: "#3d17a0",
					reactions,
					footer: {iconURL: user.avatarURL(), text: "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω–æ–∂–¥—ã"}
				}

				channel.sendTyping();
				await Util.sleep(2000);

				const message = await channel.msg(embed);
				const filter = ({emoji}, member) => user === member && reactions.includes(emoji.name);
				const collector = message.createReactionCollector({filter, time: 120_000, max: 1});
				collector.on("collect", (reaction) => {
					const emoji = reaction.emoji.name;

					
				});

				collector.on("end", () => message.delete());
			}
		},
		choiseCreatePotion: {
			_weight: 3,
			id: "choiseCreatePotion",
			description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
			callback: async ({user, boss, channel, userStats, attackContext}) => {
				const reactions = ["üß™", "üçØ", "ü©∏"];
				const embed = {
					author: {name: user.username, iconURL: user.avatarURL()},
					description: "–°–≤–∞—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–∏–∫—Å–∏—Ä\n‚Äî üß™ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ä–æ—à–∫–∞\n‚Äî üçØ –ü–æ–¥—Å—ã–ø–∞—Ç—å –ø—É–¥—Ä—ã\n‚Äî ü©∏ –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞",
					reactions,
					footer: {iconURL: user.avatarURL(), text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞"}
				}

				channel.sendTyping();
				await Util.sleep(2000);

				const ingredients = [];

				const createSpell = (ingredients) => {
					const spellsTable = {
						"üß™üß™üß™": {
						description: "–°–æ–∑–¥–∞—ë—Ç –æ—Å–æ–±—ã–π –∫–æ—Ç—ë–ª, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –∞—Ç–∞–∫–∏ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ. –û–¥–Ω–∞–∫–æ –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–¥–Ω–∏–º —á–∞—Å–æ–º –∏–ª–∏ –ø—è—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏!",
						callback: async (message, _embed) => {
							await message.react("üß™");
							const collector = message.createReactionCollector({time: 3_600_000});
							const gotTable = {};
							collector.on("collect", (_reaction, user) => {
								if (user.id in gotTable){
								message.msg({title: "–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ—Ç–ª–æ–º", color: "ff0000", delete: 3000});
								return;
								}

								if (Object.keys(gotTable) >= 5){
								collector.stop();
								}

								gotTable[user.id] = true;
								const userStats = BossManager.getUserStats(boss, user.id);
								const current = userStats.attackCooldown;
								userStats.attackCooldown = Math.floor(userStats.attackCooldown * 0.80);

								const description = `–ö—É–ª–¥–∞—É–Ω —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ ${ Util.timestampToDate(current - userStats.attackCooldown) }`;
				
								message.msg({description, footer: {iconURL: user.avatarURL(), text: user.tag}, delete: 8000});
							});

							collector.on("end", () => message.reactions.removeAll());
						}
						},
						"üß™üß™üçØ": {
						description: "–°–æ–∑–¥–∞—ë—Ç –æ—Å–æ–±—ã–π –∫–æ—Ç—ë–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Ä—É–µ—Ç –±–æ–≥–∞—Ç—Å–≤–∞ –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ. –û–¥–Ω–∞–∫–æ –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–¥–Ω–∏–º —á–∞—Å–æ–º –∏–ª–∏ –ø—è—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏!",
						callback: async (message, _embed) => {
							await message.react("üçØ");
							const collector = message.createReactionCollector({time: 3_600_000});
							const gotTable = {};
							collector.on("collect", (_reaction, user) => {
								if (user.id in gotTable){
								message.msg({title: "–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ—Ç–ª–æ–º", color: "ff0000", delete: 3000});
								return;
								}

								if (Object.keys(gotTable) >= 5){
								collector.stop();
								}

								gotTable[user.id] = true;

								user.data.chestBonus ||= 0;
								user.data.chestBonus += 7;
								const description = `–ü–æ–ª—É—á–µ–Ω–æ 7 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞`;
				
								message.msg({description, footer: {iconURL: user.avatarURL(), text: user.tag}, delete: 8000});
							});

							collector.on("end", () => message.reactions.removeAll());
						}
						},
						"üß™üß™ü©∏": {
						description: "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –Ω–∞ –∞—Ç–∞–∫—É –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫—É–ª–¥–∞—É–Ω –≤ –ø–æ–ª—Ç–æ—Ä–∞ —Ä–∞–∑–∞",
						callback: (_message, _embed) => {
							delete userStats.attack_CD;
							userStats.attackCooldown = Math.floor(userStats.attackCooldown / 1.5);
						}
						},
						"üß™üçØüçØ": {
						description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –≤–æ–ª–∫–∞ –∏–∑ –ª–∞–≤–∫–∏ –±–æ—Å—Å–∞",
						callback: (_message, _embed) => {
							userStats.bought ||= {};
							userStats.bought.wolf ||= 0;
							userStats.bought.wolf -= 2;
						}
						},
						"üß™ü©∏ü©∏": {
						description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –ø–∞–∑–ª –∏–∑ –ª–∞–≤–∫–∏ –±–æ—Å—Å–∞",
						callback: (_message, _embed) => {
							userStats.bought ||= {};
							userStats.bought.puzzle ||= 0;
							userStats.bought.puzzle -= 2;
						}
						},
						"üçØüçØüçØ": {
						description: "–í—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ 35 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞!",
						callback: (_message, _embed) => {
							user.data.chestBonus ||= 0;
							user.data.chestBonus += 35;
						}
						},
						"ü©∏ü©∏ü©∏": {
						description: "–ë–æ—Å—Å —Ç–µ—Ä—è–µ—Ç 7% –æ—Ç —Å–≤–æ–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
						callback: (message, embed) => {
							const thresholder = BossManager.calculateHealthPointThresholder(boss.level);
							const currentHealth = thresholder - boss.damageTaken;
							const damage = Math.floor(currentHealth * 0.07);
							BossManager.makeDamage(boss, damage, {sourceUser: user});

							embed.edit = true;
							embed.author = {name: `–ù–∞–Ω–µ—Å–µ–Ω–æ ${ damage }–µ–¥. —É—Ä–æ–Ω–∞`};
							message.msg(embed);
						}
						},
						"üß™üçØü©∏": {
						description: "–í—ã –ø–æ–ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã..",
						callback: (_message, _embed) => {

						}
						},
						"üçØüçØü©∏": {
						description: "–í—ã –ø–æ–ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã..",
						callback: (_message, _embed) => {

						}
						},
						"üçØü©∏ü©∏": {
						description: "–ù–∞–Ω–æ—Å–∏—Ç –µ—â—ë –æ–¥–Ω—É –∞—Ç–∞–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —É—Ä–æ–Ω–æ–º. –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –•4",
						callback: (message, embed) => {
							const previousDamage = attackContext.damageDealt;
							const damage = previousDamage * 4;
							BossManager.makeDamage(boss, damage, {sourceUser: user});

							embed.edit = true;
							embed.author = {name: `–ù–∞–Ω–µ—Å–µ–Ω–æ ${ damage }–µ–¥. —É—Ä–æ–Ω–∞`};
							message.msg(embed);
						}
						}
					}

					const sort = (a, b) => reactions.indexOf(a) > reactions.indexOf(b) ? 1 : -1;

					const key = ingredients.sort(sort).join("");
					const {callback, description} = spellsTable[key];
					return {callback, description};
				}


				const message = await channel.msg(embed);
				const filter = ({emoji}, member) => user === member && reactions.includes(emoji.name);
				const collector = message.createReactionCollector({filter, time: 90_000});
				collector.on("collect", async (reaction, user) => {
					reaction.users.remove(user);

					const emoji = reaction.emoji.name;

					

					ingredients.push(emoji);
					const MAX_INGEDIENTS = 3;

					const ingredientsContent = `[__${ ingredients.join("") }__] + ${ ingredients.length }/${ MAX_INGEDIENTS }`;
					await channel.msg({description: ingredientsContent, delete: 3000});

					


					if (ingredients.length === MAX_INGEDIENTS){
						collector.stop();

						if (!Util.random(0, 15)){
						const description = "–í—ã –ø–æ–ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤–µ–ª–∏ —Ä–µ—Å—É—Ä—Å—ã, –≤–∞—Ä–µ–≤–æ –Ω–µ—É–¥–∞–ª–æ—Å—å";
						channel.msg({title: "–ú—É—Ö–æ–º–æ—Ä, –ø—É–¥—Ä–∞, —É—Ç–∫–æ–Ω–æ—Å", description, footer: {iconURL: user.avatarURL(), text: user.tag}});
						return;
						}

						const {callback, description} = createSpell(ingredients);
						const embed = {
						title: "–¢—Ä–µ–ø–µ—â–∏, –±–æ—Å—Å, —è –∏–∑–æ–±—Ä—ë–ª –Ω–µ—á—Ç–æ!",
						description,
						footer: {iconURL: user.avatarURL(), text: user.tag}
						}
						const message = await channel.msg(embed);
						callback.call(null, message, embed);
					}

				});

				collector.on("end", () => message.delete());
			}
		},
		powerOfEarth: {
			_weight: 15,
			id: "powerOfEarth",
			description: "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.earth
		},
		powerOfWind: {
			_weight: 15,
			id: "powerOfWind",
			description: "–£–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.wind
		},
		powerOfFire: {
			_weight: 15,
			id: "powerOfFire",
			description: "",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.fire
		},
		powerOfDarkness: {
			_weight: 15,
			id: "powerOfDarkness",
			description: "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.darkness
		},
		powerOfEarthRare: {
			_weight: 1,
			id: "powerOfEarthRare",
			description: "",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.earth
		},
		powerOfWindRare: {
			_weight: 1,
			id: "powerOfWindRare",
			description: "",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.wind
		},
		powerOfFireRare: {
			_weight: 1,
			id: "powerOfFireRare",
			description: "–í–∞—à–∏ –ø—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏ –Ω–∞–Ω–æ—Å—è—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –ø–æ –±–æ—Å—Å—É",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.fire
		},
		powerOfDarknessRare: {
			_weight: 1,
			id: "powerOfDarknessRare",
			description: "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ —Å–≤—ã—à–µ 48—á!",
			callback: ({user, boss}) => {
				boss.diceDamageMultiplayer ||= 1;
				boss.diceDamageMultiplayer += 0.01;
			},
			filter: ({boss}) => boss.elementType === elementsEnum.darkness
		}
		// ______e4example: {
		//   _weight: 2,
		//   id: "______e4example",
		//   description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
		//   callback: async ({user, boss, channel, userStats}) => {
		//   }
		// }
 
	}));

	static applyEffect({effectBase, user, data}){

	}

	static effectBases = new Collection(Object.entries({

	}))

	static  legendaryWearonList = new Collection(Object.entries({
		afkPower:
		{
			description: "–£—Ä–æ–Ω –≤–∞—à–∏—Ö –∞—Ç–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∑–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è",
			effect: "increaseDamageByAfkTime",
			emoji: "‚ùÑÔ∏è",
			values: {
				power: () => 1 / (60_000 * 10)
			}
		},
		percentDamage:
		{
			description: "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∞—Ç–∞–∫ —Ä–∞–≤–µ–Ω 0.05% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Å—Å–∞",
			effect: "increaseDamageByBossCurrentHealthPoints",
			emoji: "ü©∏",
			values: {
				power: () => 0.0005
			}
		},
		manyEvent:
		{
			description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∞—Ç–∞–∫–∏ –Ω–∞ 3",
			effect: "increaseAttackEventsCount",
			emoji: "‚ú®",
			values: {
				power: () => 3
			}
		},
		togetherWeAre: 
		{
			description: "–ö–∞–∂–¥–∞—è –≤–∞—à–∞ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫—É–±–∏–∫–∞",
			effect: "increaseDamageForBoss",
			emoji: "üíß",
			values: {
				power: () => 0.0005
			}
		},
	}));
 
	static BOSS_TYPES = new Collection(Object.entries({
		earth: {
			key: "earth",
			type: elementsEnum.earth
		},
		wind: {
			key: "wind",
			type: elementsEnum.wind		
		},
		fire: {
			key: "fire",
			type: elementsEnum.fire
		},
		darkness: {
			key: "darkness",
			type: elementsEnum.darkness
		}
	}));

	static DAMAGE_SOURCES = {
		message: 0,
		attack: 1,
		thing: 2,
		other: 3,
		"0": {
			label: "–°–æ–æ–±—â–µ–Ω–∏—è",
			key: "message"
		},
		"1": {
			label: "–ü—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏",
			key: "attack"
		},
		"2": {
			label: "–®—Ç—É–∫–∞",
			key: "thing"
		},
		"3": {
			label: "–î—Ä—É–≥–æ–µ",
			key: "other"
		}
	}
 
	static USER_DEFAULT_ATTACK_COOLDOWN = 3_600_000 * 2;
	static USER_DEFAULT_ATTACK_DAMAGE = 10;


	static setClient(client){
		this.client = client;
	}

	static BossShop = BossShop;
}




export { BossManager, BossShop };
export default BossManager;