/* eslint-disable no-unused-vars */

import { Collection } from "@discordjs/collection";
import {
  DataManager,
  CurseManager,
  Properties,
  ErrorsHandler,
  CommandsManager,
} from "#lib/modules/mod.js";
import { Elements, elementsEnum } from "#folder/commands/thing.js";
import {
  NumberFormatLetterize,
  addMultipleResources,
  addResource,
  ending,
  question,
  random,
  sleep,
  timestampDay,
  timestampToDate,
} from "#lib/util.js";
import { ButtonStyle, ComponentType } from "discord.js";
import app from "#app";
import { PropertiesEnum } from "#lib/modules/Properties.js";
import {
  EffectInfluenceEnum,
  UserEffectManager,
} from "#lib/modules/EffectsManager.js";
import { DAY, HOUR, MINUTE, MONTH, SECOND } from "#constants/globals/time.js";
import config from "#config";
import { justButtonComponents } from "@zoodogood/utils/discordjs";
import { ActionsMap } from "#constants/enums/actionsMap.js";
import { takeInteractionProperties } from "#lib/Discord_utils.js";
import { BaseContext } from "#lib/BaseContext.js";
import { createDefaultPreventable } from "#lib/createDefaultPreventable.js";

/**
 *
 * @param {import("discord.js").User} user
 * @param {object} boss
 * @param {string} source
 * @param {object} primary
 * @param {CallableFunction | number} update_fixed
 * @param {CallableFunction | number} update_current
 * @returns {number}
 */
function update_attack_cooldown(
  user,
  boss,
  source,
  primary,
  update_fixed,
  update_current = null,
) {
  const userStats = BossManager.getUserStats(boss, user.id);
  const fixed_previous =
    userStats.attackCooldown || BossManager.USER_DEFAULT_ATTACK_COOLDOWN;

  const fixed =
    typeof update_fixed === "number"
      ? fixed_previous + update_fixed
      : update_fixed(fixed_previous);

  update_current ||= (previous) => previous - (fixed_previous - fixed);
  const current_previous = userStats.attack_CD || Date.now();
  const current =
    typeof update_current === "number"
      ? current_previous + update_current
      : update_current(userStats.attack_CD || Date.now());

  if (isNaN(fixed) || isNaN(current)) {
    throw new TypeError(
      `Expected number, get: ${update_fixed}, ${update_current}`,
    );
  }

  const context = new BaseContext(source, {
    primary,
    ...takeInteractionProperties(primary),
    source,
    fixed,
    current,
    update_current,
    update_fixed,
    ...createDefaultPreventable(),
  });
  user.action(ActionsMap.bossBeforeAttackCooldownUpdated, context);
  if (context.defaultPrevented()) {
    return;
  }

  console.log({
    fixed,
    update_fixed,
    fixed_dif: fixed_previous - fixed,
    current,
    update_current,
    current_dif: current_previous - current,
  });
  userStats.attackCooldown = fixed;
  userStats.attack_CD = current;
  return fixed_previous - fixed;
}

export async function emulate_user_attack({ boss, user, channel, event_ids }) {
  const userStats = BossManager.getUserStats(boss, user.id);

  userStats.attack_CD = 1;
  userStats.attackCooldown = 1;

  const attackContext = {
    damageMultiplayer: 1,
    listOfEvents: [],
    baseDamage: BossManager.USER_DEFAULT_ATTACK_DAMAGE,
    eventsCount: Math.floor(boss.level ** 0.5) + random(-1, 1),
    message: null,
  };

  const data = {
    user,
    userStats,
    boss,
    channel,
    attackContext,
    guild: channel.guild,
    message: null,
    fetchMessage() {
      return this.message;
    },
    ...createDefaultPreventable(),
  };
  user.action(ActionsMap.bossBeforeAttack, data);
  BossEvents.beforeAttacked(boss, data);

  if (data.defaultPrevented()) {
    return;
  }

  for (const event_id of event_ids) {
    const event = BossManager.eventBases.get(event_id);
    event.callback.call(event, data);
    attackContext.listOfEvents.push(event);
  }
  const damage = Math.ceil(
    (userStats.attacksDamageMultiplayer ?? 1) *
      attackContext.baseDamage *
      attackContext.damageMultiplayer,
  );
  attackContext.baseDamage = attackContext.damageDealt = damage;

  const damageSourceType = BossManager.DAMAGE_SOURCES.attack;
  const dealt = BossManager.makeDamage(boss, damage, {
    sourceUser: user,
    damageSourceType,
  });

  user.action(ActionsMap.bossAfterAttack, data);
  BossEvents.afterAttacked(boss, data);

  boss.stats.userAttacksCount++;
  userStats.attacksCount = (userStats.attacksCount || 0) + 1;

  const eventsContent = attackContext.listOfEvents
    .map((event) => `„Éª ${event.description}.`)
    .join("\n");
  const description = `–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ —Å –ø—Ä—è–º–æ–π –∞—Ç–∞–∫–∏: ${NumberFormatLetterize(
    dealt,
  )} –µ–¥.\n\n${eventsContent}`;
  (() => {
    const emoji = "‚öîÔ∏è";
    const embed = {
      title: `${emoji} –ó–∞ —Å–µ—Ä–≤–µ—Ä ${channel.guild.name}!`,
      description,
    };
    data.message = channel.msg(embed);
  })();
}

class RewardSystem {
  static LevelKill = {
    BASE: 100,
    ADDING_PER_LEVEL: 25,
    calculateKillExpReward({ toLevel, fromLevel }) {
      const { BASE, ADDING_PER_LEVEL } = this;
      const perLevel =
        BASE + (toLevel + fromLevel + 1) * (ADDING_PER_LEVEL / 2);
      return perLevel * (toLevel - fromLevel);
    },
    resources({ fromLevel, toLevel }) {
      return {
        exp: this.calculateKillExpReward({ fromLevel, toLevel }),
      };
    },
  };
  static Chest = {
    BASE_BONUSES: 50,
    BONUSES_PER_LEVEL: 10,
    DAMAGE_FOR_KEY: 5_000,
    KEYS_LIMIT: 10_000,
    calculateChestBonus(level) {
      return this.BASE_BONUSES + level * this.BONUSES_PER_LEVEL;
    },
    calculateKeys(userStats) {
      const value = Math.floor(
        (userStats.damageDealt || 0) / this.DAMAGE_FOR_KEY,
      );
      return Math.min(this.KEYS_LIMIT, value);
    },
    resources({ userStats, level }) {
      return {
        chestBonus: this.calculateChestBonus(level),
        keys: this.calculateKeys(userStats),
      };
    },
  };
  static BossEndPull = {
    DEFAULT_VOID: 1,
    VOID_REWARD_DENOMINATOR: 0.65,
    VOID_LIMIT_MULTIPLAYER: 2,
    DAMAGE_FOR_VOID: 30_000,
    DAMAGE_FOR_KEY: 5_000,
    KEYS_LIMIT: 10_000,
    calculateVoid({ userStats, level }) {
      const byDamage =
        (userStats.damageDealt / this.DAMAGE_FOR_VOID) **
        this.VOID_REWARD_DENOMINATOR;

      const limit = level * this.VOID_LIMIT_MULTIPLAYER;
      const value = Math.floor(byDamage) + this.DEFAULT_VOID;
      return Math.min(limit, value);
    },
    calculateKeys(userStats) {
      const value = Math.floor(userStats.damageDealt / this.DAMAGE_FOR_KEY);
      return Math.min(this.KEYS_LIMIT, value);
    },
    resources({ userStats, level }) {
      return {
        void: this.calculateVoid({ userStats, level }),
        keys: this.calculateKeys(userStats),
      };
    },
  };
  static MostStrongUser = {
    VOID_REWARD: 3,
    calculateVoid() {
      return this.VOID_REWARD;
    },
    resources() {
      return {
        void: this.calculateVoid(),
      };
    },
  };
  static GuildHarvest = {
    REWARD_PER_LEVEL: 1_000,
    onBossEnded(guild, boss) {
      const value = boss.level * this.REWARD_PER_LEVEL;
      RewardSystem.putCoinsToBank(guild, value);
    },
  };
  /**
   *
   * @param {Parameters<typeof addResource>[0]} addResourceOptions
   * @param {Record<string, number>} rewardPull
   */
  static sendReward(addResourceOptions, rewardPull) {
    return addMultipleResources({
      ...addResourceOptions,
      resources: rewardPull,
    });
  }
  static putCoinsToBank(guild, value) {
    guild.data.coins ||= 0;
    guild.data.coins += value;
  }
}

class Speacial {
  static AVATAR_OF_SNOW_QUEEN =
    "https://media.discordapp.net/attachments/926144032785195059/1189474240974565436/b9183b53bdf18835d4c337f06761d95d_1400x790-q-85_1_1.webp?ex=659e4b36&is=658bd636&hm=0889765cc144e316843ab5ad88144db1ae96f9c21f4747f303860d647200cf00&=&format=webp";

  static isSnowQueen(boss) {
    return boss.avatarURL === Speacial.AVATAR_OF_SNOW_QUEEN;
  }

  static findMostDamageDealtUser(boss) {
    const damageOf = (entrie) => entrie[1].damageDealt;
    const [id] = Object.entries(boss.users).reduce((previous, compare) =>
      damageOf(compare) > damageOf(previous) ? compare : previous,
    );
    return app.client.users.cache.get(id);
  }

  static LegendaryWearonList = new Collection(
    Object.entries({
      afkPower: {
        description: "–£—Ä–æ–Ω –≤–∞—à–∏—Ö –∞—Ç–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∑–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è",
        effect: "boss.increaseDamageByAfkTime",
        emoji: "‚ùÑÔ∏è",
        values: {
          power: () => 1 / (60_000 * 10),
        },
      },
      percentDamage: {
        description: "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∞—Ç–∞–∫ —Ä–∞–≤–µ–Ω 0.05% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Å—Å–∞",
        effect: "boss.increaseDamageByBossCurrentHealthPoints",
        emoji: "ü©∏",
        values: {
          power: () => 0.0005,
        },
      },
      manyEvent: {
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∞—Ç–∞–∫–∏ –Ω–∞ 3",
        effect: "boss.increaseAttackEventsCount",
        emoji: "‚ú®",
        values: {
          power: () => 3,
        },
      },
      togetherWeAre: {
        description:
          "–ö–∞–∂–¥–∞—è –≤–∞—à–∞ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫—É–±–∏–∫–∞",
        effect: "boss.increaseDamageForBoss",
        emoji: "üíß",
        values: {
          power: () => 0.0005,
        },
      },
      complexWork: {
        description:
          "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å, —á—Ç–æ–±—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±–∞–≤–∫—É –∫ —É—Ä–æ–Ω—É",
        effect: "boss.increaseDamageWhenStrictlyMessageChallenge",
        emoji: "üéà",
        values: {
          power: () => 1.1,
          basic: () => 20,
        },
      },
    }),
  );
}

class Utils {
  static damageTypeLabel(value) {
    const numeric =
      typeof value === "string" ? BossManager.DAMAGE_SOURCES[value] : value;
    return BossManager.DAMAGE_SOURCES[numeric].label;
  }
}

class AttributesShop {
  static async createShop({ guild, channel, user }) {
    const boss = guild.data.boss;

    const userStats = BossManager.getUserStats(boss, user.id);
    const boughtMap = (userStats.bought ||= {});

    const createEmbed = ({ boss, user, edit }) => {
      const data = user.data;

      const getDescription = (product) =>
        typeof product.description === "function"
          ? product.description({ userStats, boss, user, product })
          : product.description;

      const productsContent = this.PRODUCTS.map((product) => ({
        label: `${product.emoji} ‚Äî ${getDescription(product)}.`,
        price: this.calculatePrice({
          product,
          boughtCount: this.getBoughtCount({ userStats, product }),
        }),
        product,
      }))
        .map(
          ({ label, price, product }) =>
            `${label}\n${price} ${Properties.endingOf(
              product.resource,
              price,
            )};`,
        )
        .join("\n");

      const descriptionContent = `–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã! –í–∞—à–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n${ending(
        data.coins,
        "–º–æ–Ω–µ—Ç",
        "",
        "–∞",
        "—ã",
      )} <:coin:637533074879414272> –∏ ${ending(
        data.keys,
        "–∫–ª—é—á",
        "–µ–π",
        "",
        "–∞",
      )} üî© –Ω–∞ —Ä—É–∫–∞—Ö`;
      const description = `${descriptionContent}\n\n${productsContent}`;

      return {
        title: "–¢–∞–π–Ω–∞—è –ª–∞–≤–∫–∞ –ì—Ä–µ–º–ø–µ–Ω—Å–∞",
        author: { name: user.username, iconURL: user.avatarURL() },
        description,
        edit,
        reactions: edit
          ? []
          : [
              ...this.PRODUCTS.filter((product) =>
                this.isUserCanBuyProduct({ user, product, userStats }),
              ).map(({ emoji }) => emoji),
            ],
      };
    };

    let message = await channel.msg(createEmbed({ boss, user, edit: false }));
    const filter = (_reaction, member) => user.id === member.id;
    const collector = message.createReactionCollector({ filter, time: 60_000 });

    collector.on("collect", async (reaction, user) => {
      reaction.users.remove(user);
      const product = this.PRODUCTS.get(reaction.emoji.name);
      const currentBought = this.getBoughtCount({ userStats, product });

      const price = this.calculatePrice({
        product,
        boughtCount: currentBought,
      });

      if (!this.isUserCanBuyProduct({ user, product, userStats })) {
        message.msg({ title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", delete: 3000 });
        reaction.remove();
        return;
      }

      product.callback({ user, userStats, boss, product });
      boughtMap[product.keyword] = currentBought + 1;
      user.data[product.resource] -= price;
      message.msg({ description: `${product.emoji} +1`, delete: 7000 });
      message = await message.msg(createEmbed({ boss, user, edit: true }));
    });

    collector.on("end", () => message.reactions.removeAll());
  }

  static isUserCanBuyProduct({ user, product, userStats }) {
    return (
      user.data[product.resource] >=
      this.calculatePrice({
        product,
        boughtCount: this.getBoughtCount({ userStats, product }),
      })
    );
  }

  static getBoughtCount({ userStats, product }) {
    const boughtMap = userStats.bought ?? {};
    return boughtMap[product.keyword] || 0;
  }

  static calculatePrice({ product, boughtCount }) {
    const grossPrice =
      product.basePrice * product.priceMultiplayer ** (boughtCount ?? 0);
    const price =
      grossPrice > 30 ? Math.floor(grossPrice - (grossPrice % 5)) : grossPrice;
    return price;
  }

  static PRODUCTS = new Collection(
    Object.entries({
      "üß©": {
        emoji: "üß©",
        keyword: "puzzle",
        description: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∞—Ç–∞–∫–∏: 1.25",
        basePrice: 100,
        priceMultiplayer: 2,
        resource: "coins",
        callback: ({ userStats }) => {
          const multiplayer = 1.25;
          userStats.attacksDamageMultiplayer = +(
            (userStats.attacksDamageMultiplayer ?? 1) * multiplayer
          ).toFixed(3);
        },
      },
      "üê∫": {
        emoji: "üê∫",
        keyword: "wolf",
        description: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ",
        basePrice: 50,
        priceMultiplayer: 1.75,
        resource: "coins",
        callback: (context) => {
          const { userStats, user, boss } = context;
          update_attack_cooldown(user, boss, "", context, (current) =>
            Math.floor(current / 2),
          );
        },
      },
      "üì°": {
        emoji: "üì°",
        keyword: "anntena",
        description: "–ù–∞ 1 –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        basePrice: 1,
        priceMultiplayer: 2,
        resource: "keys",
        callback: ({ userStats }) => {
          userStats.damagePerMessage ||= 1;
          userStats.damagePerMessage += 1;
        },
      },
      "üé≤": {
        emoji: "üé≤",
        keyword: "dice",
        description: "–£—Ä–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 1% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ",
        basePrice: 10,
        priceMultiplayer: 5,
        resource: "coins",
        callback: ({ boss }) => {
          boss.diceDamageMultiplayer ||= 1;
          boss.diceDamageMultiplayer += 0.01;
        },
      },
    }),
  );
}

class BossEvents {
  static onBossDeath(boss, context) {
    const { fromLevel, toLevel } = context;
    const levels = [...new Array(toLevel - fromLevel)].map(
      (_, i) => i + fromLevel,
    );

    const modFive = levels.find((level) => level % 5 === 0);
    if (modFive) {
      this.events.get("bossNowHeals").callback(boss, context);
    }

    const precedesTen = levels.find((level) => level - 1 === 10);
    if (precedesTen) {
      this.events.get("notifyLevel10").callback(boss, context);
    }

    if (precedesTen) {
      this.events.get("checkQuestAloneKill").callback(boss, context);
    }

    this.events.get("questFirstTimeKillBoss").callback(boss, context);
  }

  static onTakeDamage(boss, context) {}

  static beforeAttacked(boss, context) {}

  static afterAttacked(boss, context) {}

  static beforeDeath(boss, context) {
    const MAXIMUM_LEVEL = BossManager.MAXIMUM_LEVEL;
    const isDefeatTransition =
      boss.level < MAXIMUM_LEVEL && context.possibleLevels > MAXIMUM_LEVEL;
    if (isDefeatTransition) {
      boss.damageTaken =
        BossManager.calculateHealthPointThresholder(MAXIMUM_LEVEL);
      context.possibleLevels = MAXIMUM_LEVEL;
    }
    return;
  }

  static events = new Collection(
    Object.entries({
      bossNowHeals: {
        id: "bossNowHeals",
        callback() {
          // to-do
        },
      },
      notifyLevel10: {
        id: "notifyLevel10",
        callback(boss, context) {
          const now = Date.now();
          const contents = {
            time: timestampToDate(
              now -
                (boss.endingAtDay - BossManager.BOSS_DURATION_IN_DAYS - 1) *
                  DAY,
            ),
          };
          const description = `**10-–π —É—Ä–æ–≤–µ–Ω—å –∑–∞ ${contents.time}**\n\n–° –º–æ–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–æ—Å—Å —Å—Ç–∞–Ω–µ—Ç —Å–ª–æ–∂–Ω–µ–µ, –∞ –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–∫–æ–ª–∫–∏ —Ä–µ–ª–∏–∫–≤–∏–π. –°–æ–±–µ—Ä–∏—Ç–µ 5 —à—Ç—É–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ —Ä–µ–ª–∏–∫–≤–∏–π`;
          const guild = app.client.guilds.cache.get(boss.guildId);

          guild.chatSend({
            description,
            color: BossManager.MAIN_COLOR,
          });
        },
      },

      questFirstTimeKillBoss: {
        id: "questFirstTimeKillBoss",
        callback(boss, context) {
          const { sourceUser } = context;
          sourceUser.action(ActionsMap.globalQuest, {
            name: "firstTimeKillBoss",
          });
        },
      },

      checkQuestAloneKill: {
        id: "checkQuestAloneKill",
        callback(boss, context) {
          const { sourceUser } = context;
          const hasImpostor = Object.entries(boss.users).some(
            ([id, { damageDealt }]) => damageDealt && id !== sourceUser.id,
          );

          if (hasImpostor) {
            return;
          }

          sourceUser.action(ActionsMap.globalQuest, { name: "killBossAlone" });
        },
      },
    }),
  );
}

class BossEffects {
  static updateBasesFromManager() {
    this.effectBases = new Collection(
      UserEffectManager.store
        .filter((value) => value.id.startsWith("boss."))
        .entries(),
    );
  }

  static applyEffect({ effectId, guild = null, user, values = {} }) {
    const effectBase = this.effectBases.get(effectId);

    const effect = UserEffectManager.createOfBase({
      effectBase,
      user,
      context: { guild },
    });

    Object.assign(effect.values, values, { guildId: guild.id });

    const context = {
      guild,
      effect,
      ...createDefaultPreventable(),
    };
    user.action(ActionsMap.bossBeforeEffectInit, context);
    if (context.defaultPrevented()) {
      return context;
    }

    const applyContext = UserEffectManager.applyEffect({
      effect,
      effectBase,
      user,
      context,
    });
    if (applyContext.defaultPrevented()) {
      return applyContext;
    }
    user.action(ActionsMap.bossEffectInit, context);
    return applyContext;
  }

  static removeEffects({ list, user }) {
    for (const effect of list) {
      this._removeEffect({ effect, user });
    }
  }

  static cleanCallbackMap(user) {
    UserEffectManager.cleanCallbackMap(user);
  }

  static removeEffect({ effect, user }) {
    this.removeEffects({ list: [effect], user });
  }

  static _removeEffect({ effect, user }) {
    const index = UserEffectManager.indexOf({ effect, user });
    if (index === -1) {
      return null;
    }

    user.action(ActionsMap.bossEffectEnd, { effect, index });
    UserEffectManager.removeEffect({ effect, user });
  }

  static effectsOf({ boss, user }) {
    return UserEffectManager.effectsOf({ user }).filter(
      (effect) =>
        effect.id.startsWith("boss.") && effect.values.guildId === boss.guildId,
    );
  }

  /**
   * @type {Collection<string, import("#lib/modules/EffectsManager.js").BaseEffect>}
   */
  static effectBases;
}

class Relics {
  static collection = new Collection(
    Object.entries({
      destroy: {
        id: "destroy",
        label: "–¢–µ—Ö–Ω–æ–º–∞–≥–∏—è",
        description: "–î–∞—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–¥–∏–Ω–æ–∂–¥—ã —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –±–æ—Å—Å–∞",
        onBought: () => {},
      },
      helper: {
        id: "helper",
        label: "–ú–æ–ª–æ—á–∫–æ",
        description:
          "–î–∞—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: —Å–Ω–∏–º–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        onBought: () => {},
      },
      dealt: {
        id: "dealt",
        label: "–°–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞",
        description:
          "–ù–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–æ–π –≤ 4 —á–∞—Å–∞: –Ω–∞–Ω–æ—Å–∏—Ç —Ä–æ–≤–Ω–æ 10% –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Å—Å–∞",
        onBought: () => {},
      },
      timeSecrets: {
        id: "timeSecrets",
        label: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
        description:
          "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–µ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –±–æ–ª—å—à–µ –Ω–∞ –≤–∞—Å –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç",
        onBought: () => {},
      },
      mastery: {
        id: "mastery",
        label: "–ü–æ–≥–ª–∞—Ç–∏—Ç—å",
        description:
          "–î–∞—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–≥–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤–æ–∏–Ω–∞, –µ–≥–æ —É—Ä–æ–Ω –∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –∞—Ç–∞–∫–∏",
        onBought: () => {},
      },
      pestsKing: {
        id: "pestsKing",
        label: "–ö–æ—Ä–æ–ª—å –∫–ª–æ–ø–æ–≤",
        description: "–ù–∞–≤—ã–∫ –ø—Ä–∏–∑—ã–≤–∞ –∫–ª–æ–ø–æ–≤ ‚Äî —Ö—É–¥—à—ã–π –Ω–∞–≤—ã–∫",
        onBought: () => {},
      },
      toy: {
        id: "toy",
        label: "–ò–≥—Ä—É—à–∫–∞",
        description: "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç",
        onBought: () => {},
      },
      defiance: {
        id: "defiance",
        label: "–ù–µ–ø–æ–∫–æ—Ä–Ω–æ—Å—Ç—å",
        description: "–í–∞—à–∏ –∞—Ç–∞–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ª–µ—á–∞—Ç –±–æ—Å—Å–∞",
        onBought: () => {},
      },
      watcher: {
        id: "watcher",
        label: "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π",
        description: "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–æ—Å—Å–µ",
        onBought: () => {},
      },
    }),
  );

  static isUserHasRelic({ relic, userData }) {
    return !!userData.bossRelics?.includes(relic.id);
  }

  static calculatePriceForRelic({ boss, user }) {
    const userStats = BossManager.getUserStats(boss, user.id);
    const relicsBought = userStats.boughedRelics?.length;
    const price = Math.round(350 - 349 * (1 / 1.0135) ** relicsBought);
    return price;
  }
}

class BossManager {
  static MAIN_COLOR = "";
  static ELITE_MAIN_COLOR = "";
  static BOSS_DURATION_IN_DAYS = 3;
  static MAXIMUM_LEVEL = 100;

  static summonBoss(guild) {
    const boss = (guild.data.boss ||= {});
    boss.endingAtDay = this.generateEndDate();
    delete boss.apparanceAtDay;

    BossManager.initBossData(boss, guild);
    return boss;
  }

  static async bossApparance(guild) {
    if (guild.members.me.joinedTimestamp > Date.now() + MONTH * 2) {
      return;
    }

    const guildData = guild.data;

    if (
      !guildData.boss ||
      (!guildData.boss.isArrived && !guildData.boss.apparanceAtDay)
    ) {
      guildData.boss = {};
      guildData.boss.apparanceAtDay = this.comeUpApparanceDay();
    }

    if (guildData.boss.endingAtDay <= DataManager.data.bot.currentDay) {
      await BossManager.beforeEnd(guild);
      delete guildData.boss;
      return;
    }

    if (guildData.boss.apparanceAtDay <= DataManager.data.bot.currentDay) {
      BossManager.summonBoss(guild);
    }
  }

  static comeUpApparanceDay() {
    const now = new Date();
    const MIN = 1;
    const MAX = 28;
    const date = new Date(
      now.getFullYear(),
      now.getMonth() + 1,
      random(MIN, MAX),
    );
    return timestampDay(date.getTime());
  }

  static generateEndDate(customDuration) {
    const duration = customDuration || this.BOSS_DURATION_IN_DAYS;
    const today = DataManager.data.bot.currentDay;
    return today + duration;
  }

  static isArrivedIn(guild) {
    const boss = guild.data.boss;
    if (!boss) {
      return false;
    }

    return !!boss.isArrived;
  }

  static isElite(boss) {
    return boss.level >= 10;
  }

  static isDefeated(boss) {
    return boss.isDefeated;
  }

  static getUserStats(boss, id) {
    if (typeof id !== "string") {
      throw new TypeError("Expected id");
    }

    const bossUsers = boss.users;
    if (id in bossUsers === false) bossUsers[id] = { messages: 0 };

    return bossUsers[id];
  }

  static onMessage(message) {
    const boss = message.guild.data.boss;
    const authorId = message.author.id;

    const userStats = this.getUserStats(boss, authorId);
    userStats.messages++;

    const DEFAULT_DAMAGE = 1;
    const damage = userStats.damagePerMessage ?? DEFAULT_DAMAGE;
    const damageSourceType = BossManager.DAMAGE_SOURCES.message;
    BossManager.makeDamage(boss, damage, {
      sourceUser: message.author,
      damageSourceType,
    });
  }

  static calculateHealthPoint(level) {
    return 7_000 + Math.floor(level * 500 * 1.2 ** level);
  }

  static calculateHealthPointThresholder(level) {
    const totalOfPrevious = [...new Array(level - 1)]
      .map((_, level) => BossManager.calculateHealthPoint(level))
      .reduce((acc, points) => acc + points, 0);

    return BossManager.calculateHealthPoint(level) + totalOfPrevious;
  }

  static calculateBossDamageMultiplayer(
    boss,
    { context = {}, sourceUser = {} } = {},
  ) {
    let multiplayer = 1;
    multiplayer *= boss.diceDamageMultiplayer ?? 1;
    multiplayer *= boss.legendaryWearonDamageMultiplayer ?? 1;

    if (context.restoreHealthByDamage) {
      multiplayer *= -context.restoreHealthByDamage;
    }

    return multiplayer;
  }

  static makeDamage(
    boss,
    damage,
    { sourceUser, damageSourceType = BossManager.DAMAGE_SOURCES.other } = {},
  ) {
    const baseDamage = damage;
    damage *= this.calculateBossDamageMultiplayer(boss, {
      sourceUser,
      context: {
        restoreHealthByDamage: sourceUser.effects?.damageRestoreHealht ?? false,
      },
    });
    damage = Math.floor(damage);

    if (isNaN(damage)) {
      throw new TypeError("Damage not a Number");
    }

    const context = { boss, damage, damageSourceType, sourceUser, baseDamage };
    boss.damageTaken += damage;

    if (sourceUser) {
      const stats = BossManager.getUserStats(boss, sourceUser.id);
      stats.damageDealt ||= 0;
      stats.damageDealt += damage;

      sourceUser.action(ActionsMap.bossMakeDamage, context);
    }

    if (damageSourceType !== null) {
      const damageStats = boss.stats.damage;
      damageStats[damageSourceType] ??= 0;
      damageStats[damageSourceType] += damage;
    }

    BossEvents.onTakeDamage(boss, context);
    DataManager.data.bot.bossDamageToday += damage;

    if (boss.damageTaken >= boss.healthThresholder) {
      BossManager.fatalDamage(context);
    }

    return damage;
  }

  static fatalDamage(context) {
    const calculatePossibleLevels = (boss) => {
      let currentLevel = boss.level - 1;
      let healthThresholder;
      do {
        currentLevel++;
        healthThresholder =
          BossManager.calculateHealthPointThresholder(currentLevel);
      } while (boss.damageTaken >= healthThresholder);

      return currentLevel;
    };
    const { boss } = context;
    Object.assign(context, {
      possibleLevels: calculatePossibleLevels(boss),
      ...createDefaultPreventable(),
    });

    BossEvents.beforeDeath(boss, context);
    if (context.defaultPrevented()) {
      return;
    }

    BossManager.kill({
      ...context,
      fromLevel: boss.level,
      toLevel: context.possibleLevels,
    });
  }

  static kill(context) {
    const { boss, sourceUser, fromLevel, toLevel } = context;
    const { LevelKill, sendReward } = RewardSystem;
    const { exp: expReward } = LevelKill.resources({
      fromLevel,
      toLevel,
    });

    if (sourceUser) {
      sendReward(
        {
          user: sourceUser,
          executor: sourceUser,
          source: "bossManager.kill",
          context,
        },
        { exp: expReward },
      );
    }

    BossEvents.onBossDeath(boss, { fromLevel, toLevel, sourceUser });

    const guild = app.client.guilds.cache.get(boss.guildId);

    boss.level = toLevel;
    boss.healthThresholder =
      BossManager.calculateHealthPointThresholder(toLevel);

    if (boss.level >= this.MAXIMUM_LEVEL) {
      this.victory(guild);
    }

    const contents = {
      footerText: "–û–±—Ä–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é",
      title: "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π!",
      main: sourceUser
        ? `${sourceUser.username} –Ω–∞–Ω–æ—Å–∏—Ç –ø—Ä–æ–Ω–∑–∞—é—â–∏–π —É–¥–∞—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç ${expReward} <:crys2:763767958559391795>`
        : "–ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –∏–∑ –Ω–∏ –æ—Ç–∫—É–¥–∞ –Ω–∞–Ω—ë—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è –±–æ—Å—Å–∞ —É—Ä–æ–Ω",
      isImagine: toLevel - 1 !== fromLevel ? "<:tan:1068072988492189726>" : "",
      levels: `${fromLevel}...${toLevel}`,
    };
    const footer = {
      text: contents.footerText,
      iconURL: sourceUser ? sourceUser.avatarURL() : guild.iconURL(),
    };
    guild.chatSend({
      description: `${contents.title} (${contents.levels})\n${contents.main}\n${contents.isImagine}`,
      footer,
    });
    BossManager.BonusesChest.createCollector({
      guild,
      boss,
      fromLevel,
      toLevel,
    });
  }

  static victory(guild) {
    const boss = guild.data.boss;
    if (boss.isDefeated) {
      return;
    }

    guild.chatSend({
      description:
        "–í—ã —Å–∏–ª—å–Ω—ã–µ. –°–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã —Ä—è–¥–æ–º.\n–ë–æ—Å—Å –ø–æ–±–µ–∂–¥—ë–Ω –∏ –ø—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏ –ø–æ –Ω–µ–º—É –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∫–≤–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –≤ —Ç–æ–ø'–µ",
    });
    boss.isDefeated = true;
  }

  static BonusesChest = {
    RECEIVE_LIMIT: 20,
    MAIN_COLOR: "#ffda73",

    createEmbed: ({ fromLevel, toLevel, taking }) => {
      const contents = {
        rewardPer: `–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –±–æ—Å—Å–æ–º —É—Ä. ${toLevel - 1}`,
        timeLimit: `–í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–≤—É–º—è —á–∞—Å–∞–º–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`,
        receiveLimit: `${
          taking
            ? `\n–°–æ–±—Ä–∞–Ω–æ: ${taking}/${BossManager.BonusesChest.RECEIVE_LIMIT}`
            : ""
        }`,
      };
      return {
        title: "–°—É–Ω–¥—É–∫ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
        description: `${contents.rewardPer}\n${contents.timeLimit}.${contents.receiveLimit}`,
        thumbnail:
          "https://media.discordapp.net/attachments/629546680840093696/1038767024643522600/1476613756146739089.png?width=593&height=593",
        footer: {
          text: "–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ –æ–¥–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ –∑–∞ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –±–æ—Å—Å–∞",
        },
        color: BossManager.BonusesChest.MAIN_COLOR,
        reactions: ["637533074879414272"],
      };
    },
    createCollector: async ({ guild, toLevel, fromLevel }) => {
      const BossChest = BossManager.BonusesChest;

      const embed = BossChest.createEmbed({ toLevel, fromLevel, taking: 0 });
      const context = {
        taking: 0,
        toLevel,
        fromLevel,
        message: null,
        guild,
      };

      context.message = await guild.chatSend(embed);
      if (!context.message) {
        return;
      }

      const filter = (reaction, user) =>
        !user.bot && reaction.emoji.id === "637533074879414272";
      const collector = context.message.createReactionCollector({
        filter,
        time: HOUR * 2,
      });
      collector.on("collect", (reaction, user) => {
        const result = BossChest.onCollect(user, context, reaction);
        if (!result) {
          return;
        }
        context.taking++;
        if (context.taking >= BossChest.RECEIVE_LIMIT) {
          collector.stop();
        }
        context.message.msg({ ...BossChest.createEmbed(context), edit: true });
      });

      collector.on("end", () => context.message.delete());
    },
    onCollect: (user, context, reaction = null) => {
      const { toLevel, message, guild } = context;
      const boss = guild.data.boss;
      if (!boss) {
        message.msg({
          title: `–ë–æ—Å—Å–∞ –Ω–µ—Ç!`,
          delete: 5_000,
          footer: { text: user.username, avatarURL: user.avatarURL() },
        });
        reaction?.remove();
        return;
      }
      const userStats = BossManager.getUserStats(boss, user.id);

      if ("chestRewardAt" in userStats) {
        message.msg({
          title: `–í—ã —É–∂–µ –≤–∑—è–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ —É—Ä. ${userStats.chestRewardAt}`,
          delete: 5000,
        });
        reaction?.users.remove(user);
        return;
      }

      const { Chest } = RewardSystem;

      const rewardPull = Chest.resources({ userStats, level: toLevel });
      RewardSystem.sendReward(
        {
          user,
          executor: user,
          source: "bossManager.chest.onCollect",
          context,
        },
        rewardPull,
      );

      userStats.chestRewardAt = toLevel;
      message.msg({
        description: `–ü–æ–ª—É—á–µ–Ω–æ ${ending(
          rewardPull.chestBonus,
          "–±–æ–Ω—É—Å",
          "–æ–≤",
          "",
          "–∞",
        )} –¥–ª—è —Å—É–Ω–¥—É–∫–∞ <a:chest:805405279326961684> –∏ ${rewardPull.keys} üî©`,
        color: BossManager.BonusesChest.MAIN_COLOR,
        delete: 7000,
      });

      return true;
    },
  };

  static async beforeApparance(guild) {
    const data = guild.data;

    if (!data.boss) {
      return;
    }

    const isApparanceAtNextDay = () => {
      return data.boss.apparanceAtDay === DataManager.data.bot.currentDay + 1;
    };

    if (!isApparanceAtNextDay()) {
      return;
    }

    await sleep(3000);

    const descriptionImage = `–ù–∞—Å—Ç–æ—è—â–∏–π –±–æ—Å—Å ‚Äî —ç—Ç–æ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å. –ò –≤—Å–µ–º –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å –Ω–∏–º —Å—Ä–∞–∑–∏—Ç—Å—è.`;
    const descriptionFacts = `<a:bigBlack:829059156069056544> –° –∑–∞–≤—Ç—Ä–∞—à–µ–Ω–µ–≥–æ –¥–Ω—è, –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π, –±–æ—Å—Å –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –∑–µ–º–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –æ–±—Ä–∞–∑–µ. –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞–Ω–µ—Å–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞.\n–ü–æ—Å–ª–µ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ **!–±–æ—Å—Å**, –∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –Ω–µ–±–æ–ª—å—à—É—é –Ω–∞–≥—Ä–∞–¥—É`;
    const description = `${descriptionImage}\n\n${descriptionFacts}`;

    const embed = {
      color: "#210052",
      description,
    };

    await guild.chatSend(embed);
  }

  static async beforeEnd(guild) {
    const boss = guild.data.boss;
    const usersCache = guild.client.users.cache;

    if (boss.level > 1 === false) {
      guild.chatSend({ content: "–ë–æ—Å—Å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç—Ä–∞—Ö–µ..." });
      return;
    }

    const DAMAGE_THRESHOLDER_FOR_REWARD = 1_500;
    const { BossEndPull, GuildHarvest, MostStrongUser, LevelKill, sendReward } =
      RewardSystem;

    const mostStrongUser = (() => {
      const pull = MostStrongUser.resources();
      const { findMostDamageDealtUser } = Speacial;
      const user = findMostDamageDealtUser(boss);
      sendReward(
        {
          source: "bossManager.beforeEnd.mostStrongUser",
          user,
          context: { boss },
          executor: null,
        },
        pull,
      );
      return user;
    })();

    const sendReward_ = ([id, userStats]) => {
      const user = usersCache.get(id);
      const rewardPull = BossEndPull.resources({
        userStats,
        level: boss.level,
      });
      sendReward(
        {
          user,
          executor: null,
          source: "bossManager.beforeEnd.bossEndPull",
          context: { boss, rewardPull },
        },
        rewardPull,
      );
    };

    const cleanEffects = (user) => {
      const list = BossEffects.effectsOf({ user, boss });
      BossEffects.removeEffects({ list, user });
    };

    const context = {
      guild,
      boss,
      mostStrongUser,
      usersStatsEntries: Object.entries(boss.users),
    };

    this.eventBases.get("andWhoStronger").onBossEnd(context);
    GuildHarvest.onBossEnded(guild, boss);

    const { usersStatsEntries } = context;

    usersStatsEntries
      .filter(
        ([_id, { damageDealt }]) => damageDealt > DAMAGE_THRESHOLDER_FOR_REWARD,
      )
      .forEach(sendReward_);

    usersStatsEntries
      .map(([id]) => usersCache.get(id))
      .forEach((user) => user && cleanEffects(user));

    const mainDamage = Object.entries(boss.stats.damage).reduce(
      (acc, current) => (acc.at(1) > current.at(1) ? acc : current),
      [BossManager.DAMAGE_SOURCES.other, 0],
    );

    const weakestDamage = Object.entries(boss.stats.damage).reduce(
      (acc, current) => (acc.at(1) < current.at(1) ? acc : current),
      [BossManager.DAMAGE_SOURCES.other, Number.MAX_SAFE_INTEGER],
    );

    const participants = usersStatsEntries.filter(
      ([id, { damageDealt }]) => damageDealt,
    );

    const contents = {
      dice: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –•${this.calculateBossDamageMultiplayer(
        boss,
      ).toFixed(2)};`,
      bossLevel: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: ${
        boss.level
      } (${LevelKill.calculateKillExpReward({
        fromLevel: 1,
        toLevel: boss.level,
      })} –æ–ø—ã—Ç–∞)`,
      damageDealt: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–º–∏ —É—Å–∏–ª–∏—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–Ω–µ—Å–ª–∏ **${NumberFormatLetterize(
        boss.damageTaken,
      )}** –µ–¥. —É—Ä–æ–Ω–∞`,
      mainDamageType: `–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: **${
        BossManager.DAMAGE_SOURCES[mainDamage.at(0)].label
      } ${((mainDamage.at(1) / boss.damageTaken) * 100).toFixed(1)}%**`,
      weakestDamageType: `–•—É–¥—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${
        BossManager.DAMAGE_SOURCES[weakestDamage.at(0)].label
      } ‚Äî ${((weakestDamage.at(1) / boss.damageTaken) * 100).toFixed(
        2,
      )}% (${weakestDamage.at(1)} –µ–¥.)`,
      attacksCount: `–°–æ–≤–µ—Ä—à–µ–Ω–æ –ø—Ä—è–º—ã—Ö –∞—Ç–∞–∫: ${boss.stats.userAttacksCount}`,
      usersCount: `–ü—Ä–∏–Ω—è–ª–æ —É—á–∞—Å—Ç–∏–µ: ${ending(
        participants.length,
        "—á–µ–ª–æ–≤–µ–∫",
        "",
        "",
        "–∞",
      )}`,
      parting: boss.level > 3 ? "–ë–æ—Å—Å –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω.." : "–ë–æ—Å—Å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω..",
      rewards: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –∫–ª—é—á–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–≤–Ω–æ–º ${
        100 / BossEndPull.DAMAGE_FOR_KEY
      }% –æ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞`,
      mostStrongUser: `–°–∏–ª—å–Ω–µ–ª—å—à–∏–π –∞—Ç–∞–∫–µ—Ä: ${mostStrongUser.toString()}: ${NumberFormatLetterize(
        boss.users[mostStrongUser.id].damageDealt,
      )} –µ–¥., ‚Äî –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç 3 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏`,
      invisibleSpace: "‚†Ä",
    };

    const footer = {
      text: `–ü—Ä–æ–±—ã–ª –∑–¥–µ—Å—å ${BossManager.BOSS_DURATION_IN_DAYS} –¥–Ω—è –∏ –ø—Ä–æ—Å—Ç–æ —É—à—ë–ª`,
      iconURL: guild.iconURL(),
    };

    const components = {
      type: ComponentType.Button,
      style: ButtonStyle.Secondary,
      label: "–°–æ–±—ã—Ç–∏–µ —Å –±–æ—Å—Å–æ–º –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å",
      customId: "bye-bye",
      disabled: true,
    };

    const description = `üß© ${contents.dice}\n${contents.bossLevel}\n\n${contents.damageDealt}.\n${contents.mainDamageType}\n${contents.weakestDamageType}\n${contents.attacksCount}\n\nü©∏ ${contents.usersCount}. ${contents.parting}\n${contents.mostStrongUser}.\n${contents.rewards}.\n\n${contents.invisibleSpace}`;
    const embed = {
      title: "–°—Ä–µ–¥–∏ –Ω–æ—á–∏ –æ–Ω –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
      description,
      footer,
      components,
    };
    guild.chatSend(embed);
  }

  static initBossData(boss, guild) {
    boss.level = 1;
    boss.users = {};
    boss.isArrived = true;
    boss.damageTaken = 0;
    boss.elementType = this.BOSS_TYPES.random().type;

    boss.stats = {
      damage: {},
      userAttacksCount: 0,
    };

    boss.guildId = guild.id;
    boss.healthThresholder = BossManager.calculateHealthPointThresholder(
      boss.level,
    );

    boss.avatarURL = this.getMediaAvatars().random();
    return boss;
  }

  static getMediaAvatars() {
    return [
      "https://media.discordapp.net/attachments/629546680840093696/1047587012665933884/batman-gif.gif",
      "https://media.discordapp.net/attachments/629546680840093696/1051424759537225748/stan.png",
      "https://cdn.discordapp.com/attachments/629546680840093696/1062620914321211432/DeepTown.png",
    ];
  }

  static async userAttack(context) {
    const { boss, user, channel } = context;
    const userStats = BossManager.getUserStats(boss, user.id);

    if (userStats.heroIsDead) {
      channel.msg({
        description: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è",
        color: "#ff0000",
        footer: { text: user.username, iconURL: user.avatarURL() },
        delete: 30_000,
      });
      return;
    }

    if (boss.isDefeated) {
      channel.msg({
        description: "–ü—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –±–æ—Å—Å–æ–º",
        color: "#ff0000",
        footer: { text: user.username, iconURL: user.avatarURL() },
        delete: 30_000,
      });
      return;
    }

    userStats.attack_CD ||= 0;
    userStats.attackCooldown ||= this.USER_DEFAULT_ATTACK_COOLDOWN;

    const footer = { iconURL: user.avatarURL(), text: user.tag };
    if (userStats.attack_CD > Date.now()) {
      const description = `**${timestampToDate(
        userStats.attack_CD - Date.now(),
      )}**. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π.`;
      channel.msg({
        title: "‚öîÔ∏è –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞..!",
        color: "#ff0000",
        description,
        delete: 7000,
        footer,
      });
      return;
    }

    update_attack_cooldown(
      user,
      boss,
      "",
      context,
      0,
      userStats.attackCooldown,
    );

    const attackContext = {
      damageMultiplayer: 1,
      listOfEvents: [],
      baseDamage: this.USER_DEFAULT_ATTACK_DAMAGE,
      eventsCount: Math.floor(boss.level ** 0.5) + random(-1, 1),
      message: null,
    };

    const data = {
      user,
      userStats,
      boss,
      channel,
      attackContext,
      guild: channel.guild,
      ...createDefaultPreventable(),
      message: null,
      fetchMessage() {
        return this.message;
      },
    };

    user.action(ActionsMap.bossBeforeAttack, data);
    BossEvents.beforeAttacked(boss, data);

    if (data.defaultPrevented()) {
      return;
    }

    const pull = [...BossManager.eventBases.values()]
      .filter((base) => !base.filter || base.filter(data))
      .map((event) => ({
        ...event,
        _weight:
          typeof event.weight === "function"
            ? event.weight(data)
            : event.weight,
      }));

    for (let i = 0; i < attackContext.eventsCount; i++) {
      const event = pull.random({ weights: true });

      if (!event) {
        continue;
      }
      if (!event.repeats) {
        const index = pull.indexOf(event);
        ~index && pull.splice(index, 1);
      }

      try {
        event.callback.call(event, data);
      } catch (error) {
        ErrorsHandler.onErrorReceive(error, { source: "BossAttackAction" });
        channel.msg({
          title: `–ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${event.id}. –û–Ω –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫`,
          description: `**${error.message}:**\n${error.stack}`,
        });
        BossManager.eventBases.delete(event.id);
      }
      attackContext.listOfEvents.push(event);
    }

    const damage = Math.ceil(
      (userStats.attacksDamageMultiplayer ?? 1) *
        attackContext.baseDamage *
        attackContext.damageMultiplayer,
    );
    attackContext.baseDamage = attackContext.damageDealt = damage;

    const damageSourceType = BossManager.DAMAGE_SOURCES.attack;
    const dealt = BossManager.makeDamage(boss, damage, {
      sourceUser: user,
      damageSourceType,
    });

    user.action(ActionsMap.bossAfterAttack, data);
    BossEvents.afterAttacked(boss, data);

    boss.stats.userAttacksCount++;
    userStats.attacksCount = (userStats.attacksCount || 0) + 1;

    const eventsContent = attackContext.listOfEvents
      .map((event) => `„Éª ${event.description}.`)
      .join("\n");
    const description = `–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞ —Å –ø—Ä—è–º–æ–π –∞—Ç–∞–∫–∏: ${NumberFormatLetterize(
      dealt,
    )} –µ–¥.\n\n${eventsContent}`;
    (() => {
      const emoji = "‚öîÔ∏è";
      const embed = {
        title: `${emoji} –ó–∞ —Å–µ—Ä–≤–µ—Ä ${channel.guild.name}!`,
        description,
        footer,
      };
      data.message = channel.msg(embed);
    })();
  }

  static eventBases = new Collection(
    Object.entries({
      increaseAttackCooldown: {
        weight: 1500,
        id: "increaseAttackCooldown",
        description: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ –±–æ–ª—å—à–µ –Ω–∞ 20 –º–∏–Ω—É—Ç",
        callback: (context) => {
          const { boss, user, userStats } = context;
          update_attack_cooldown(user, boss, "", context, MINUTE * 20);
        },
        filter: ({ attackContext }) =>
          !attackContext.listOfEvents.some(({ id }) =>
            ["reduceAttackDamage"].includes(id),
          ),
      },
      increaseCurrentAttackDamage: {
        weight: 4500,
        repeats: true,
        id: "increaseCurrentAttackDamage",
        description: "–£—Ä–æ–Ω —Ç–µ–∫—É—â–µ–π –∞—Ç–∞–∫–∏ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω",
        callback: ({ attackContext }) => {
          attackContext.damageMultiplayer *= 5;
        },
      },
      increaseNextTwoAttacksDamage: {
        weight: 1_000,
        repeats: true,
        id: "increaseNextTwoAttacksDamage",
        description: "–£—Ä–æ–Ω —Å–ª–µ–¥—É—é—â–∏—Ö –¥–≤—É—Ö –∞—Ç–∞–∫ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω",
        callback: ({ guild, user }) => {
          const effectId = "boss.increaseAttackDamage";
          const values = { repeats: 2, power: 2.5 };
          BossEffects.applyEffect({ values, guild, user, effectId });
        },
      },
      giveChestBonus: {
        weight: 1200,
        id: "giveChestBonus",
        description: "–í—ã–±–∏—Ç–æ 4 –±–æ–Ω—É—Å–∞ —Å—É–Ω–¥—É–∫–∞",
        callback: ({ user }) => {
          user.data.chestBonus = (user.data.chestBonus ?? 0) + 4;
        },
      },
      applyCurse: {
        weight: 900,
        id: "applyCurse",
        description: "–í–∞—Å –ø—Ä–æ–∫–ª—è–ª–∏",
        callback: ({ user, boss, channel }) => {
          const hard = (random(boss.level) > 20) + (random(boss.level) > 50);
          const curse = CurseManager.generate({
            user,
            hard,
            context: { guild: channel.guild },
          });
          CurseManager.init({ user, curse });
        },
        filter: ({ user }) =>
          !user.data.curses?.length || user.data.voidFreedomCurse,
      },
      applyManyCurses: {
        weight: 40,
        id: "applyManyCurses",
        description: "–ú–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏–π",
        callback: ({ user, boss, channel }) => {
          for (let i = 0; i < random(3, 5); i++) {
            const hard = (random(boss.level) > 20) + (random(boss.level) > 50);
            const curse = CurseManager.generate({
              user,
              hard,
              context: { guild: channel.guild },
            });
            CurseManager.init({ user, curse });
          }
        },
        filter: ({ user }) =>
          !user.data.curses?.length || user.data.voidFreedomCurse,
      },
      unexpectedShop: {
        weight: 20,
        id: "unexpectedShop",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ª–∞–≤–∫—É —Ç–æ—Ä–≥–æ–≤—Ü–∞",
        callback: async (context) => {
          const { channel, user } = context;
          await sleep(1 * SECOND);
          await channel.msg({
            description:
              "–ö–∞–∂–¥—ã–π –∫—É–ø–ª–µ–Ω–Ω—ã–π –≤ –ª–∞–≤–∫–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–Ω–µ—Å—ë—Ç —É—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É, —Ä–∞–≤–Ω—ã–π –µ–≥–æ —Ü–µ–Ω–µ",
          });

          const { effect } = UserEffectManager.justEffect({
            effectId: "useCallback",
            user,
            values: {
              callback: (_user, _effect, { actionName, data }) => {
                if (actionName !== ActionsMap.buyFromGrempen) {
                  return;
                }
                const { product } = data;

                const damage = BossManager.makeDamage(
                  context.boss,
                  product.value,
                  {
                    sourceUser: context.user,
                    damageSourceType: BossManager.DAMAGE_SOURCES.other,
                  },
                );

                data.phrase += `\n–¢—ã–∫: ${damage} –µ–¥.`;
              },
            },
          });
          setTimeout(
            () => UserEffectManager.interface({ effect, user }).remove(),
            MINUTE * 10,
          );
          const interactionClone = {
            ...context,
            extend: {
              slots: [
                {
                  index: 0,
                  product: {
                    key: "_",
                    label: "–ü–æ–¥–∞—Ä–æ—á–µ–∫",
                    emoji: "üéÅ",
                    value: 300,
                    fn() {
                      return "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∫—É–ø–∏–ª–∏ –º–µ–Ω—è!";
                    },
                  },
                  price: 300,
                },
              ],
              disableSyncSlots: true,
            },
            phrase: "",
          };

          CommandsManager.collection
            .get("grempen")
            .onChatInput(null, interactionClone);
        },
      },
      improveDamageForAll: {
        weight: 300,
        id: "improveDamageForAll",
        description: "–ö—É–±–∏–∫ ‚Äî —É—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1%",
        callback: ({ user, boss }) => {
          boss.diceDamageMultiplayer ||= 1;
          boss.diceDamageMultiplayer += 0.01;
        },
        filter: ({ boss }) => boss.diceDamageMultiplayer,
      },
      superMegaAttack: {
        weight: 200,
        id: "superMegaAttack",
        description: "–°—É–ø–µ—Ä –º–µ–≥–∞ –∞—Ç–∞–∫–∞",
        callback: async (parentContext) => {
          const { user, boss, channel, userStats } = parentContext;
          const ActionsEnum = {
            Hit: "hit",
            Leave: "leave",
          };

          channel.sendTyping();
          await sleep(2000);
          const executorMessage = await parentContext.fetchMessage();

          const embed = {
            title: "**~ –°–£–ü–ï–† –ú–ï–ì–ê –ê–¢–ê–ö–ê**",
            description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä :no_pedestrians:",
            footer: {
              iconURL: user.avatarURL(),
              text: "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            },
            components: {
              label: "–ù–∞–Ω–µ—Å—Ç–∏",
              type: ComponentType.Button,
              style: ButtonStyle.Secondary,
              customId: ActionsEnum.Hit,
            },
            color: Elements.at(boss.elementType).color,
            reference: executorMessage.id,
          };

          /**
           * @type import("discord.js").Message
           */
          const message = await channel.msg(embed);

          delete embed.reference;

          const collectorFilter = (interaction) => user === interaction.user;
          const interaction = await message
            .awaitMessageComponent({
              filter: collectorFilter,
              time: MINUTE,
            })
            .catch(() => {});

          if (!interaction) {
            embed.components = [];
            message.msg({
              ...embed,
              edit: true,
            });
            return;
          }

          const BASE_DAMAGE = 1500;
          const DAMAGE_PER_LEVEL = 100;
          const damage = boss.level * DAMAGE_PER_LEVEL + BASE_DAMAGE;

          const dealt = BossManager.makeDamage(boss, damage, {
            sourceUser: user,
          });

          update_attack_cooldown(user, boss, "", parentContext, MINUTE * 30);

          embed.description = `–ù–∞–Ω–µ—Å–µ–Ω–æ ${dealt} –µ–¥. —É—Ä–æ–Ω–∞.`;

          (async () => {
            embed.components = [
              {
                label: "–£–π—Ç–∏",
                type: ComponentType.Button,
                style: ButtonStyle.Secondary,
                customId: ActionsEnum.Leave,
              },
              {
                label: "–ù–∞–Ω–µ—Å—Ç–∏",
                type: ComponentType.Button,
                style: ButtonStyle.Secondary,
                customId: ActionsEnum.Hit,
              },
            ];
            let counter = 0;
            interaction.msg({ ...embed, edit: true });

            const collector = message.createMessageComponentCollector({
              filter: collectorFilter,
            });
            collector.on("collect", (interaction) => {
              const { customId } = interaction;
              if (customId !== ActionsEnum.Hit) {
                collector.stop();
                return;
              }

              const adding = MINUTE * 7.5;
              update_attack_cooldown(user, boss, "", parentContext, adding);

              if (random(20) === 0) {
                embed.description += `\n~ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –µ—â—ë –Ω–∞ ${timestampToDate(
                  adding,
                )}`;
                collector.stop();
                return;
              }

              const BASE_DAMAGE = 120;
              const DAMAGE_PER_ITERATION = 90;
              const ADDING_DAMAGE = Math.round((Math.random() / 2 + 0.5) * 10);
              const DAMAGE_PER_LEVEL = 20;
              const damage =
                boss.level * DAMAGE_PER_LEVEL +
                BASE_DAMAGE +
                ADDING_DAMAGE +
                DAMAGE_PER_ITERATION * counter;

              const dealt = BossManager.makeDamage(boss, damage, {
                sourceUser: user,
              });
              embed.description += `\n~ –ù–∞–Ω–µ—Å–µ–Ω–æ –µ—â—ë ${dealt} –µ–¥. —É—Ä–æ–Ω–∞`;

              counter++;
              if (counter >= 5) {
                collector.stop();
                return;
              }

              interaction.msg({ ...embed, edit: true });
            });

            collector.on("end", () => {
              embed.description += " :drop_of_blood:";
              embed.components = [];
              interaction.msg({
                ...embed,
                edit: true,
              });
            });
          })();
        },
      },
      choiseAttackDefense: {
        weight: 800,
        id: "choiseAttackDefense",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
        callback: async (context) => {
          const { user, boss, channel, userStats } = context;
          const reactions = ["‚öîÔ∏è", "üõ°Ô∏è"];
          const embed = {
            author: { name: user.username, iconURL: user.avatarURL() },
            description:
              "–í–∞—Å –∞—Ç–∞–∫—É—é—Ç!\n‚Äî –ü—ã—Ç–∞—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å\n‚Äî –ó–∞—â–∏—Ç–Ω–∞—è –ø–æ–∑–∞",
            reactions,
            footer: {
              iconURL: user.avatarURL(),
              text: "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            },
          };

          channel.sendTyping();
          await sleep(2000);

          const message = await channel.msg(embed);
          const filter = ({ emoji }, member) =>
            user === member && reactions.includes(emoji.name);
          const collector = message.createReactionCollector({
            filter,
            time: 30_000,
            max: 1,
          });
          collector.on("collect", (reaction) => {
            const isLucky = random(0, 1);
            const emoji = reaction.emoji.name;

            if (!isLucky) {
              update_attack_cooldown(user, boss, "", context, 0, HOUR * 20);
            }

            if (emoji === "‚öîÔ∏è" && isLucky) {
              const BASE_DAMAGE = 125;
              const DAMAGE_PER_LEVEL = 15;
              const damage = BASE_DAMAGE + DAMAGE_PER_LEVEL * boss.level;

              const dealt = BossManager.makeDamage(boss, damage, {
                sourceUser: user,
              });
              const content = `–£—Å–ø–µ—Ö! –ù–∞–Ω–µ—Å–µ–Ω–æ ${dealt}–µ–¥. —É—Ä–æ–Ω–∞`;
              message.msg({ description: content });
              return;
            }

            if (emoji === "‚öîÔ∏è" && !isLucky) {
              const content =
                "–ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –≤–∞—à–µ –æ—Ä—É–∂–∏–µ —É—à–ª–æ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É";
              message.msg({ description: content });
              return;
            }

            if (emoji === "üõ°Ô∏è" && isLucky) {
              const BASE_COINS = 1000;
              const COINS_PER_LEVEL = 100;
              const coins = BASE_COINS + COINS_PER_LEVEL * boss.level;

              const content = `–£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–æ ${coins}–µ–¥. –∑–æ–ª–æ—Ç–∞`;
              message.msg({ description: content });
              user.data.coins += coins;
              return;
            }

            if (emoji === "üõ°Ô∏è" && !isLucky) {
              const content =
                "–ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤–∞—à–µ –æ—Ä—É–∂–∏–µ —É—à–ª–æ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É";
              message.msg({ description: content });
              return;
            }
          });

          collector.on("end", () => message.delete());
        },
      },
      selectLegendaryWearon: {
        weight: ({ userStats }) => (userStats.attacksCount || 0) * 10,
        id: "selectLegendaryWearon",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
        callback: async (context) => {
          const { LegendaryWearonList: wearons } = Speacial;
          const { user, channel, userStats, guild } = context;
          const reactions = [...wearons.values()].map(({ emoji }) => emoji);
          const getLabel = ({ description, emoji }) =>
            `${emoji} ${description}.`;
          const embed = {
            description: `**–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –í–∞—Å —ç–ø–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º:**\n${wearons
              .map(getLabel)
              .join("\n")}`,
            color: "#3d17a0",
            reactions,
            footer: {
              iconURL: user.avatarURL(),
              text: "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω–æ–∂–¥—ã",
            },
          };

          channel.sendTyping();
          await sleep(2000);

          const message = await channel.msg(embed);
          const filter = ({ emoji }, member) =>
            user === member && reactions.includes(emoji.name);
          const collector = message.createReactionCollector({
            filter,
            time: 300_000,
            max: 1,
          });
          collector.on("collect", async (reaction) => {
            const emoji = reaction.emoji.name;
            const wearon = wearons.find((wearon) => wearon.emoji === emoji);
            if (!wearon) {
              throw new Error("Unexpected Exception");
            }

            const values = Object.fromEntries(
              Object.entries(wearon.values).map(([key, value]) => [
                key,
                value(context),
              ]),
            );
            values.isLegendaryWearon = true;
            values.canPrevented = false;

            BossEffects.applyEffect({
              guild,
              user,
              effectId: wearon.effect,
              values,
            });
            userStats.haveLegendaryWearon = true;

            message.channel.msg({
              color: "#000000",
              description: `–í—ã–±—Ä–∞–Ω–æ: ${wearon.description}`,
              reference: message.id,
            });
            await sleep(10_000);
            collector.stop();
          });

          collector.on("end", () => message.reactions.removeAll());
        },

        filter: ({ userStats, boss }) =>
          !userStats.haveLegendaryWearon && boss.level >= 5,
      },
      choiseCreatePotion: {
        weight: 300,
        id: "choiseCreatePotion",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
        callback: async (context) => {
          const { user, boss, channel, userStats, attackContext } = context;
          const reactions = ["üß™", "üçØ", "ü©∏"];
          const embed = {
            author: { name: user.username, iconURL: user.avatarURL() },
            description:
              "–°–≤–∞—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–∏–∫—Å–∏—Ä\n‚Äî üß™ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ä–æ—à–∫–∞\n‚Äî üçØ –ü–æ–¥—Å—ã–ø–∞—Ç—å –ø—É–¥—Ä—ã\n‚Äî ü©∏ –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞",
            reactions,
            footer: {
              iconURL: user.avatarURL(),
              text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞",
            },
          };

          channel.sendTyping();
          await sleep(2000);

          const ingredients = [];

          const createSpell = (ingredients) => {
            const spellsTable = {
              "üß™üß™üß™": {
                description:
                  "–°–æ–∑–¥–∞—ë—Ç –æ—Å–æ–±—ã–π –∫–æ—Ç—ë–ª, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –∞—Ç–∞–∫–∏ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ. –û–¥–Ω–∞–∫–æ –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–¥–Ω–∏–º —á–∞—Å–æ–º –∏–ª–∏ –ø—è—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏!",
                callback: async (message, _embed) => {
                  await message.react("üß™");
                  const collector = message.createReactionCollector({
                    time: 3_600_000,
                  });
                  const gotTable = {};
                  collector.on("collect", (_reaction, user) => {
                    if (user.id in gotTable) {
                      message.msg({
                        title: "–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ—Ç–ª–æ–º",
                        color: "#ff0000",
                        delete: 3000,
                      });
                      return;
                    }

                    if (Object.keys(gotTable).length >= 5) {
                      collector.stop();
                    }

                    gotTable[user.id] = true;
                    const userStats = BossManager.getUserStats(boss, user.id);
                    const current = userStats.attackCooldown;
                    userStats.attackCooldown = Math.floor(
                      userStats.attackCooldown * 0.8,
                    );

                    const description = `–ö—É–ª–¥–∞—É–Ω —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ ${timestampToDate(
                      current - userStats.attackCooldown,
                    )}`;

                    message.msg({
                      description,
                      footer: { iconURL: user.avatarURL(), text: user.tag },
                      delete: 8000,
                    });
                  });

                  collector.on("end", () => message.reactions.removeAll());
                },
              },
              "üß™üß™üçØ": {
                description:
                  "–°–æ–∑–¥–∞—ë—Ç –æ—Å–æ–±—ã–π –∫–æ—Ç—ë–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Ä—É–µ—Ç –±–æ–≥–∞—Ç—Å–≤–∞ –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ. –û–¥–Ω–∞–∫–æ –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–¥–Ω–∏–º —á–∞—Å–æ–º –∏–ª–∏ –ø—è—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏!",
                callback: async (message, _embed) => {
                  await message.react("üçØ");
                  const collector = message.createReactionCollector({
                    time: 3_600_000,
                  });
                  const gotTable = {};
                  collector.on("collect", (_reaction, user) => {
                    if (user.id in gotTable) {
                      message.msg({
                        title: "–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ—Ç–ª–æ–º",
                        color: "#ff0000",
                        delete: 3000,
                      });
                      return;
                    }

                    if (Object.keys(gotTable).length >= 5) {
                      collector.stop();
                    }

                    gotTable[user.id] = true;

                    user.data.chestBonus ||= 0;
                    user.data.chestBonus += 10;
                    const description = `–ü–æ–ª—É—á–µ–Ω–æ 10 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞`;

                    message.msg({
                      description,
                      footer: { iconURL: user.avatarURL(), text: user.tag },
                      delete: 8000,
                    });
                  });

                  collector.on("end", () => message.reactions.removeAll());
                },
              },
              "üß™üß™ü©∏": {
                description:
                  "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –Ω–∞ –∞—Ç–∞–∫—É –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫—É–ª–¥–∞—É–Ω –≤ –ø–æ–ª—Ç–æ—Ä–∞ —Ä–∞–∑–∞",
                callback: (_message, _embed) => {
                  update_attack_cooldown(
                    user,
                    boss,
                    "",
                    context,
                    (previous) => previous / 1.5,
                    () => 0,
                  );
                },
              },
              "üß™üçØüçØ": {
                description:
                  "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –≤–æ–ª–∫–∞ –∏–∑ –ª–∞–≤–∫–∏ –±–æ—Å—Å–∞",
                callback: (_message, _embed) => {
                  userStats.bought ||= {};
                  userStats.bought.wolf ||= 0;
                  userStats.bought.wolf -= 1;
                },
              },
              "üß™ü©∏ü©∏": {
                description:
                  "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –ø–∞–∑–ª –∏–∑ –ª–∞–≤–∫–∏ –±–æ—Å—Å–∞",
                callback: (_message, _embed) => {
                  userStats.bought ||= {};
                  userStats.bought.puzzle ||= 0;
                  userStats.bought.puzzle -= 1;
                },
              },
              "üçØüçØüçØ": {
                description: "–í—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ 45 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞!",
                callback: (_message, _embed) => {
                  user.data.chestBonus ||= 0;
                  user.data.chestBonus += 45;
                },
              },
              "ü©∏ü©∏ü©∏": {
                description: "–ë–æ—Å—Å —Ç–µ—Ä—è–µ—Ç 7% –æ—Ç —Å–≤–æ–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
                callback: (message, embed) => {
                  const thresholder =
                    BossManager.calculateHealthPointThresholder(boss.level);
                  const currentHealth = thresholder - boss.damageTaken;
                  const damage = Math.floor(currentHealth * 0.07);
                  BossManager.makeDamage(boss, damage, { sourceUser: user });

                  embed.edit = true;
                  embed.author = { name: `–ù–∞–Ω–µ—Å–µ–Ω–æ ${damage}–µ–¥. —É—Ä–æ–Ω–∞` };
                  message.msg(embed);
                },
              },
              "üß™üçØü©∏": {
                description: "–í—ã –ø–æ–ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã..",
                callback: (_message, _embed) => {},
              },
              "üçØüçØü©∏": {
                description: "–≠—Ñ—Ñ–µ–∫—Ç –∫—É–±–∏–∫–∞. –£—Ä–æ–Ω –ø–æ –±–æ—Å—Å—É —É–≤–µ–ª–∏—á–µ–Ω",
                callback: (_message, _embed) => {
                  boss.diceDamageMultiplayer ||= 1;
                  boss.diceDamageMultiplayer += 0.05;
                },
              },
              "üçØü©∏ü©∏": {
                description:
                  "–ù–∞–Ω–æ—Å–∏—Ç –µ—â—ë –æ–¥–Ω—É –∞—Ç–∞–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —É—Ä–æ–Ω–æ–º. –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –•4",
                callback: (message, embed) => {
                  const previousDamage = attackContext.damageDealt;
                  const damage = previousDamage * 4;
                  BossManager.makeDamage(boss, damage, { sourceUser: user });

                  embed.edit = true;
                  embed.author = { name: `–ù–∞–Ω–µ—Å–µ–Ω–æ ${damage}–µ–¥. —É—Ä–æ–Ω–∞` };
                  message.msg(embed);
                },
              },
            };

            const sort = (a, b) =>
              reactions.indexOf(a) > reactions.indexOf(b) ? 1 : -1;

            const key = ingredients.sort(sort).join("");
            const { callback, description } = spellsTable[key];
            return { callback, description };
          };

          const message = await channel.msg(embed);
          const filter = ({ emoji }, member) =>
            user === member && reactions.includes(emoji.name);
          const collector = message.createReactionCollector({
            filter,
            time: 90_000,
            max: 3,
          });
          collector.on("collect", async (reaction, user) => {
            reaction.users.remove(user);

            const emoji = reaction.emoji.name;

            ingredients.push(emoji);
            const MAX_INGEDIENTS = 3;

            const ingredientsContent = `[__${ingredients.join("")}__] + ${
              ingredients.length
            }/${MAX_INGEDIENTS}`;
            await channel.msg({
              description: ingredientsContent,
              delete: 3000,
            });

            if (ingredients.length === MAX_INGEDIENTS) {
              collector.stop();

              if (!random(0, 15)) {
                const description =
                  "–í—ã –ø–æ–ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤–µ–ª–∏ —Ä–µ—Å—É—Ä—Å—ã, –≤–∞—Ä–µ–≤–æ –Ω–µ—É–¥–∞–ª–æ—Å—å";
                channel.msg({
                  title: "–ú—É—Ö–æ–º–æ—Ä, –ø—É–¥—Ä–∞, —É—Ç–∫–æ–Ω–æ—Å",
                  description,
                  footer: { iconURL: user.avatarURL(), text: user.tag },
                });
                return;
              }

              const { callback, description } = createSpell(ingredients);
              const embed = {
                title: "–¢—Ä–µ–ø–µ—â–∏, –±–æ—Å—Å, —è –∏–∑–æ–±—Ä—ë–ª –Ω–µ—á—Ç–æ!",
                description,
                footer: { iconURL: user.avatarURL(), text: user.tag },
              };
              const message = await channel.msg(embed);
              callback.call(null, message, embed);
            }
          });

          collector.on("end", () => message.delete());
        },
      },
      powerOfEarth: {
        weight: 1000,
        id: "powerOfEarth",
        description: "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ",
        callback: ({ user, boss }) => {
          const berry = 2 + Math.ceil(boss.level / 4);
          user.data.berrys += berry;
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.earth,
      },
      powerOfWind: {
        weight: 1000,
        id: "powerOfWind",
        description: "–£–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        callback: (context) => {
          const { userStats, user, boss } = context;
          const maximum = 0.2;
          const piece =
            Math.random() * userStats.attackCooldown * maximum +
            userStats.attackCooldown * (1 - maximum);
          update_attack_cooldown(
            user,
            boss,
            "",
            context,
            (previous) => previous * piece,
          );
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.wind,
      },
      powerOfFire: {
        weight: 1000,
        id: "powerOfFire",
        description: "–ù–∞ —á—Ç–æ –≤—ã –Ω–∞–¥–µ—è—Ç–µ—Å—å?",
        callback: ({ boss }) => {
          boss.damageTaken -= 15 * boss.level;
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.fire,
      },
      powerOfDarkness: {
        weight: 1000,
        id: "powerOfDarkness",
        description: "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
        callback: ({ user, boss }) => {
          const userData = user.data;
          userData.keys += 3 + boss.level * 2;
          userData.chestBonus = (userData.chestBonus || 0) + 2 + boss.level;
          userData.coins += 20 + 15 * boss.level;
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.darkness,
      },
      powerOfEarthRare: {
        weight: 50,
        id: "powerOfEarthRare",
        description:
          "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –¥–≤—É—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
        callback: ({ user, guild }) => {
          const values = {
            influence: [
              EffectInfluenceEnum.Negative,
              EffectInfluenceEnum.Neutral,
            ],
            count: 2,
          };
          BossEffects.applyEffect({
            effectId: "boss.preventEffects",
            user,
            guild,
            values,
          });
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.earth,
      },
      powerOfWindRare: {
        weight: 50,
        id: "powerOfWindRare",
        description: "–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–∫–ª—è—Ç–∏–µ —É–¥–∞—á–Ω–æ–≥–æ –∫–æ–∏–Ω–∞",
        callback: (primary) => {
          const { user, guild } = primary;
          const curseBase = CurseManager.cursesBase.get("coinFever");
          const context = { guild, primary };
          const curse = CurseManager.generateOfBase({
            curseBase,
            user,
            context,
          });
          CurseManager.init({ curse, user });
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.wind,
      },
      powerOfFireRare: {
        weight: 50,
        id: "powerOfFireRare",
        description: "–í–∞—à–∏ –ø—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏ –Ω–∞–Ω–æ—Å—è—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –ø–æ –±–æ—Å—Å—É",
        callback: ({ user, boss, userStats }) => {
          const multiplayer = 1.1;
          userStats.attacksDamageMultiplayer = +(
            (userStats.attacksDamageMultiplayer ?? 1) * multiplayer
          ).toFixed(3);
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.fire,
      },
      powerOfDarknessRare: {
        weight: 50,
        id: "powerOfDarknessRare",
        description: "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏ —Å–≤—ã—à–µ 8 —á.",
        callback: (primary) => {
          const { user, userStats, boss } = primary;
          update_attack_cooldown(user, boss, "", primary, HOUR * 8);

          addResource({
            user,
            value: 1,
            resource: PropertiesEnum.void,
            executor: user,
            source: "bossManager.attack.events.powerOfDarknessRare",
            context: primary,
          });
        },
        filter: ({ boss }) => boss.elementType === elementsEnum.darkness,
      },
      pests: {
        weight: ({ boss }) => 400 * 1.05 ** (boss.level - 10),
        id: "pests",
        description: "–ö–ª–æ–ø—ã",
        callback: (context) => {
          const { user, boss, userStats } = context;
          const addingCooldowm = 30 * SECOND;
          update_attack_cooldown(user, boss, "", context, addingCooldowm);

          const decreaseMultiplayer = 0.995;
          userStats.attacksDamageMultiplayer = +(
            (userStats.attacksDamageMultiplayer ?? 1) * decreaseMultiplayer
          ).toFixed(3);
        },
        repeats: true,
        filter: ({ boss }) => boss.level >= 10,
      },
      pests_effect: {
        weight: ({ boss }) => 20 * 1.05 ** (boss.level - 10),
        id: "pests_effect",
        description: "–°–ª–∞–±–æ—Å—Ç—å —Å–ª–µ–¥—É—â–∏–µ 20 –º–∏–Ω—É—Ç",
        callback: (context) => {
          const { user, boss, userStats } = context;
          UserEffectManager.justEffect({
            effectId: "boss.decreaseAttackDamage",
            user,
            values: {
              power: 0.2,
              repeats: Number.MAX_SAFE_INTEGER,
              timer: 20 * MINUTE,
            },
            context,
          });
        },
        repeats: true,
        filter: ({ boss }) => boss.level >= 10,
      },
      death: {
        weight: 70,
        id: "death",
        description: "–°–º—ç—Ä—Ç—å",
        callback: ({ userStats }) => {
          userStats.heroIsDead = true;
        },
        repeats: false,
        filter: ({ boss }) => boss.level >= 3,
      },
      theRarestEvent: {
        weight: 1,
        id: "theRarestEvent",
        description: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –∫–ª—é—á ~",
        callback: ({ user }) => {
          user.data.keys += 1;
        },
      },
      takeRelicsShard: {
        weight: 20,
        id: "relics",
        description: "–ü–æ–ª—É—á–µ–Ω –æ—Å–∫–æ–ª–æ–∫ —Å–ª—É—á–∞–π–Ω–æ–π —Ä–µ–ª–∏–∫–≤–∏–∏",
        callback: ({ userStats, user }) => {
          const userData = user.data;
          userStats.relicsShards ||= 0;
          userStats.relicsShards++;
          const NEED_SHARDS_TO_GROUP = 5;

          if (userStats.relicsShards >= NEED_SHARDS_TO_GROUP) {
            userStats.relicIsTaked = true;
            delete userStats.relicIsTaked;

            user.data.bossRelics ||= [];

            const relicKey = Relics.collection
              .filter(
                (relic) =>
                  Relics.isUserHasRelic({ userData, relic }) && relic.inPull,
              )
              .randomKey();

            relicKey && user.data.bossRelics.push(relicKey);
          }
        },
        filter: ({ boss, userStats }) => {
          return BossManager.isElite(boss) && !userStats.relicIsTaked;
        },
      },
      leaderRoar: {
        weight: 70,
        id: "leaderRoar",
        MULTIPLAYER: 15,
        TIMEOUT: MINUTE * 15,
        description: "–í–æ–∑–≥–ª–∞—Å –ª–∏–¥–µ—Ä–∞",
        async callback(context) {
          await sleep(1000);
          const { guild, channel, boss, user } = context;
          const message = await context.fetchMessage();
          channel.sendTyping();
          await sleep(4000);

          const owner = (await guild.fetchOwner())?.user ?? user;

          const TIMEOUT = this.TIMEOUT;
          const MULTIPLAYER = this.MULTIPLAYER;

          const whenOwnerMakeDamage = new Promise((resolve) => {
            const callback = (_user, effect, { actionName, data }) => {
              if (actionName !== ActionsMap.bossMakeDamage) {
                return;
              }

              return resolve({ effect, data });
            };
            const { effect } = UserEffectManager.justEffect({
              effectId: "useCallback",
              user: owner,
              values: {
                callback,
              },
            });

            // to-do: developer crutch
            if (!effect) {
              throw new Error("Effect not be returned");
            }

            const outTimeout = () => resolve({ effect, data: null });
            setTimeout(outTimeout, TIMEOUT);
          });

          const embed = {
            reference: message.id,
            description: `–ñ–¥–µ–º –¥–æ ${
              TIMEOUT / 60_000
            } –º., –ø–æ–∫–∞ ${owner.toString()} –Ω–∞–Ω–µ—Å—ë—Ç —É—Ä–æ–Ω –±–æ—Å—Å—É. –í—ã –Ω–∞–Ω–µ—Å—ë—Ç–µ –≤ ${ending(
              MULTIPLAYER,
              "—Ä–∞–∑",
              "",
              "",
              "–∞",
            )} –±–æ–ª—å—à–µ –æ—Ç —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è`,
          };

          const showsMessage = await channel.msg(embed);

          const { effect, data } = await whenOwnerMakeDamage;
          UserEffectManager.removeEffect({ effect, user: owner });
          if (!data) {
            embed.description += "\n\n–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å...";
            showsMessage.msg({ ...embed, edit: true });
            return;
          }
          const { baseDamage, damageSourceType } = data;
          const damageDealt = BossManager.makeDamage(
            boss,
            baseDamage * MULTIPLAYER,
            {
              sourceUser: user,
              damageSourceType,
            },
          );
          embed.description += `\n\n–î–æ–∂–¥–∞–ª–∏—Å—å.., ‚Äî –Ω–∞–Ω–æ—Å–∏—Ç ${baseDamage} –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–Ω–∞ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${Utils.damageTypeLabel(
            damageSourceType,
          )}.\n–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ –≤ ${ending(
            MULTIPLAYER,
            "—Ä–∞–∑",
            "",
            "",
            "–∞",
          )} –±–æ–ª—å—à–µ: ${damageDealt} –µ–¥. —É—Ä–æ–Ω–∞`;
          showsMessage.msg({ ...embed, edit: true });
        },
      },
      refrigerator: {
        weight: 100,
        id: "refrigerator",
        description: "–°—Ç—É–∂–∞",
        callback(content) {
          content.attackContext.damageMultiplayer = 0;
        },
        filter: ({ boss }) => Speacial.isSnowQueen(boss),
      },
      preventPositiveEffects: {
        weight: 100,
        id: "preventPositiveEffects",
        description: "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞",
        callback: ({ user, guild }) => {
          const values = {
            influence: [EffectInfluenceEnum.Positive],
            count: 2,
          };
          BossEffects.applyEffect({
            effectId: "boss.preventEffects",
            user,
            guild,
            values,
          });
        },
      },
      forging: {
        weight: 100,
        id: "forging",
        repeats: true,
        description: "–≠—Ñ—Ñ–µ–∫—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è —É—Å–∏–ª–µ–Ω, –æ–±—ã—á–Ω—ã–π —É—Ä–æ–Ω –æ—Å–ª–∞–±–ª–µ–Ω",
        callback: async ({ user, boss, channel, userStats }) => {
          const effect = BossEffects.effectsOf({ boss, user }).find(
            (effect) => effect.values.isLegendaryWearon,
          );
          if (!effect) {
            channel.msg({
              content: `–£–ø—Å, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ö–∞–∫ —Ç–∞–∫?\n–¢–∞–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ –∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å [—Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏](${config.guild.url})`,
            });
            return;
          }

          const effectMultiplayer = 0.2;
          effect.values.multiplayer += effectMultiplayer;
          const damageMultiplayer = 0.95;
          userStats.attacksDamageMultiplayer = +(
            (userStats.attacksDamageMultiplayer ?? 1) * damageMultiplayer
          ).toFixed(3);
        },
        filter: ({ userStats }) => userStats.haveLegendaryWearon,
      },

      seemed: {
        weight: 0,
        id: "seemed",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
        callback: async ({ user, boss, channel, userStats }) => {
          const embed = {
            author: { name: user.username, iconURL: user.avatarURL() },
            description:
              "–£–ø–æ–º—è–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å; –∏–ª–∏ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ 5 000 –∫–æ–∏–Ω–æ–≤, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ—à–µ–ª",
            footer: {
              iconURL: user.avatarURL(),
              text: "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            },
          };

          channel.sendTyping();
          await sleep(2000);

          const response = await question({ message: embed, user, channel });
          if (!response) {
            return;
          }
        },
      },
      andWhoStronger: {
        weight: 5,
        id: "andWhoStronger",
        description: "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
        REACTIONS: {
          FirstByDamage: "1Ô∏è‚É£",
          SecondByDamage: "2Ô∏è‚É£",
          Nothing: "üí†",
        },
        ID_OF_NOTHING_USER: "none",
        EFFECT_ID: "bossManager.attack.events.andWhoStronger",
        userOnCorrectAnswer(user, selected, context) {
          const isSelectedNothing = selected === this.ID_OF_NOTHING_USER;
          isSelectedNothing
            ? addResource({
                user,
                executor: null,
                context,
                source: `bossManager.attack.events.andWhoStronger.userOnCorrectAnswer`,
                value: 1,
                resource: PropertiesEnum.void,
              })
            : addResource({
                user,
                executor: null,
                context,
                source: `bossManager.attack.events.andWhoStronger.userOnCorrectAnswer`,
                value: 50,
                resource: PropertiesEnum.keys,
              });
          user.msg({
            description: `–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ (${this.EFFECT_ID})!\n–ü–æ–ª—É—á–∏—Ç–µ –í–∞—à—É –Ω–∞–≥—Ä–∞–¥—É. –í—Ä–æ–¥–µ –±—ã —ç—Ç–æ 1 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ 50 –∫–ª—é—á–µ–π`,
          });
        },
        async onBossEnd(context) {
          const { boss, mostStrongUser, usersStatsEntries } = context;
          for (const [userId, userStats] of usersStatsEntries) {
            if (this.EFFECT_ID in userStats === false) {
              continue;
            }
            const { id, strongest } = userStats[`${this.EFFECT_ID}`];

            const user = app.client.users.cache.get(userId);
            if (mostStrongUser.id === id) {
              this.userOnCorrectAnswer(user, id, context);
              continue;
            }

            if (
              id === this.ID_OF_NOTHING_USER &&
              !strongest.includes(mostStrongUser.id)
            ) {
              this.userOnCorrectAnswer(user, id, context);
              continue;
            }
          }
        },
        async onSelectWinner(interaction, context) {
          const { participantsContext, userStats, user } = context;
          const { reaction, strongest } = participantsContext;
          const { REACTIONS } = this;
          const INDEXES = {
            [REACTIONS.FirstByDamage]: 0,
            [REACTIONS.SecondByDamage]: 1,
            [REACTIONS.Nothing]: null,
          };
          const emoji = reaction.emoji.name;
          const selectedUser = strongest[INDEXES[emoji]]?.at(0) ?? {
            toString() {
              return "–ù–∏–∫—Ç–æ –∏–∑ –Ω–∏—Ö";
            },
            id: this.ID_OF_NOTHING_USER,
          };
          interaction.msg({
            edit: true,
            author: {
              name: `–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ | ${user.username}`,
              iconURL: user.avatarURL(),
            },
            description: `üòõ?, –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞: ${selectedUser}`,
          });

          userStats[`${this.EFFECT_ID}`] = {
            id: selectedUser.id,
            strongest: strongest.map(([user]) => user.id),
          };
        },
        async onParcitipate(interaction, context) {
          const { boss, guild, user } = context;
          const damageOfEntry = (entry) => entry?.at(1).damageDealt || 0;
          const strongest = Object.entries(boss.users)
            .reduce((acc, entry) => {
              const [first, second] = acc;
              if (damageOfEntry(entry) > damageOfEntry(first)) {
                return [entry, first];
              }
              if (damageOfEntry(entry) > damageOfEntry(second)) {
                return [first, entry];
              }
              return acc;
            }, [])
            .filter(Boolean)
            .map((entry) => [
              guild.members.cache.get(entry[0]),
              damageOfEntry(entry),
            ]);

          const { REACTIONS } = this;
          const reactions = [
            ...[REACTIONS.FirstByDamage, REACTIONS.SecondByDamage].slice(
              0,
              strongest.length,
            ),
            REACTIONS.Nothing,
          ];
          const contents = {
            description:
              "–£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –ª–∏–¥–µ—Ä–∞, —É–≥–∞–¥–∞–π—Ç–µ –∫—Ç–æ –Ω–∞–Ω–µ—Å—ë—Ç –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –∫ –∫–æ–Ω—Ü—É —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ 50 –∫–ª—é—á–µ–π. –ï—Å–ª–∏ –≤—ã –≤–µ—Ä–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–Ω–∏–∫—Ç–æ –∏–∑ –Ω–∏—Ö¬ª –∏, –≤ —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω—É –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:",
            strongest: `**–í–æ—Ç –Ω–∞—à–∏ –ø–µ—Ä–≤–æ—Å–∏–ª–∞—á–∏:**\n${strongest.map(([memb, damage], i) => `${reactions[i]} ${memb.toString()}, ‚Äî ${NumberFormatLetterize(damage)}`).join("\n")}\n${REACTIONS.Nothing} –ù–∏–∫—Ç–æ –∏–∑ –Ω–∏—Ö`,
          };
          const message = await interaction.msg({
            description: `${contents.description}\n${contents.strongest}`,
            author: { name: user.username, iconURL: user.avatarURL() },
            fetchReply: true,
            reactions,
          });

          const participantsContext = {
            message,
            reactions,
            strongest,
          };
          Object.assign(context, { participantsContext });

          const collector = message.createReactionCollector();
          collector.on("collect", async (reaction, _user) => {
            if (_user.id !== interaction.user.id) {
              return;
            }
            participantsContext.reaction = reaction;
            this.onSelectWinner(interaction, context);
            collector.stop();
          });
          collector.on("end", () => message.reactions.removeAll());
        },
        async callback(context) {
          const { user, boss, channel, userStats, guild } = context;
          await sleep(500);
          channel.sendTyping();
          await sleep(5_000);

          const embed = {
            content: ":wave:",
          };

          const preview = await channel.msg(embed);
          await sleep(1_200);

          Object.assign(embed, {
            author: { name: user.username, iconURL: user.avatarURL() },
            title: "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
            description:
              "–ö—Ç–æ —Å–∏–ª—å–Ω–µ–µ? –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∫—Ç–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ª–∏–¥–µ—Ä–æ–≤ —É—Ä–æ–Ω–∞ –ø–æ –±–æ—Å—Å—É –Ω–∞–Ω–µ—Å—ë—Ç –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –∫ –∫–æ–Ω—Ü—É",
            components: justButtonComponents({ label: "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" }),
            edit: true,
          });

          preview.msg(embed);
          const collector = preview.createMessageComponentCollector();

          collector.on("collect", async (interaction) => {
            if (interaction.user.id !== user.id) {
              interaction.msg({
                ephemeral: true,
                content: `–≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${user.username}`,
              });
              return;
            }

            this.onParcitipate(interaction, context);
            collector.stop();
          });

          collector.on("end", async () => {
            preview.msg({ components: [], edit: true });
          });
        },
        filter({ guild, boss, userStats }) {
          return (
            boss.level >= 3 &&
            Object.keys(boss.users).length > 2 &&
            this.EFFECT_ID in userStats === false
          );
        },
      },
      // ______e4example: {
      //   weight: 2,
      //   id: "______e4example",
      //   description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
      //   callback: async ({user, boss, channel, userStats}) => {
      //   }
      // }
    }),
  );

  static BOSS_TYPES = new Collection(
    Object.entries({
      earth: {
        key: "earth",
        type: elementsEnum.earth,
      },
      wind: {
        key: "wind",
        type: elementsEnum.wind,
      },
      fire: {
        key: "fire",
        type: elementsEnum.fire,
      },
      darkness: {
        key: "darkness",
        type: elementsEnum.darkness,
      },
    }),
  );

  static DAMAGE_SOURCES = {
    message: 0,
    attack: 1,
    thing: 2,
    other: 3,
    0: {
      label: "–°–æ–æ–±—â–µ–Ω–∏—è",
      key: "message",
    },
    1: {
      label: "–ü—Ä—è–º—ã–µ –∞—Ç–∞–∫–∏",
      key: "attack",
    },
    2: {
      label: "–®—Ç—É–∫–∞",
      key: "thing",
    },
    3: {
      label: "–î—Ä—É–≥–æ–µ",
      key: "other",
    },
  };

  static USER_DEFAULT_ATTACK_COOLDOWN = HOUR * 2;
  static USER_DEFAULT_ATTACK_DAMAGE = 10;

  static BossShop = AttributesShop;
  static BossEvents = BossEvents;
  static BossRelics = Relics;
  static BossEffects = BossEffects;
  static Speacial = Speacial;
}

export { BossManager, AttributesShop, BossEvents, BossEffects, Speacial };
export default BossManager;
