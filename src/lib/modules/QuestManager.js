import { DataManager } from "#lib/modules/mod.js";
import { Collection } from "discord.js";
import { Actions } from "#lib/modules/ActionManager.js";
import { addResource } from "#lib/util.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";

class QuestManager {
  static generate({ user }) {
    const userQuestField = user.data.quest;

    const questBase = [...this.questsBase.values()]
      .filter((quest) => !quest.isGlobal && !quest.isRemoved)
      .filter((quest) => quest.id !== userQuestField?.id)
      .random({ weight: true });

    const quest = this.generateOfBase({ user, questBase });
    return quest;
  }

  static generateOfBase({ questBase, user, context = {} }) {
    const { baseGoal, maximalGoal, reward } = questBase;
    const calculateGoal = () => {
      const limit = maximalGoal ?? Number.MAX_SAFE_INTEGER;

      const multiplayer =
        1 + (user.voidQuests ?? 0) * 0.15 + (context.goalMultiplayer ?? 0);

      const value = Math.min(
        limit,
        Math.round((Math.random() * baseGoal + baseGoal / 1.5) * multiplayer),
      );
      const rounded = +String(value).replace(/(?!^)\d/g, "0");
      return rounded;
    };

    const calculateReward = (goal) => {
      const multiplayer = 1 + (user.voidQuests ?? 0) * 0.3;
      const difference = goal / baseGoal;
      return difference * reward * multiplayer;
    };

    const quest = {
      id: questBase.id,
      progress: 0,
      goal: calculateGoal(),
      day: DataManager.data.bot.currentDay,
      isCompleted: false,
    };

    quest.reward = calculateReward(quest.goal);

    return quest;
  }

  static init({ user, quest }) {
    const event = new Event(Actions.beforeDailyQuestInit);
    user.action(Actions.beforeDailyQuestInit, { quest, event });
    if (event.defaultPrevented) {
      return;
    }

    this._init({ user, quest });
    user.action(Actions.dailyQuestInit);
    return quest;
  }

  static _init({ user, quest }) {
    user.data.quest = quest;
  }

  static isNeedInstallDailyQuest({ user }) {
    const { currentDay } = DataManager.data.bot;
    const { quest } = user.data;
    return !!(!quest || quest.day !== currentDay);
  }

  static requestInstallDailyQuest({ user }) {
    user.data.quest ||= {};
    user.data.quest.willUpdate = true;
  }

  static checkAvailable({ user }) {
    const needUpdate = this.isNeedInstallDailyQuest({ user });
    if (!needUpdate) {
      return;
    }

    const { quest } = user.data;
    const isExists = !!quest;

    const isCompleted = isExists && quest.isCompleted;
    this.requestInstallDailyQuest({ user });

    this.init({
      user,
      quest: this.generate({ user }),
    });

    if (isExists && !isCompleted) {
      user.action(Actions.dailyQuestSkiped, { quest });
    }
  }

  static onAction({ user, questBase, data }) {
    this.checkAvailable({ user });

    const quest = user.data.quest;
    if (questBase.id === quest.id) {
      const progress =
        questBase.calculateProgressIncrease?.call(
          questBase,
          user,
          quest,
          data,
        ) ?? 1;
      quest.progress += progress;
      this.checkAvailable({ user });

      if (quest.progress >= quest.goal && !quest.isCompleted) {
        this.completeQuest({ user, quest, context: data });
      }
    }

    if (questBase.isGlobal) {
      this.completeGlobalQuest({ user, questBase, context: data });
    }
  }

  static completeGlobalQuest({ user, questBase, context }) {
    if (questBase.isRemoved) {
      return;
    }

    const userData = user.data;
    userData.questsGlobalCompleted ||= "";

    const SEPARATOR = " ";

    const completed = userData.questsGlobalCompleted
      .split(SEPARATOR)
      .filter(Boolean);

    if (completed.includes(questBase.id)) {
      return;
    }

    /** Rewards: */
    const DEFAULT_CHEST_BONUS = 10;

    completed.push(questBase.id);
    userData.questsGlobalCompleted = completed.join(SEPARATOR);

    addResource({
      resource: PropertiesEnum.exp,
      user,
      value: questBase.reward,
      executor: null,
      source: "questManager.onCompleteGlobalQuest",
      context: { questBase, primary: context },
    });
    addResource({
      resource: PropertiesEnum.chestBonus,
      user,
      value: DEFAULT_CHEST_BONUS,
      executor: null,
      source: "questManager.onCompleteGlobalQuest",
      context: { questBase, primary: context },
    });

    const percentOfMade =
      (
        (DataManager.data.users.filter((userData) =>
          userData.questsGlobalCompleted?.includes(questBase.id),
        ).length /
          DataManager.data.users.length) *
        100
      ).toFixed(2) + "%";

    const isSecret = questBase.isSecret;

    const MEDIA_URL =
      "https://media.discordapp.net/attachments/629546680840093696/1047587012665933884/batman-gif.gif";
    user.msg({
      title: `–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ${isSecret ? "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π" : "–≥–ª–æ–±–∞–ª—å–Ω—ã–π"} –∫–≤–µ—Å—Ç\n"${
        questBase.title
      }"!`,
      description: `–û–ø–∏—Å–∞–Ω–∏–µ: "${questBase.description}"\n–û–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ: **${questBase.reward}**\n–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —Å–º–æ–≥–ª–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ${percentOfMade} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n[–Ø –º–æ–ª–æ–¥–µ—Ü.](${MEDIA_URL})`,
    });
  }

  static completeQuest({ user, quest, context }) {
    const DEFAULT_REWARD_MULTIPLAYER = 1.4;
    const DEFAULT_CHEST_REWARD = 4;
    const EXPERIENCE_REWARD_MULTIPLAYER = 3;
    const multiplayer = DEFAULT_REWARD_MULTIPLAYER * quest.reward;

    const userData = user.data;
    const questBase = this.questsBase.get(quest.id);
    const { channel } = context;

    const expReward = Math.round(
      (userData.level + EXPERIENCE_REWARD_MULTIPLAYER) * multiplayer,
    );
    const chestBonusReward = Math.ceil(multiplayer * DEFAULT_CHEST_REWARD) + 1;
    addResource({
      resource: PropertiesEnum.exp,
      user,
      value: expReward,
      executor: null,
      source: "questManager.onCompleteQuest",
      context: { primary: context, channel, quest },
    });
    addResource({
      resource: PropertiesEnum.chestBonus,
      user,
      value: chestBonusReward,
      executor: null,
      source: "questManager.onCompleteQuest",
      context: { primary: context, channel, quest },
    });
    quest.isCompleted = true;

    const MEDIA_URL =
      "https://media.discordapp.net/attachments/629546680840093696/1047584339854118952/slide-5.jpg?width=793&height=594";
    const target = channel ?? user;
    target.msg({
      title: "–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç!",
      description: `–û–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ: **${expReward}**\n–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\n${questBase.description}\n\n[–Ø –º–æ–ª–æ–¥–µ—Ü.](${MEDIA_URL})`,
      author: { iconURL: user.avatarURL(), name: user.username },
    });

    addResource({
      resource: PropertiesEnum.dayQuests,
      user,
      value: 1,
      executor: null,
      source: "questManager.onCompleteQuest",
      context: { primary: context, channel, quest },
    });

    if (userData.dayQuests === 100) {
      user.action(Actions.globalQuest, { name: "day100" });
    }

    if (!(userData.dayQuests % 50)) {
      "seed" in userData
        ? user.msg({
            title: `–í–∞—à ${userData.dayQuests}-–π –∫–≤–µ—Å—Ç ‚Äî –Ω–æ–≤—ã–µ —Å–µ–º–µ—á–∫–∏`,
            description: "üå±",
          })
        : user.msg({
            title: "–£—Ä–∞, –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ —Å–µ–º–µ—á–∫–∏!",
            description:
              "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –¥–≤–∞, –≤—ã–ø–æ–ª–Ω—è—è –∫–∞–∂–¥—ã–π 50-–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç. –ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –µ–≥–æ –ø–æ—Å–∞–¥–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—ë—Ç –∫–ª—É–±–Ω–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∞",
          });

      addResource({
        resource: PropertiesEnum.seed,
        user,
        value: 2,
        executor: null,
        source: "questManager.onCompleteQuest.receiveSeed",
        context: { primary: context, channel, quest },
      });
    }

    user.action(Actions.dailyQuestComplete, {
      quest,
      primary: context,
      channel,
    });
  }

  static questsBase = new Collection(
    Object.entries({
      inviteFriend: {
        id: "inviteFriend",
        title: "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥",
        description: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!",
        isGlobal: true,
        reward: 375,
      },
      setBirthday: {
        id: "setBirthday",
        title: "–û–ø–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä—Ç–∏–∫",
        description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.",
        isGlobal: true,
        reward: 500,
      },
      beEaten: {
        id: "beEaten",
        title: "–ë—ã—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–º",
        description: "–ë—É–¥—å—Ç–µ —Å—ä–µ–¥–µ–Ω—ã!",
        isGlobal: true,
        reward: 300,
      },
      thief: {
        id: "thief",
        title: "–°–µ—Ä–∏—è #7",
        description: "–£—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –∫—Ä–∞–∂—É 7 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.",
        isGlobal: true,
        reward: 377,
      },
      crazy: {
        id: "crazy",
        title: "–†–∞–∑—É–º–Ω–æ-–±–µ–∑—É–º–µ–Ω",
        description:
          "–£–∫—Ä–∞–¥–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ —É–∫—Ä–∞—Å—Ç—å.",
        isGlobal: true,
        isRemoved: true,
        reward: 900,
      },
      day100: {
        id: "day100",
        title: "–ö–≤–µ—Å—Ç–æ-–≤—ã–∂–∏–º–∞–ª–∫–∞",
        description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!",
        isGlobal: true,
        reward: 1175,
      },
      firstChest: {
        id: "firstChest",
        title: "–ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
        description: "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—É–Ω–¥—É–∫ –≤ –∑–Ω–∞–∫ –Ω–∞—Å—Ç—É–ø–∞—é—â–∏—Ö –≤–µ—Å—ë–ª–æ—Å—Ç–µ–π",
        isGlobal: true,
        reward: 200,
      },
      bigHungredBonus: {
        id: "bigHungredBonus",
        title: "–ë–æ–ª—å—à–∞—è —Å—Ç–æ–ø–∫–∞",
        description:
          "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—É–Ω–¥—É–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–æ –º–µ–Ω—å—à–µ–π –º–µ—Ä–µ 99 –∫–ª—é—á–µ–π.",
        isGlobal: true,
        reward: 1002,
      },
      cleanShop: {
        id: "cleanShop",
        title: "–°–Ω–æ–≤–∞ –ø—É—Å—Ç–æ",
        description: "–û–ø—É—Å—Ç–æ—à–∏—Ç–µ –ª–∞–≤–∫—É –≤—Å–µ–≥–æ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.",
        isGlobal: true,
        reward: 961,
      },
      completeTheGame: {
        id: "completeTheGame",
        title: "–í –∫–æ–Ω—Ü–µ-–∫–æ–Ω—Ü–æ–≤",
        description:
          "–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–∏–∑—Ä–∞–∫–∞ ‚Äî –ø–æ–∑–Ω–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –∫—É—Å–æ—á–µ–∫ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∫–æ–Ω—Ü–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
        isGlobal: true,
        reward: 0,
      },
      cloverInstability: {
        id: "cloverInstability",
        title: "–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏",
        description: "–ü—Ä–∏–∑–Ω–∞–π—Ç–µ—Å—å, –≤—ã —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ \\‚úî",
        isGlobal: true,
        reward: 900,
      },
      firstTimeKillBoss: {
        id: "firstTimeKillBoss",
        title: "–î–æ–±–µ–π—Ç–µ –±–æ—Å—Å–∞",
        description: "–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—ã–ª–æ —Å–ª–æ–∂–Ω–æ..?",
        isGlobal: true,
        reward: 200,
      },
      killBossAlone: {
        id: "killBossAlone",
        title: "–ö–æ—Ä–æ–Ω–∞ –±–æ—Å—Å–∞",
        description: "–ü–æ–±–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –æ–¥–∏–Ω–æ—á–∫—É",
        isGlobal: true,
        isSecret: true,
        emoji: "üëë",
        key: "bossCrown",
        reward: 1_200,
      },
      coolingSenses: {
        id: "coolingSenses",
        title: "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤",
        description:
          "–ü—Ä–æ–º–µ–Ω—è–π—Ç–µ –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –Ω–∞ –∫—É—á–∫—É –º–æ–Ω–µ—Ç –∏ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—Ä–æ—Å—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–¥–Ω–∞–∫–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç.",
        isGlobal: true,
        isSecret: true,
        emoji: "‚ùÑÔ∏è",
        key: "voidIce",
        reward: 30,
      },

      onlyCoin: {
        id: "onlyCoin",
        handler: "coinFromMessage",
        description: "–í—ã–±–µ–π—Ç–µ –∫–æ–∏–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π",
        _weight: 1,
        isGlobal: false,
        reward: 1.2,
        baseGoal: 1,
        max: 1,
      },
      messagesFountain: {
        id: "messagesFountain",
        handler: "messageCreate",
        description: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        _weight: 10,
        isGlobal: false,
        reward: 1.5,
        baseGoal: 30,
      },
      messagesBigFountain: {
        id: "messagesBigFountain",
        handler: "messageCreate",
        description: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        _weight: 1,
        isGlobal: false,
        reward: 4,
        baseGoal: 280,
      },
      likeTheFriend: {
        id: "likeTheFriend",
        handler: "likedTheUser",
        description: "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É!",
        _weight: 10,
        isGlobal: false,
        reward: 1,
        baseGoal: 1,
      },
      praiseMe: {
        id: "praiseMe",
        handler: "userPraiseMe",
        description: "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –≤–∞—Å –ø–æ—Ö–≤–∞–ª—è—Ç",
        _weight: 7,
        isGlobal: false,
        reward: 1,
        baseGoal: 1,
        max: 2,
      },
      namebot: {
        id: "namebot",
        handler: "callBot",
        description: "–ù–∞–∑–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –≥–ª—É–ø—ã–º",
        _weight: 7,
        isGlobal: false,
        reward: 1,
        baseGoal: 2,
        max: 2,
      },
      berryActive: {
        id: "berryActive",
        handler: "berryBarter",
        description: "–ö—É–ø–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–π—Ç–µ –∫–ª—É–±–Ω–∏–∫—É",
        _weight: 10,
        isGlobal: false,
        reward: 1,
        baseGoal: 2,
        calculateProgressIncrease(user, quest, data) {
          return Math.abs(data.quantity);
        },
      },
    }),
  );

  static questIsGlobalBased(questResolable) {
    const questBase = this.resolveQuestBase(questResolable);
    return questBase.isGlobal;
  }

  static questIsDailyBased(questResolable) {
    const questBase = this.resolveQuestBase(questResolable);
    return !questBase.isGlobal;
  }

  static questIsRemoved(questResolable) {
    const questBase = this.resolveQuestBase(questResolable);
    return questBase.isRemoved;
  }

  static questIsSecret(questResolable) {
    const questBase = this.resolveQuestBase(questResolable);
    return questBase.isSecret;
  }

  static resolveQuestBase(questResolable) {
    const id =
      typeof questResolable === "string" ? questResolable : questResolable.id;
    return this.questsBase.get(id) ?? null;
  }
}

export default QuestManager;
