import { transformToCollectionUsingKey } from "#bot/util.js";
import { Emoji } from "#constants/emojis.js";
import CurseManager from "#lib/modules/CurseManager.js";
import DataManager from "#lib/modules/DataManager.js";
import { PropertiesEnum } from "#lib/modules/Properties.js";
import { sleep } from "#lib/safe-utils.js";
import { addResource } from "#lib/util.js";
import { justButtonComponents } from "@zoodogood/utils/discordjs";

export const PRE_PHRASES = [
  () => "–≠—Ç–∞ –º—É–∑—ã–∫–∞ –Ω–µ —Å–ø–µ—à–∏—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è :notes:",
  () => "–•–æ-—Ö–æ-—Ö–æ :robot:",
  () =>
    "**–•–æ-—Ö–æ-—Ö–æ, @everyone, –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫–ª—è—Ç–∏–µ –∑–∏–º–Ω–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ :snowflake: !**",
];
export const SNOWFLAKES_TO_PRESENT = 200;

export function initSnowyEventIn(guild) {
  return (guild.data.snowyEvent = { preGlowExplorers: [], isArrived: true });
}

export function checkAvailableIn(_guild) {
  const [day, month] = DataManager.data.bot.dayDate.split(".");
  const STARTS_AT = 20;
  const ENDS_AT = 31;
  const MONTH = 12;
  return month === MONTH && day >= STARTS_AT && day <= ENDS_AT;
}

export function getSnowyEventIn(guild) {
  return guild.data.snowyEvent;
}

export function getOrInitSnowyEventIn(guild) {
  return getSnowyEventIn(guild) || initSnowyEventIn(guild);
}

export async function onGetCoinsFromMessage({ user, message }) {
  if (!getSnowyEventIn(guild)) {
    return;
  }
  const { guild } = message;
  if (!guild) {
    return;
  }

  const snowyEvent = getOrInitSnowyEventIn(guild);

  if (snowyEvent.preGlowExplorers.length < PRE_PHRASES.length) {
    if (snowyEvent.preGlowExplorers.includes(user.id)) {
      return;
    }
    message.react("üå≤");
    snowyEvent.preGlowExplorers.push(user.id);
    message.channel.sendTyping();

    await sleep(2_500);
    const content = PRE_PHRASES.at(snowyEvent.preGlowExplorers.length - 1)();
    message.channel.msg({
      reference: message.id,
      content,
    });
    return;
  }

  const userData = user.data;
  if (userData.curses?.some((curse) => curse.id === "happySnowy")) {
    return;
  }

  message.react("üå≤");
  const curseBase = CurseManager.cursesBase.get("happySnowy");
  const curse = CurseManager.generateOfBase({
    curseBase,
    user,
    context: { message, guild },
  });
  CurseManager.init({ curse, user });
  return;
}

export function getPresentsList() {
  return transformToCollectionUsingKey([
    {
      weights: 5,
      key: "lollipop",
      async callback(context) {
        const { user } = context;
        const { CommandUtil } = (await import("#folder/commands/bag.js"))
          .default;
        CommandUtil.addResourceAndMoveToBag({
          resource: PropertiesEnum.lollipops,
          user,
          context,
          executor: user,
          value: 1,
          source: "curseManager.events.happySnowy.presents.lollipop",
        });
      },
      emoji: Emoji.lollipops,
      description:
        "–õ–µ–¥–µ–Ω–µ—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–¥–µ–Ω–µ—Ü –≤ —Å—É–º–∫–µ !bag use lollipop, —á—Ç–æ–±—ã –ø—Ä–∏–∑–≤–∞—Ç—å –±–æ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
    },
    {
      weights: 15,
      key: "snowyTree",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.snowyTree,
          user,
          context,
          executor: user,
          value: 1,
          source: "curseManager.events.happySnowy.presents.snowyTree",
        });
      },
      emoji: Emoji.snowyTree,
      description:
        "–°–∏–º–≤–æ–ª –¥–µ—Ä–µ–≤–æ - —ç–º–±–ª–µ–º–∞. –≠—Ç–æ—Ç —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –µ—â—ë –Ω–∞–¥–æ–ª–≥–æ",
    },
    {
      weights: 5,
      key: "presentsPack",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.presents,
          user,
          context,
          executor: user,
          value: 3,
          source: "curseManager.events.happySnowy.presents.presentsPack",
        });
      },
      emoji: Emoji.presentsPack,
      description: "–ö–æ—Ä–æ–±–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤. –£–∂–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ ‚Äî —Ç—Ä–∏ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ",
    },
    {
      weights: 15,
      key: "bonuses",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.chestBonus,
          user,
          context,
          executor: user,
          value: 90,
          source: "curseManager.events.happySnowy.presents.bonuses",
        });
      },
      emoji: Emoji.chestBonus,
      description: "90 —Å—É–Ω–¥—É–∫–æ–≤. –í –ø–æ–¥–∞—Ä–∫–µ –±—ã–ª–æ 90 —Å—É–Ω–¥—É–∫–æ–≤",
    },
    {
      weights: 20,
      key: "multiVoid",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.void,
          user,
          context,
          executor: user,
          value: 3,
          source: "curseManager.events.happySnowy.presents.multiVoid",
        });
      },
      emoji: Emoji.void,
      description: "3 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏. –í –ø–æ–¥–∞—Ä–∫–µ –±—ã–ª–æ 3 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
    },
    {
      weights: 10,
      key: "snowyQuote",
      async callback(context) {
        context.provideComponents(
          justButtonComponents([
            {
              label: "–ß–∏—Ç–∞—Ç—å",
            },
          ]),
        );

        context.onComponent = async (interaction) => {
          const { getNewYearQuote } = await import("#lib/getNewYearQuote.js");
          await sleep(1000);
          interaction.msg({
            description: getNewYearQuote(),
            footer: {
              text: "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤–∑—è—Ç—ã –æ—Ç—Å—é–¥–∞: https://citaty.info/topic/novyi-god, –æ–Ω–∏ —Ç–∞–∫ –∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –ø–æ API",
            },
          });

          context.componentsCollector.stop();
        };
      },
      emoji: Emoji.plain_scroll,
      description:
        "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è —Ü–∏—Ç–∞—Ç–∞. –ë–æ—Ç —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏—Ç–∞—Ç",
    },
    {
      weights: 20,
      key: "coins",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.coins,
          user,
          context,
          executor: user,
          value: 9_000,
          source: "curseManager.events.happySnowy.presents.coins",
        });
      },
      emoji: Emoji.coins,
      description: "9 000 –∫–æ–∏–Ω–æ–≤. –í –ø–æ–¥–∞—Ä–∫–µ 9 000 –∫–æ–∏–Ω–æ–≤",
    },
    {
      weights: 10,
      key: "oneVoid",
      callback(context) {
        const { user } = context;
        addResource({
          resource: PropertiesEnum.void,
          user,
          context,
          executor: user,
          value: 1,
          source: "curseManager.events.happySnowy.presents.oneVoid",
        });
      },
      emoji: Emoji.void,
      description: "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!",
    },
  ]);
}
