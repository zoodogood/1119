import { ErrorData, ErrorsHandler } from "#lib/modules/ErrorsHandler.js";
import {
  ButtonStyle,
  ComponentType,
  TextInputStyle,
} from "discord-api-types/v10";
import { CreateModal } from "@zoodogood/utils/discordjs";
import {
  objectToLocaleDeveloperString,
  resolveGithubPath,
  uid,
} from "#lib/util.js";
import Path from "path";
import config from "#config";
import client from "#bot/client.js";

class UserInterfaceUtil {
  static async sendErrorInfo({
    channel,
    error,
    interaction = {},
    primary = null,
    description = "",
  }) {
    const { fileOfError, strokeOfError, stack } =
      ErrorData.prototype.parseErrorStack.call(
        { error },
        { node_modules: false },
      ) ?? {};

    if (stack?.length >= 1900) {
      stack.length = 1900;
    }

    const components = [
      {
        type: ComponentType.Button,
        style: ButtonStyle.Secondary,
        label: "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç",
        customId: "getErrorInfo",
        emoji: "„ÄΩÔ∏è",
      },
      {
        type: ComponentType.Button,
        style: ButtonStyle.Link,
        label: "–í Github",
        url: resolveGithubPath(
          Path.relative(process.cwd(), fileOfError ?? "."),
          strokeOfError,
        ),
        disabled: !fileOfError,
      },
      {
        type: ComponentType.Button,
        style: ButtonStyle.Success,
        label: "–°–æ–æ–±—â–µ–Ω–∏–µ",
        customId: "setAddableInformationForError",
      },
      {
        type: ComponentType.Button,
        style: ButtonStyle.Success,
        label: "–ö–æ–Ω—Ç–µ–∫—Å—Ç",
        customId: "readPrimaryContext",
        disabled: !primary,
      },
    ];
    const embed = {
      title: "‚Äî –î–∞–Ω–Ω—ã–µ –æ–± –ø–∞–Ω–∏–∫–µ üôÑ",
      description: `> ${error.message}\n\n${description}`,
      color: "#d8bb40",
      components,
      reference: interaction.message?.id ?? null,
    };
    const message = await channel.msg(embed);

    const context = {
      error,
      stack,
      interaction,
      channel,
      description,
      primary,
    };

    const collector = message.createMessageComponentCollector({
      time: 3_600_000,
    });
    collector.on("collect", async (interaction) =>
      this.onComponent({ interaction, context }),
    );
    collector.on("end", () => message.edit({ components: [] }));
    return { context, message };
  }

  static onComponent({ interaction, context }) {
    this.components[interaction.customId].call(this, {
      interaction,
      context,
    });
  }

  static components = {
    getErrorInfo({ interaction, context }) {
      const { stack } = context;
      interaction.msg({
        ephemeral: true,
        content: `\`\`\`js\n${stack}\`\`\``,
      });
    },
    async setAddableInformationForError({ interaction, context }) {
      const modalId = `review-${uid()}`;
      const components = [
        {
          type: ComponentType.TextInput,
          customId: `${modalId}-content`,
          style: TextInputStyle.Paragraph,
          label: "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ",
          required: true,
          maxLength: 1_000,
          value: "–≠—Ç–æ –±–µ—Ç–∞-—Ñ—É–Ω–∫—Ü–∏—è –∏ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º",
          placeholder: "–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
        },
      ];

      const modal = CreateModal({
        components,
        customId: modalId,
        title: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
      });

      interaction.showModal(modal);

      const response = await interaction
        .awaitModalSubmit({
          filter: (interaction) => interaction.customId === modalId,
          time: 300_000,
        })
        .catch(() => {});

      if (!response) {
        return;
      }

      const responseText = response.fields.getField(`${modalId}-content`).value;

      const StatusEnum = {
        Dang: "dang",
        Urge: "urge",
        Desi: "desi",
        Quie: "quie",
      };

      const options = [
        {
          label: "–û–ø–∞—Å–Ω–æ",
          value: StatusEnum.Dang,
          description: "–ò–º–µ–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
        },
        {
          label: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ",
          value: StatusEnum.Urge,
        },
        {
          label: "–ú–µ—à–∞–µ—Ç",
          value: StatusEnum.Desi,
          description: "–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–≥—Ä–∞–¥–æ–π",
        },
        {
          label: "–ñ–∏–≤—ë—Ç —Å–µ–±–µ —Å–ø–æ–∫–æ–π–Ω–æ",
          value: StatusEnum.Quie,
          description: "–≠—Ç—É –æ—à–∏–±–∫—É –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏",
        },
      ];
      (async () => {
        const message = await response.msg({
          ephemeral: true,
          content: `–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—à–∏–±–∫–µ, –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ <${config.guild.url}>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É`,
          fetchReply: true,
          placeholder: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ",
          components: [
            {
              type: ComponentType.StringSelect,
              customId: `${modalId}-select`,
              options,
            },
          ],
        });

        const selectionInteract = await message
          .awaitMessageComponent({ time: 120_000 })
          .catch(() => {});

        if (!selectionInteract) {
          message.delete();
          return;
        }

        const { error } = context;
        const group = ErrorsHandler.getErrorsGroupBy(error.message);
        group.addComment({ responseText, id: interaction.user.id });

        selectionInteract.msg({
          edit: true,
          content: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
          components: [],
        });

        client.channels.cache.get(config.guild.logChannelId).msg({
          title: `–î–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—à–∏–±–∫–∏ —Å —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é ${
            options.find(({ value }) => value === selectionInteract.values[0])
              .label
          }\n\`\`\`${error.message}\`\`\``,
          description: responseText,
          color: "#d8bb40",
          footer: { text: interaction.user.id },
        });
      })();
      return;
    },

    async readPrimaryContext({ interaction, context }) {
      const DEEP = 1;
      const description = objectToLocaleDeveloperString(context.primary, DEEP);
      interaction.msg({
        title: "–ß–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
        description,
      });
    },
  };
}

function sendErrorInfo(...params) {
  return UserInterfaceUtil.sendErrorInfo(...params);
}

export { UserInterfaceUtil as ErrorUserInterfaceUtil, sendErrorInfo };
