

class Event {
	run(isLost){
		let next = new Date(Date.now() + 14500000).setHours(20, 0, 0) - Date.now();
		if (isLost){
			return TimeEventsManager.create("day-stats", next);
		}

		client.guilds.cache.filter(e => e.data.treeLevel).each(guild => {
			let messagesNeed = (  [0, 70, 120, 180, 255, 370, 490, 610, 730, 930, 1270, 1500, 1720, 2200, 2700, 3200, 3700, 4500, 5200, 6000, 10000][guild.data.treeLevel] + (guild.memberCount * 3) + ((guild.data.day_average || 0) / 5)  ) * ("treeMisstakes" in guild.data ? 1 - 0.1 * guild.data.treeMisstakes : 1);
			// –°–µ–∑–æ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
			messagesNeed = Math.floor(messagesNeed / 3);

			if (guild.data.day_msg < messagesNeed){
			guild.data.treeMisstakes = (guild.data.treeMisstakes ?? 0) + 0.2 + Number( (1 - guild.data.day_msg / messagesNeed).toFixed(1) );
			guild.data.misstake = messagesNeed;

			if (guild.data.treeMisstakes >= 4){
				delete guild.data.treeMisstakes;
				guild.data.treeLevel--;
			}

			return;
			}

			guild.data.treeMisstakes = (guild.data.treeMisstakes ?? 0) - 0.2;

			if (guild.data.treeMisstakes <= 0)
			delete guild.data.treeMisstakes;


		});

		client.guilds.cache.forEach(guild => {
			let data = guild.data;
			let msgs = data.day_msg || 0;

			let misstake = data.misstake;
			delete data.misstake;

			guild.data.coins += 2 * guild.memberCount;

			data.days = data.days + 1 || 1;
			data.msg_total = data.msg_total + msgs || msgs;


			let description = `–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${Util.ending(msgs, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è")}\n–†–µ–∫–æ—Ä–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.day_max || (data.day_max = 0)}`;

			if (data.days > 3) {
			description += `\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${Math.letters(data.msg_total)}\n–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å: ${Math.round(data.msg_total / data.days)}`;
			}

			if (data.day_max < msgs) {
			data.day_max = msgs;
			description += `\n–ì–∏–ª—å–¥–∏—è ${["<a:jeqery:768047102503944202>", "<a:jeqeryBlue:806176327223738409>", "<a:jeqeryPurple:806176181140848660>", "<a:jeqeryGreen:806176083757105162>", "<a:jeqeryRed:806175947447205958>", "<a:blockPink:794615199361400874>", "<a:blockAqua:794166748085223475>"].random()} —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º!`;
			}


			data.day_msg = 0;

			if (!msgs){
			return;
			// description = ["–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–°–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–æ", "–ó–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å –Ω–∏ –æ–¥–∏–Ω —Å–º–µ—Ä—Ç–Ω—ã–π –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–æ—Ö–æ–∂–µ, —Ç–∏—à–∏–Ω–∞ ‚Äî –≤—Ç–æ—Ä–æ–µ –∏–º—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"].random();
			}

			if (misstake)
			description += `\n\n–î–µ—Ä–µ–≤–æ –∑–∞—Å—ã—Ö–∞–µ—Ç! –ï–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞ ${ Util.ending(misstake - msgs, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") } –±–æ–ª—å—à–µ üíß`;

			guild.chatSend({ title: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", description });
		});



		client.guilds.cache.filter(e => e.data.professions).each(guild => {
			let workers = new Set();
			let costs = 0;
			let entries = Object.entries(guild.data.professions);
			if (!entries.length){
			delete guild.data.professions;
			return;
			}


			entries = entries.filter(([id]) => guild.roles.cache.get(id) ? true : delete guild.data.professions[id]);

			guild.members.cache.each(memb => {
			entries.forEach(([id, cost]) => memb.roles.cache.has(id) ? workers.add(memb) && (costs += +cost) : false);
			});
			if (guild.data.coins < costs){
			guild.logSend({title: `–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`, description: `–í –∫–∞–∑–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–∏–Ω–æ–≤, –ª–∏—à—å ${guild.data.coins}, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è ${costs} <:coin:637533074879414272>`, color: "#ffff00"});
			return;
			}

			[...workers].forEach(memb => {
			entries.forEach(([id, cost]) => memb.roles.cache.has(id) ? memb.user.data.coins += +cost : false);
			});
			guild.data.coins -= costs;
			guild.logSend({title: `–ë—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`, description: `–° –∫–∞–∑–Ω—ã –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω–æ ${Util.ending(costs, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ò—Ö —Å–ø–∏—Å–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ \`!–±–∞–Ω–∫\`\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–æ –∫–æ–∏–Ω—ã: ${workers.size}`});

		});

		client.guilds.cache
			.each((guild) => BossManager.beforeApparance(guild));


		return TimeEventsManager.create("day-stats", next);
	}

	options = {
		name: "TimeEvent/day-stats"
	}
}

export default Event;