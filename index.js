console.clear();

import 'dotenv/config';

import Discord, { EmbedBuilder } from 'discord.js';

import * as Util from '#src/modules/util.js';
import { Template, DataManager, BossManager, CurseManager, TimeEventsManager, CommandsManager, QuestManager, ActionManager, CounterManager } from '#src/modules/mod.js';
import { CreateMessage } from '@zoodogood/utils/discordjs';

import { Partials } from 'discord.js';


const client = new Discord.Client({ messageCacheMaxSize: 110, intents: [3276799], partials: [Partials.Message, Partials.Channel, Partials.Reaction] });

DataManager.setClient(client);
BossManager.setClient(client);


import FileSystem from "fs";
import fetch from "node-fetch";
import { VM } from "vm2";
import { assert } from 'console';
import { Actions } from '#src/modules/ActionManager.js';





client.on("ready", async () => {
  client.guilds.cache.forEach(async guild => guild.invites = await guild.invites.fetch().catch(() => {}));

  if (process.env.DEVELOPMENT === "TRUE") {
    client.user.setActivity("–ö–∞–±–∑–µ—Ü —Ç–µ–±–µ, –•–æ–∑—è–∏–Ω", {type: "STREAMING", url: "https://www.twitch.tv/monstercat"});
  }
  else {
    client.user.setActivity("–Ω–∞–º–∞–Ω–∞", {type: "WATCHING"});
  }




//----------------------------------{Events and intervals--}------------------------------                            #0bf


  client.on("messageCreate", async message => {
    if (message.author.bot) {
      return;
    }

    message.author.action(Actions.messageCreate, message);

    eventHundler(message);
    const commandContext = CommandsManager.parseInputCommandFromMessage(message);
    const command = commandContext?.command;
    if (commandContext && CommandsManager.checkAvailable(command, commandContext)){
      CommandsManager.execute(command, commandContext);
    }
  });

  client.on("inviteCreate", async (invite) => {
    let guild = invite.guild;
    guild.invites = await guild.invites.fetch();
  });

  client.on("inviteDelete", async (invite) => {
    //let guild = invite.guild;
  });

  client.on("guildCreate", async (guild) => {
    let members = guild.members.cache.filter(e => !e.user.bot);
    let whoAdded = await guild.Audit(e => e.target.id === client.user.id, {type: "BOT_ADD"});
    whoAdded = whoAdded ? whoAdded.target : null;

    const DEVELOPER_CHAT_ID = "763637440174227506";
    const developerChat = client.channels.cache.get(DEVELOPER_CHAT_ID);
    const title = `–ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${ guild.name }!`;
    developerChat.msg({title, description: `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${ members.size }\n–ö–æ–ª-–≤–æ –∑–Ω–∞–∫–æ–º—ã—Ö –±–æ—Ç—É –ª—é–¥–µ–π: ${members.filter(member => DataManager.data.users.some(user => user.id === member.id)).size}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞?: ${whoAdded && guild.members.resolve(whoAdded) ? "–î–∞" : "–ù–µ—Ç"}.`, footer: {text: `–°–µ—Ä–≤–µ—Ä–æ–≤: ${client.guilds.cache.size}`}});
    guild.invites = await guild.invites.fetch();
    DataManager.data.bot.newGuildTimestamp = Date.now();
  });

  client.on("guildDelete", async (guild) => {
    client.users.cache.get("921403577539387454").msg({title: `–ë–æ—Ç–∞ –∑–∞–±–∞–Ω–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}!`});
  })

  client.on("messageReactionAdd", async (reaction, user) => {

    if (reaction.emoji.name === "üëç"){
      const target = (await reaction.message.resolve())
        .author;

      user.action(Actions.likedTheUser, {target, likeType: "reaction", reaction});
    }

    const guildData = client.guilds.cache.get(reaction.message.guildId);

    let msg = reaction.message;
    let rolesReactions = ReactionsManager.reactData.find(el => el.id == msg.id);
    if (!rolesReactions) return;
    switch (rolesReactions.type) {
      case "reactor":
        rolesReactions = rolesReactions.reactions;

        let role = String(rolesReactions[reaction.emoji.id || reaction.emoji.name]);
        if (!role){
          break;
        }
        role = reaction.message.guild.roles.cache.get(role);
        if (!role) {
          reaction.message.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞", color: "#ff0000", delete: 7000});
          reaction.remove();
          return;
        }
        reaction.message.guild.members.resolve(user).roles.add(role);
        break;
    }
  });

  client.on("messageReactionRemove", async (reaction, user) => {
    let msg = reaction.message;
    let rolesReactions = ReactionsManager.reactData.find(el => el.id == msg.id);
    if (!rolesReactions) return;
    switch (rolesReactions.type) {
      case "reactor":
        rolesReactions = rolesReactions.reactions;

        let role = String(rolesReactions[reaction.emoji.id || reaction.emoji.name]);
        role = reaction.message.guild.roles.cache.get(role);
        if (!role) reaction.message.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞", color: "#ff0000", delete: 7000});
        reaction.message.guild.members.resolve(user).roles.remove(role);
        break;
    }
  });

  client.on("guildMemberAdd", async (e) => {
    let guild = e.guild;
    let roles;

    let leaveRoles = guild.data.leave_roles && guild.data.leave_roles[e.user.id];
    if (leaveRoles){
      roles = leaveRoles.map(el => guild.roles.cache.get(el)).filter(el => el);
      e.roles.add(roles);
      delete guild.data.leave_roles[e.user.id];

      leaveRoles = true;
    }

    if (e.user.bot) {
      let whoAdded = await guild.Audit(audit => audit.target.id === e.id, {type: "BOT_ADD"});
      let permissions = e.permissions.toArray().map(e => Command.permissions[e]).join(", ") || "–û—Ç—Å—É—Å—Ç–≤—É—é—Ç";
      guild.logSend({title: "–î–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç", author: {iconURL: e.user.avatarURL(), name: e.user.tag}, description: `–ù–∞–∑–≤–∞–Ω–∏–µ: ${e.user.username}\n${e.user.flags.has("VERIFIED_BOT") ? "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω üëå" : "–ï—â—ë –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚ùó"}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: \`–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\`\n\n${whoAdded ? `–ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª: ${whoAdded.executor.username}` : ""}`, footer: {text: `–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞: ${permissions[0] + permissions.slice(1).toLowerCase()}`}});
      return;
    }

    const guildInvites = await guild.invites.fetch();
    const old = guild.invites;
    guild.invites = guildInvites;
    const invite = guildInvites.find(i => old.get(i.code).uses < i.uses);


    if (invite){
      const inviter = invite.inviter;
      guild.logSend({title: "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!", description: "–ò–º—è: " + e.user.tag + "\n–ò–Ω–≤–∞–π—Ç–Ω—É–ª: " + inviter.tag + "\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " + invite.uses, footer: {text: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: "}, timestamp: invite.createdTimestamp});

      if (e.id !== inviter.id)
        inviter.action(Actions.globalQuest, {name: "inviteFriend"});

      inviter.data.invites = (inviter.data.invites ?? 0) + 1;
    }





    if (guild.data.hi && guild.data.hiChannel){
      let channel = guild.channels.cache.get(guild.data.hiChannel);
      if (!channel) {
        return;
      }

      channel.startTyping();
      await Util.sleep(3500);
      await channel.msg({title: "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!", color: guild.data.hi.color, image: guild.data.hi.image, description: guild.data.hi.message, scope: {tag: e.user.toString(), name: e.user.username}});
      channel.stopTyping();
      channel.msg({content: "üëã", delete: 150000});

      if (guild.data.hi.rolesId && !leaveRoles){
        roles = guild.data.hi.rolesId.map(el => guild.roles.cache.get(el)).filter(el => el);
        // let attempts = 0;
        // let acceptedRules = false;
        // while (attempts < 100){
        //   if (e.roles.cache.find(e => e.name === "everyone")){
        //     acceptRules = true;
        //     break;
        //   }
        //   await Util.sleep(3000);
        // }
        //
        // if (acceptedRules)
        e.roles.add(roles);
      }
    }
  });

  client.on("guildMemberRemove", async (e) => {
    if (!e.guild.data.leave_roles) {
      e.guild.data.leave_roles = {};
    }
    e.guild.data.leave_roles[e.user.id] = Array.from(e.roles.cache.keys());

    let banInfo = (  await e.guild.Audit(audit => audit.target.id === e.id, {limit: 50, type: "MEMBER_BAN_ADD"})  ) || (  await e.guild.Audit(audit => audit.target.id === e.id, {limit: 50, type: "MEMBER_KICK"})  );
    const reason = () => banInfo.reason ? `\n–ü—Ä–∏—á–∏–Ω–∞: ${banInfo.reason}` : "";

    const name = `–ò–º—è: ${ e.user.tag }${ e.user.bot ? " BOT" : "" }`;

    const message = banInfo ?
      {content: `–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª ${banInfo.action == "MEMBER_KICK" ? "–∫–∏–∫–Ω—É—Ç" : "–∑–∞–±–∞–Ω–µ–Ω"}`, description: `${ name }\n–í—ã–≥–Ω–∞–≤—à–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞: ${e.guild.members.resolve(banInfo.executor).displayName} ${ JSON.stringify(reason()).slice(0, 1000) }`} :
      {content: "–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä", description: `${ name }\n–ù–∞–¥–µ–µ–º—Å—è, –æ–Ω —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë—Ç—Å—è`};

    e.guild.logSend({title: message.content, description: message.description, color: banInfo ? "ff0000" : "00ff00"});
  });

  client.on("guildMemberUpdate", async (old, memb) => {
    let nameEdited = memb.user.data.name != memb.user.username || old.displayName != memb.displayName;
    if (nameEdited){
      let inGuild = memb.user.data.name === memb.user.username;
      let names = inGuild ? {old: old.displayName, new: memb.displayName} : {old: memb.user.data.name, new: memb.user.username};
      const title = `–ù–æ–≤–æ–µ –∏–º—è: ${ names.new }`;
      memb.guild.logSend({title, author: {name: inGuild ? "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑–º–µ–Ω–∏–ª—Å—è\n–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "–£—á–∞—Å—Ç–Ω–∏–∫ –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º", iconURL: memb.user.avatarURL()}, footer: {text: `–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º: ${names.old}`}});

      if (!inGuild){
        memb.user.data.name = memb.user.username;
      }
      return;
    }

    if (old.roles.cache.size !== memb.roles.cache.size){
      let isRemoved = old.roles.cache.size - memb.roles.cache.size > 0;
      let role = isRemoved ? old.roles.cache.find(e => !memb.roles.cache.get(e.id)) : memb.roles.cache.find(e => !old.roles.cache.get(e.id));

      client.emit("guildMemberRolesUpdate", memb, role, isRemoved);
    }
  });

  client.on("guildMemberRolesUpdate", async (memb, role, isRemoved) => {
    if (role.id === memb.guild.data.mute_role){
      mute(memb, isRemoved);

      let executor = await memb.guild.Audit(audit => audit.target.id === memb.id, {type: "MEMBER_ROLE_UPDATE"});
      if (!executor){
        return;
      }
      executor = executor.executor;

      if (executor.id === client.user.id){
        return;
      }

      let embed = {
        title: isRemoved ? "–ú—É—Ç —Å–Ω—è—Ç" : "–£—á–∞—Å—Ç–Ω–∏–∫—É –≤—ã–¥–∞–Ω –º—É—Ç",
        description: isRemoved ? `–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–Ω—è—Ç–∞ —Ä–æ–ª—å –º—É—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∞—è –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–∞—Ö.` : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${memb.toString()} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å –º—É—Ç–∞ ‚Äî —ç—Ç–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö`,
        author: { name: memb.displayName, iconURL: memb.user.displayAvatarURL() },
        footer: { text: `–ú—É—Ç ${isRemoved ? "—Å–Ω—è–ª" : "–≤—ã–¥–∞–ª"} ${executor.username}`, iconURL: executor.avatarURL() }
      }

      memb.guild.logSend(embed);
    }
  });

  client.on("userUpdate", async (old, user) => {
    if (old.avatar === user.avatar){
      return;
    }
    user.guilds.forEach(guild => guild.logSend({title: `${guild.members.resolve(user).displayName} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä`, author: {name: user.username, iconURL: user.avatarURL({dynamic: true})}, description: "", footer: {text: "–°—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä", iconURL: old.displayAvatarURL({dynamic: true})}}));
  });

  process.on("unhandledRejection", error => {
      if (error.message == "Cannot execute action on a DM channel") return console.error("Cannot in DM: " + error.method);
      if (error.message == "Unknown Message") return;
      console.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 1");
	    console.error(error);
  });

  process.on("SIGINT", e => {
    console.info("\n   –ó–ê–í–ï–†–®–ï–ù–ò–ï...\n");
    DataManager.file.write();
    TimeEventsManager.file.write();
    process.exit(1);
  })

  // to-do: Fix for Discord.js V14
  client.on("interactionCreate", async interaction => {

    

    if (interaction.data.custom_id !== "bot_hi" && interaction.data.name !== "help")
      return;



    client.api.interactions(interaction.id, interaction.token).callback.post({data: {
        type: 4,
        data: {
          content: "",
          embeds: [{
            title: interaction.type == 2 ? "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:" : "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description: interaction.type === 2 ? `–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ \`!commandInfo¬†<–Ω–∞–∑–≤–∞–Ω–∏–µ¬†–∫–æ–º–∞–Ω–¥—ã>\`\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –≤–æ–ø—Ä–æ—Å—ã [<https://greenghost>](https://discord.gg/76hCg2h7r8)` : "–ó–∞—á–µ–º —É–¥–∞–ª–µ–Ω–æ, –ø–æ—á–µ–º—É —É–¥–∞–ª–µ–Ω–æ, —á—Ç–æ –±—ã–ª–æ –±—ã –µ—Å–ª–∏ –±—ã –≤—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–º–µ–ª–æ –ª–∏ —ç—Ç–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª...?",
            author: {
              name: interaction.member.user.username,
              icon_url: client.rest.cdn.Avatar(interaction.member.user.id, interaction.member.user.avatar)
            },
            color: 65280
          }]
        }
      }});


    if (interaction.type != 2){
      let message = await client.guilds.cache.get(interaction.guild_id).channels.cache.get(interaction.channel_id).messages.fetch(interaction.message.id);
      message.delete();
      return;
    }

    let
      guild    = client.guilds.cache.get(interaction.guild_id),
      channel  = guild.channels.cache.get(interaction.channel_id),
      author   = guild.members.cache.get(interaction.member.user.id).user,
      message  = {channel, author},

      command  = interaction.data.name.toLowerCase(),
      args     = interaction.data.options;

      message = Object.assign(Object.create(Discord.Message.prototype), message);

       if (command === 'help'){
         commands.help.code(message, {});
      }
  })

  console.info(`\n\n\n     Ready...\n\n`);


  TimeEventsManager.handle();
});



//----------------------------------{Functions--}------------------------------                            #0f0





async function msg(options, ..._devFixParams){
  if (_devFixParams.length > 0){
    console.log(message, options);
    throw new Error("Incorrect message input. Need to fix!");
  }

  options.color ||= process.env.DEVELOPMENT === "TRUE" ? "#000100" : "#23ee23";

  const messageResolable = CreateMessage(options);
  const target = this instanceof Discord.Message && !options.edit ? this.channel : this;
  
  const message = await (
    options.edit ? target.edit(messageResolable) : target.send(messageResolable)
  );


  if (options.delete){
    setTimeout(() => message.delete(), options.delete);
  }

  if (options.reactions){
    options.reactions.filter(Boolean).forEach(react => message.react(react));
  }

  return message;
};



//---------------------------------{Functions from events--}------------------------------                            #ff0



async function commandHundler(msg){
  


  // if (!cmd && msg.guild){
  //   if (!(cmd = msg.guild.data.commands) || !cmd[command]) return false;
  //   return Command.CustomCommand(msg, command, args);
  // }


  // if (cmd.cooldown) {
  //   user["CD_" + cmd.id] = Math.max(user["CD_" + cmd.id] || 0, Date.now()) + cmd.cooldown;
  // }
  // try {

  //   if (channelType !== "dm") {
  //     msg.guild.data.commandsUsed[cmd.id] = (msg.guild.data.commandsUsed[cmd.id] ?? 0) + 1;
  //   }
  //   DataManager.data.bot.commandsUsed[cmd.id] = (DataManager.data.bot.commandsUsed[cmd.id] ?? 0) + 1;
  // }
  // catch (error) {
  //   const timestamp = Date.now();
  //   let err = {
  //     name: error.name,
  //     stroke: error.stack.match(/js:(\d+)/)[1],
  //     command,
  //     message: error.message,
  //     timeFromStart: timestamp - msg.createdTimestamp < 1000 ? "–º–µ–Ω–µ–µ 1—Å" : Util.timestampToDate(timestamp - msg.createdTimestamp)
  //   };
  //   console.error(error);
  //   console.error(err);

  //   if (error.name == "DiscordAPIError") return;
  //   let quote,
  //     message   = await msg.msg({title: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÑ", color: "#f0cc50", delete: 180000}),
  //     react     = await message.awaitReact({user: "any", type: "full", time: 180000}, "„ÄΩÔ∏è");

  //   while (react){
  //     quote = ["–°–∞–º–æ–π –±–æ–ª—å—à–æ–π –æ—à–∏–±–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–æ—è–∑–Ω—å –æ—à–∏–±–∞—Ç—å—Å—è.", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–æ–∏ –¥–æ –±–æ–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ –≥—Ä–∞–±–ª–∏, –¥–∞–≤–Ω–µ–Ω—å–∫–æ —è –Ω–∞ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—É–ø–∞–ª.", "–ê –≤–µ–¥—å –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞—é—Ç –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏.", "–ß–µ–ª–æ–≤–µ–∫—É —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ –æ—à–∏–±–∞—Ç—å—Å—è, –∞ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî —Å–≤–∞–ª–∏–≤–∞—Ç—å —Å–≤–æ—é –≤–∏–Ω—É –Ω–∞ –¥—Ä—É–≥–æ–≥–æ.", "–ö–æ–≥–¥–∞ –Ω–µ–ø—Ä–∏—è—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫—É, –Ω–µ —Å–ª–µ–¥—É–µ—Ç –µ–º—É –º–µ—à–∞—Ç—å. –≠—Ç–æ –Ω–µ–≤–µ–∂–ª–∏–≤–æ.", "–•–≤–∞—Ç–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏, –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–æ–≤—ã–µ!"].random();
  //     message.msg({title: "–£–ø—Å... –ú—ã –∫–∞–∂–µ—Ç—Å—è –Ω–∞–∫–æ—Å—è—á–∏–ª–∏ üò∂", color: "#f0cc50", description: `**–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:**\n‚Ä¢ **–ò–º—è:** ${error.name}\n‚Ä¢ **–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:** #${err.stroke}\n‚Ä¢ **–¢–µ–∫—Å—Ç:** \n\`\`\`\n${error.message}\n·Ö†\`\`\`\n\n‚Ä¢ **–ö–æ–º–∞–Ω–¥–∞:** \`!${command}\`\n‚Ä¢ **–í—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã:** ${err.timeFromStart}`, footer: {text: quote}, delete: 12000});
  //     await Util.sleep(10000);
  //     react = await message.awaitReact({user: "any", type: "full", time: 180000}, "„ÄΩÔ∏è");
  //   }
  //   message.delete();
  // }
}

async function eventHundler(msg){
  let
    author = msg.author,
    user   = author.data,
    server = (msg.guild) ? msg.guild.data : {};

  // ANTI-SPAM
  author.CD_msg = Math.max( author.CD_msg || 0 , Date.now()) + 2000;

  // 120000 = 8000 * 15
  if (Date.now() + 120000 > author.CD_msg){
    author.CD_msg += (8000 - 200 * (user.voidCooldown ?? 0));

    if (Util.random(1, 85 * 0.90 ** user.voidCoins) === 1){
      getCoinsFromMessage(user, msg);
    }

    user.exp++;
    if (user.exp >= user.level * 45) {
      levelUp(user, msg);
    }

    server.day_msg++;
  }
  user.last_online = Date.now();


  if (server.boss && server.boss.isArrived){
    BossManager.onMessage.call(BossManager, msg);
  }

  if (msg.mentions.members){
    let mention = msg.mentions.members.first();
    if (mention) happy_BDay(msg, mention);
  }

  if (msg.content.toLowerCase().match(/((—É—Ö—É–µ–ª—å|–≥–ª—É–ø—ã–π|—Ç—É–ø–æ–π|–¥—É—Ä–Ω–æ–π|–±–µ–∑–¥–∞—Ä–Ω—ã–π) –±–æ—Ç)|(–±–æ—Ç (—É—Ö—É–µ–ª—å|–≥–ª—É–ø—ã–π|—Ç—É–ø–æ–π|–¥—É—Ä–Ω–æ–π|–±–µ–∑–¥–∞—Ä–Ω—ã–π))/i)) stupid_bot(user, msg);
  if (msg.content.toLowerCase().match(/((–∫–ª–∞—Å—Å–Ω—ã–π|—É–º–Ω—ã–π|—Ö–æ—Ä–æ—à–∏–π|–º–∏–ª—ã–π) –±–æ—Ç)|(–±–æ—Ç (–∫–ª–∞—Å—Å–Ω—ã–π|—É–º–Ω—ã–π|—Ö–æ—Ä–æ—à–∏–π|–º–∏–ª—ã–π))/i)) good_bot(user, msg);

  if (!msg.guild) return;
  if (msg.guild.data.chatFilter) filterChat(msg);
}

async function getCoinsFromMessage(user, msg){
  msg.author.action(Actions.coinFromMessage, {channel: msg.channel});

  let reaction = "637533074879414272";
  let k = 1;

  if (DataManager.data.bot.dayDate == "31.12"){
    reaction = "‚ùÑÔ∏è";
    k += 0.2;
  }

  if (msg.guild && "cloverEffect" in msg.guild.data) {
    reaction = "‚òòÔ∏è";
    let multiplier = 0.08 + (0.07 * ((1 - 0.9242 ** msg.guild.data.cloverEffect.uses) / (1 - 0.9242)));
    multiplier *= 2 ** (user.voidMysticClover ?? 0);
    k += multiplier;
    msg.guild.data.cloverEffect.coins++;
  }
  let coins = Math.round((35 + (user.coinsPerMessage ?? 0)) * k);
  user.coins += coins;
  user.chestBonus = (user.chestBonus ?? 0) + 5;

  let react = await msg.awaitReact({user: msg.author, type: "full", time: 20000}, reaction);

  if (!react) {
    return;
  }

  const messageContent = `> –£ –≤–∞—Å ${ Util.ending(user.coins, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} <:coin:637533074879414272>!\n> –ü–æ–ª—É—á–µ–Ω–æ ${coins}\n> –ë–æ–Ω—É—Å —Å—É–Ω–¥—É–∫–∞: ${user.chestBonus || 0}`
  msg.msg({content: messageContent, delete: 2500});
};

async function levelUp(user, msg){
  let level = user.level;
  while (user.exp >= user.level * 45){
    user.exp -= user.level * 45;
    user.level++;
    user.exp += user.level * 45 - Math.ceil(user.level * 45 * (0.97716 ** user.voidRituals));
  }
  let textContent = user.level - level > 2 ? `**${msg.author.username} –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å ${ level } –¥–æ ${ user.level }!**` : `**${ msg.author.username } –ø–æ–ª—É—á–∞–µ—Ç ${user.level} —É—Ä–æ–≤–µ–Ω—å!**`;
  let message = await msg.msg({content: textContent});
  if (msg.channel.id != msg.guild.data.chatChannel) {
    message.delete({timeout: 5000});
  }
};

async function stupid_bot(user, msg) {
  if (msg.channel.type == "dm")
    return;

  msg.author.action(Actions.callBot, {msg, channel: msg.channel, type: "stupid"});

  if (!msg.guild.data.stupid_evil) {
    msg.guild.data.stupid_evil = 1;
    TimeEventsManager.create("cooledBot", 900000, [msg.guild.id]);
  }
  if (msg.guild.data.stupid_evil > 37) {
    return;
  }

  msg.channel.startTyping();
  await Util.sleep(2000);
  switch (msg.guild.data.stupid_evil) {
    case 1: msg.msg({content: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"});
    break;
    case 2: msg.msg({content: "-_-"});
    break;
    case 3: msg.msg({content: "-_-'"});
    break;
    case 5: msg.msg({content: "–°–∞–º–∏ –≤—ã –≥–ª—É–ø—ã–µ!"});
    break;
    case 9: msg.msg({content: "–î–ê –ù–ï –ë–û–ú–ë–ò–¢ –£ –ú–ï–ù–Ø1!!"});
    break;
    case 21: msg.msg({content: "üñï"}).then(async msg => {
      msg.react("‚ùï");
      msg.react("üáµ");
      msg.react("üáÆ");
      msg.react("üá©");
      msg.react("üá¥");
      msg.react("üá∑");
      await Util.sleep(5000);
      msg.reactions.removeAll();
    });
    break;
    case 22: msg.msg({content: "–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å, –ø–æ–¥—É–º–æ–π –¥—É–º–æ–π —Å–≤–æ–µ—é. –ù–µ —Å–¥–µ–ª–∞–ª, –∏ –Ω–µ —Å–¥–µ–ª–∞—é, –Ω–∏—á–µ–≥–æ –ø–ª–æ—Ö–æ–≥–æ —è —Ç–µ–±–µ. –û—Å—Ç–∞–≤—å —ç—Ç—É –∑–∞—Ç–µ—é, –ß–µ–ª–æ–≤–µ–∫. –†–∞–¥—É–π—Å—è —Å–æ–ª–Ω—Ü—É, –∑–µ–º–ª–µ. –ù–µ –æ–±–∏–¥—å —Å–ª–æ–≤–æ–º –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–æ–µ–≥–æ"});
    break;
    case 34: msg.msg({content: "–ß–µ–ª –Ω—É —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –∑–∞–¥—Ä–∞–ª"});
    break;
    case 35: msg.msg({content: "**(‚ïØ>‚ñ°<'Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª**\n–ù-–´-–ê #### –ù–´–´–ê –ù–´–´–ê –ù–´–´–ê–ê–ê–ê–ê–ê"});
      client.user.setStatus("dnd");
      setTimeout(() => client.user.setStatus("online"), 300000);
    break;
    default: msg.msg({content: "..."})
  }
  msg.channel.stopTyping();
  msg.guild.data.stupid_evil++;
};

async function mute(member, off = false){
  let guild = member.guild;

  if (off === true){
    guild.channels.cache.each(async channel => {
      await channel.permissionOverwrites.edit(member, {SEND_MESSAGES: null, ADD_REACTIONS: null, SPEAK: null});
      let {allow, deny} = channel.permissionOverwrites.get(member.id) || {allow: {}, deny: {}};

      if (allow.bitfield === 0 && deny.bitfield === 0)
        channel.permissionOverwrites.get(member.id).delete();

    });
    return;
  }

  guild.channels.cache.each(async channel => {
    // let pastPermissions = channel.permissionOverwrites.get(memb.id);
    // let {allow, deny} = pastPermissions || {};
    await channel.permissionOverwrites.edit(member, {
      SEND_MESSAGES: false,
      ADD_REACTIONS: false,
      SPEAK: false
    });
  });

}

function good_bot(user, msg){
  if (random(1)) msg.react("üç™");
  msg.author.action(Actions.callBot, {msg, channel: msg.channel, type: "good"});
}


function filterChat(msg){
  let content = msg.content;
  content = content.replace(/\\/g, "");


  let abuse = ["–ª–æ—Ö", "–ø–∏–¥–æ—Ä", "—Ö—É–µ—Å–æ—Å", "–±–ª—è—Ç—å", "—Å—É–∫–∞", "–Ω–∞—Ö—É–π", "—Ö—É–π", "–∂–æ–ø–∞", "–≥–æ–≤–Ω–æ", "–µ–±–∞—Ç—å", "–¥–µ–±–∏–∫", "–Ω–∞—Ö", "–±–ª—è", "–∏–¥–∏–æ—Ç", "fuck", "fucking"];
  if ( content.toLowerCase().split(" ").some(e => abuse.includes(e)) ) {

    if (msg.channel.nsfw === true){
      return false;
    }

    msg.delete();
    abuse.forEach(word => {
      msg.content = msg.content.replace( RegExp(`(?<=${word[0]})${word.slice(1)}`, "gi"), e => "#".repeat(e.length) );
    });

    msg.author.msg({title: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É!", description: `–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${ msg.content }`});
    msg.guild.logSend({title: "–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º", description: `–¢–µ–∫—Å—Ç: ${msg.content}`, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}});
    return true;
  }



  let capsLenght = content.split("").filter(e => e.toLowerCase() != e).length;
  if (capsLenght > 4 && capsLenght / content.length > 0.5){

    let isAdmin = msg.guild && !msg.guild.members.resolve(msg.author).wastedPermissions(8)[0];
    if (isAdmin){
      return false;
    }

    msg.delete();
    msg.author.msg({title: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç CAPS-LOCK!", description: `–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${  msg.content }`});
    msg.guild.logSend({title: "–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ö–ê–ü–°–ê", description: `–¢–µ–∫—Å—Ç: ${msg.content}`, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}});
    return true;
  }


}



//---------------------------------{#Prototypes--}------------------------------                            #f00



Discord.User.prototype.msg = msg;
Discord.Message.prototype.msg = msg;
Discord.BaseChannel.prototype.msg = msg;
Discord.Webhook.prototype.msg = msg;
Discord.WebhookClient.prototype.msg = msg;


Discord.Message.prototype.awaitReact = async function(options, ...reactions){
  if (!options.user) throw new Error("without user");
  reactions = reactions.filter(e => e);

  if (!reactions.length){
    return false;
  }

  let filter = (reaction, member) => member.id === options.user.id && reactions.includes(reaction.emoji.id || reaction.emoji.name);
  if (options.user == "any") filter = (reaction, member) => member.id != client.user.id && reactions.includes(reaction.emoji.id || reaction.emoji.name);

  let collected = this.awaitReactions({ filter, max: 1, time: options.time || 300000 })
    .then(reaction => collected = reaction);

  for (let i = 0; i < reactions.length; i++) {
    if (collected instanceof Promise == false){
      if (options.type != "all") reactions.slice(i).forEach(this.react);
      break;
    }
    this.react(reactions[i]);
  }

  collected = await collected;
  let reaction = collected.first();

  if (!reaction) {
    return this.reactions.cache.filter(e => e.me).each(e => e.remove()), false;
  }

  if (options.type == "all")    this.reactions.removeAll();
  if (options.type == "one")    reaction.users.remove(options.user);
  if (options.type == "full")   reaction.remove();

  return reaction.emoji.id || reaction.emoji.name;
}

Discord.BaseChannel.prototype.awaitMessage = async function(options){
  const user = options.user;

  const filter = message => (user === false && !message.author.bot) || message.author.id === user.id;
  const collector = await this.awaitMessages({filter, max: 1, time: options.time || 100_000});

  const input = collector.first();
  if (input && options.remove){
    input.delete();
  }
  return input;
}

Discord.GuildMember.prototype.wastedPermissions = function(bit, channel){
  if (this.user.id === "921403577539387454") return false;
  let permissions = channel ? channel.permissionsFor(this).missing(bit) : this.permissions.missing(bit);
  return permissions[0] ? permissions : false;
}

Discord.Guild.prototype.chatSend = async function(message){
  let id = this.data.chatChannel;
  if (!id) {
    return false;
  }

  let channel = this.channels.cache.get(id);
  if (!channel) {
    delete this.data.chatChannel;
    return;
  }

  return await channel.msg(message);
}

Discord.Guild.prototype.logSend = async function(message){
  let id = this.data.logChannel;
  if (!id) {
    return false;
  }

  let channel = this.channels.cache.get(id);
  if (!channel) {
    delete this.data.logChannel;
    return;
  }

  return await channel.msg(message);
}

Discord.Guild.prototype.Audit = async function(find = false, {limit = 3, before = null, user = null, type = null}){
  const audit = await this.fetchAuditLogs({limit, before, user, type});
  let auditLog = find ? audit.entries.find(find) : audit.entries.first();
  if (!audit){
    return null;
  }
  return auditLog;
}

Array.prototype.random = function({pop, weights} = {}){
  let index;
  if (weights) {
    let last = 0;
    let limites = this.map((e, i) => last = e._weight + last);

    let rand = Math.random() * limites.at(-1);
    index = limites.findIndex(e => e >= rand);
  }
  else index = Math.floor(Math.random() * this.length);

  let input = this[index];
  if (pop) this.splice(index, 1);
  return input;
}


Array.prototype.sortBy = function(property, reverse){
  const func = reverse ?
    ((a, b) => b[property] - a[property]) :
    ((a, b) => a[property] - b[property]) ;

  return this.sort(func);
}




Math.letters = function(numb){

  let
    missing = "",
    small_i = 0,
    i = 0,
    a = 99999,
    words = "K M B T q Q s S O N d U D z Z x X c C v V ! @ # $ / % ^ & *".split(" ");

    if (numb < a) return String(numb);

  while (numb > 99999999999999999999 ) {
    small_i++;
    numb = Math.floor(numb / 10);
  }

  numb = String(numb);

  while (numb > a){
    a = a * Math.pow(10, 3) + 999;
    i++;
  }

  if (small_i % 3 == 1) missing += numb[3];
  else if (small_i % 3 == 2) missing += numb[3] + numb[4];

  if (i != 0) numb = numb.slice(0, -(i * 3));

  i += Math.floor(small_i / 3);

  numb += missing;
  while (numb.length > 5) {
    numb = numb.slice(0, -3);
    i++;
  }

  if (words[i]) if (i != 0) numb += words[i - 1];
  else numb += `e+${i*3}`;
  return numb;
}


Object.defineProperty(Discord.User.prototype, "guilds", {get(){
  let guilds = client.guilds.cache.filter(guild => guild.members.cache.get(this.id));
  return [...guilds.values()];
}});



//---------------------------------{#Classes--}------------------------------                            #0f0




class Command {
  constructor(code, opt, allias){

    this.code = code;
    this.id   = Command.cmds = (++Command.cmds || 1);

    this.removeCallMessage    = opt.delete                || false;
    this.expectMention        = opt.memb                  || false;
    this.inDM                 = !opt.dm                   || true;
    this.expectParams         = opt.args                  || false;
    this.hidden               = opt.hidden                || false;
    this.cooldown             = opt.cooldown * 1000       || 0;
    this.cooldownTry          = opt.cooldownTry           || 1;
    // >                      = opt >-<                   ||
    this.type                 = opt.type
    this.myPermissions        = opt.myPermissions
    this.myChannelPermissions = opt.myChannelPermissions
    this.Permissions          = opt.Permissions
    this.ChannelPermissions   = opt.ChannelPermissions

    

    this.allias =  allias;

    this.options = Util.omit(this, (k) => !["code", ""].includes(k));

    if (allias) setTimeout(() => this.allias.split(" ").forEach(item => commands[item] = this), 50);
    return this;
  }

  onChatInput(message, context){
    this.code(message, context);
  }

  get name(){
    return Object.entries(commands).find(([k, v]) => v.id === this.id)[0];
  }

  static get(id){
    return Object.values(commands).find(command => command.id == id);
  }

  static permissions = {
    "SPEAK": "–ì–æ–≤–æ—Ä–∏—Ç—å",
    "MUTE_MEMBERS": "–û—Ç–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–∏–∫—Ä–æ—Ñ–æ–Ω",
    "CONNECT": "–ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è",
    "DEAFEN_MEMBERS": "–ó–∞–≥–ª—É—à–∞—Ç—å",
    "VIEW_CHANNEL": "–í–∏–¥–µ—Ç—å –∫–∞–Ω–∞–ª—ã",
    "EMBED_LINKS": "–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏",
    "ATTACH_FILES": "–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
    "BAN_MEMBERS": "–ë–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "MANAGE_ROLES": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏",
    "KICK_MEMBERS": "–ö–∏–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "MANAGE_EMOJIS": "–£–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏",
    "MENTION_EVERYONE": "–£–ø–æ–º–∏–Ω–∞—Ç—å –≤—Å–µ—Ö",
    "MANAGE_GUILD": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º",
    "ADD_REACTIONS": "–î–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏",
    "USE_VAD": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Ü–∏–∏",
    "MOVE_MEMBERS": "–ü–µ—Ä–µ–º–µ—â–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "SEND_MESSAGES": "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
    "MANAGE_CHANNELS": "–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏",
    "PRIORITY_SPEAKER": "–ë—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º",
    "MANAGE_WEBHOOKS": "–£–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±—Ö—É–∫–∞–º–∏",
    "CHANGE_NICKNAME": "–ò–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º",
    "MANAGE_NICKNAMES": "–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏",
    "MANAGE_MESSAGES": "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
    "ADMINISTRATOR": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "SEND_TTS_MESSAGES": "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å TTS —Å–æ–æ–±—â–µ–Ω–∏—è",
    "VIEW_AUDIT_LOG": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
    "CREATE_INSTANT_INVITE": "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    "READ_MESSAGE_HISTORY": "–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π",
    "USE_EXTERNAL_EMOJIS": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —ç–º–æ–¥–∑–∏",
    "VIEW_GUILD_INSIGHTS": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞"

  }

  static async CustomCommand(msg, name, args){
    const guildData = DataManager.getGuild(msg.guild.id);
    let cmd = guildData.commands[name];

    if (Date.now() < cmd[msg.author.id + "_CD"]) return msg.msg({title: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ " + Util.timestampToDate(cmd[msg.author.id + "_CD"] - Date.now()), delete: 3000});
    else cmd[msg.author.id + "_CD"] = Date.now() + cmd.cooldown;
    cmd = Object.assign({}, cmd);

    const code = async (msg) => {
      let embed = {scope: {args: args, command: name}};

      if (cmd.title) {
        embed.description = cmd.message;
        cmd.message = cmd.title;
        embed.color = cmd.color;
      }
      else embed.embed = true;

      if (!cmd.message) {
        delete guildData.commands[name];
        return;
      }
      msg.msg(cmd.message, embed);
    }

    try {
      if (cmd.delete) msg.delete();
      await code(msg).catch(e => {throw e});
    }
    catch (e) {
      console.error(e);
      let timestamp = Date.now();
      let message = await msg.msg({title: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÑ", color: "#f0cc50", delete: 180000});
      let react = await message.awaitReact({user: "any", type: "full", time: 180000}, "„ÄΩÔ∏è");
      let quote;
      while (react){
        quote = ["–°–∞–º–æ–π –±–æ–ª—å—à–æ–π –æ—à–∏–±–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–æ—è–∑–Ω—å –æ—à–∏–±–∞—Ç—å—Å—è.", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–æ–∏ –¥–æ –±–æ–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ –≥—Ä–∞–±–ª–∏, –¥–∞–≤–Ω–µ–Ω—å–∫–æ —è –Ω–∞ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—É–ø–∞–ª.", "–ê –≤–µ–¥—å –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞—é—Ç –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏.", "–ß–µ–ª–æ–≤–µ–∫—É —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ –æ—à–∏–±–∞—Ç—å—Å—è, –∞ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî —Å–≤–∞–ª–∏–≤–∞—Ç—å —Å–≤–æ—é –≤–∏–Ω—É –Ω–∞ –¥—Ä—É–≥–æ–≥–æ.", "–ö–æ–≥–¥–∞ –Ω–µ–ø—Ä–∏—è—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫—É, –Ω–µ —Å–ª–µ–¥—É–µ—Ç –µ–º—É –º–µ—à–∞—Ç—å. –≠—Ç–æ –Ω–µ–≤–µ–∂–ª–∏–≤–æ.", "–•–≤–∞—Ç–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏, –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–æ–≤—ã–µ!"].random();
        let errorContext = `**–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:**\n‚Ä¢ **–ò–º—è:** ${e.name}\n‚Ä¢ **–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:** #${e.stack.match(/js:(\d+)/)[1]}\n	‚Ä¢ **–¢–µ–∫—Å—Ç:** \n\`\`\`\n${e.message}\n·Ö†\`\`\`\n\n‚Ä¢ **–ö–æ–º–∞–Ω–¥–∞:** \`!${command}\`\n‚Ä¢ **–í—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã:** ${Util.timestampToDate(timestamp - msg.createdTimestamp) || "0—Å"}`
        message.msg({title: "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É .-.", color: "#f0cc50", description: errorContext, footer: {text: quote}, delete: 12000});
        await Util.sleep(10000);
        react = await message.awaitReact({user: "any", type: "full", time: 180000}, "„ÄΩÔ∏è");
      }
      message.delete();
    }
  }
}





class ReactionsManager {

  static path = "./data/reactions.json";
  
  constructor (id, channel, guild, type, reactions){
    let reactionObject = {id, channel, guild, type, reactions};
    let isExists = ReactionsManager.reactData.find(e => e.id == id);
    if (isExists){
      Object.assign(isExists, reactionObject);
    }
    else {
      ReactionsManager.reactData.push(reactionObject);
    }
    FileSystem.writeFileSync(this.constructor.path, JSON.stringify(ReactionsManager.reactData), (err, input) => false);
    ReactionsManager.reactData = ReactionsManager.getMain();
  }

  static reactData = [];

  static async readFile(){
    // const { default: data } = await import(this.path, {assert: {type: "json"}});
    //return data;
  }

  static async getMain(){
    const data = await ReactionsManager.readFile()
    return data.map( react => (({id, type, reactions}) => ({id, type, reactions}))(react) );
  }

  static async handle(){
    let reactions = [];
    const reactionsData = await ReactionsManager.readFile();
    for (const data of reactionsData){
      const {guild: guildId, channel: channelId, id: messageId} = data;

      const guild = client.guilds.cache.get(guildId);
      const channel = guild.channels.cache.get(channelId);
      let message = await channel.messages.fetch(messageId);
      if (!message){
        continue;
      }
      return reactions.push(data);
    }

    FileSystem.writeFileSync(this.path, JSON.stringify(reactions), (err, input) => false);
    ReactionsManager.reactData = ReactionsManager.getMain();
  }
  
  static async loadReactionsFromFile(){
    ReactionsManager.reactData = await ReactionsManager.getMain();
  }
}





class GuildVariablesManager {
  constructor (guildId) {
    let guild = DataManager.getGuild(guildId);
    guild.variables ||= {};
    this.variables = guild.variables;
    return this;
  }

  setGuild (name, value){
    if (value.trim.match(/^(?:\+|\-)\d+$/)){
      value = (this.variables.guild[name] || 0) + value;
    }

    return this.variables.guild[name] = value;
  }

  getGuild(name){
    return this.variables.guild[name];
  }

  set (id, name, value = "0"){
    if (name.match(/[^a-z–∞-—è—ó—ë_$]/i)){
      // –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      return {err: 1};
    }
    this.variables[id] || (this.variables[id] = {});

    if (!this.variables[id][name] && Object.keys(this.variables[id]) >= 19){
      // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
      return {err: 2};
    }



    if (value.trim().match(/^(?:\+|\-)\d+$/)){
      value = (this.variables[id][name] || 0) + value;
    }
    this.variables[id][name] = value;
    return {id, name, value};
  }

  get (id, name){
    if (!this.variables[id]){
      return {id, name, value: "[–ø—É—Å—Ç–æ]"};
    }

    let value = this.variables[id][name];
    value = value === undefined ? "[–ø—É—Å—Ç–æ]" : value;
    return {id, name, value};
  }

  list () {
    let list = {};
    this.toArray.map(e => e.values).forEach(e => e.forEach(([name, value]) => name in list ? list[name]++ : list[name] = 1));
    return list;
  }

  top (name) {
    let list = this.toArray.map(e => [e.id, e.values.find(([k, v]) => k == name)]).filter(e => e[1]);
    return list.sortBy("1");
  }

  search (name) {
    let list = {};
    this.toArray.forEach(e => e.values.some(([k, value]) => k == name ? list[e.id] = value : false));
    return list;
  }

  remove (name, id = false) {
    if (id) {
      return delete this.variables[id][name];
    }
    let counter = 0;
    this.toArray.forEach(e => e.values.some(([k]) => k == name ? (counter++, delete this.variables[e.id][k]) : false));
    return counter;
  }

  get toArray() {
    return Object.entries(this.variables).map(([key, value]) => ({id: key, values: Object.entries(value)}));
  }
}









//---------------------------------{#Objects--}------------------------------



const commands = {
  delete: new Command(async (msg, interaction) => {
    if (!interaction.params) {
      return;
    }

    msg.msg({description: "–≠—Ç–∞ –±–æ–Ω—É—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –Ω–∞—Å :green_heart: \n–•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏—Ö? [**–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å!**](https://www.youtube.com/watch?v=MX-CO5i5S9g)"});
  }, {name: "delete", cooldown: 5, cooldownTry: 2, type: "other"}, "—É–¥–∞–ª–∏—Ç—å —É–¥–∞–ª–∏"),

  send: new Command(async (msg, interaction) => {
    const content = await new Template().replaceAll(interaction.params);
    await msg.msg({content: `**${ content }**`});

    msg.guild?.logSend({title: `${ msg.author.username }:`, description: `\n!c ${ interaction.params }`});
  }, {args: true, delete: true, myChannelPermissions: 8192, type: "other"}, "—Å c —Å–µ–Ω–¥ s template —à–∞–±–ª–æ–Ω"),

  user: new Command(async (msg, interaction) => {
    

    const
      target = (interaction.params) ? interaction.mention || client.users.cache.get(interaction.params) || msg.author : msg.author,
      member = (msg.guild) ? msg.guild.members.resolve(target) : null,
      user   = target.data,
      guild  = msg.guild;

      Object.assign(interaction, {
        currentCurseView: 0,
  
        rank: {
          position: null,
          members: guild ?
            guild.members.cache.map(m => m.user)
              .filter(user => !user.bot)
              .filter(user => user.data.level > 1)
            : null
        },
        
        status: null,
        embedColor: user.profile_color || "Random",
        controller: {
          message: null,
          editEmbed: false,
          reactions: ["640449832799961088"]
        }
        
      });


      if (guild && member === undefined){
        msg.msg({title: "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", color: "#ff0000", delete: 9000});
        return;
      }


      if (member && user.level > 1) {
        interaction.rank.position = interaction.rank.members
          .sort((b, a) => (a.data.level != b.data.level) ? a.data.level - b.data.level : a.data.exp - b.data.exp)
          .indexOf(target) + 1;
      }

      if (
        member.presence.status != "offline" ||
        target === msg.author
      ) {
        interaction.status = "<:online:637544335037956096> –í —Å–µ—Ç–∏";
      }
      else {
         const lastOnline = Date.now() - (user.last_online ?? 0);
         const getDateContent = () => (31556926000000 < lastOnline) ? "–±–æ–ª–µ–µ –≥–æ–¥–∞" : (lastOnline > 2629743000) ? "–±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞" : Util.timestampToDate(lastOnline);
         const dateContent = user.profile_confidentiality ? "" : getDateContent();
         interaction.status = `<:offline:637544283737686027> –ù–µ –≤ —Å–µ—Ç–∏ ${ dateContent }`;
      }

      QuestManager.checkAvailable({ user: msg.author });


      const createEmbedAtFirstPage = async () => {
        const description = `–ö–æ–∏–Ω–æ–≤: **${ Math.letters(user.coins) }**<:coin:637533074879414272> \n <a:crystal:637290417360076822>–£—Ä–æ–≤–µ–Ω—å: **${user.level || 1}** \n <:crys:637290406958202880>–û–ø—ã—Ç: **${user.exp || 0}/${(user.level || 1) * 45}**\n\n ${interaction.status}\n`

        const embed = {
          title: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          author: {
            name: `#${ member ? member.displayName : target.username }`,
            iconURL: target.avatarURL({dynamic : true})
          },
          color: interaction.embedColor,
          edit: interaction.controller.editEmbed,
          description,
          fields: [{name: " ·†å", value: " ·†å"}],
          footer: {text: `–ü–æ—Ö–≤–∞–ª: ${user.praiseMe?.length || "0"}   ${interaction.rank ? `–†–∞–Ω–≥: ${interaction.rank.position ?? 0}/${ interaction.rank.members.length }` : ""}`},
        }

        

        if (user.profile_description){
          const about = await new Template().replaceAll(user.profile_description, msg);
          embed.fields.push({name: "–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ·†å", value: about});
        }
          
        if (member){
          const secretAchievements = [{emoji: "üëë", property: "crown"}, {emoji: "‚ùÑÔ∏è", property: "voidIce"}]
            .filter(({property}) => property in user);

          const achiementContent = secretAchievements.at(-1) ? secretAchievements.random().emoji + " " : "";
          embed.fields.push({name: " ·†å·†å", value: "\n**" + `${ achiementContent }${ member.roles.highest }**\n·Ö†`});
        }

        if (!target.bot){
          const quest = user.quest;
          const questBase = QuestManager.questsBase.get(quest.id);
          const value = quest.isCompleted ? " ‚Äì –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω" : `${ questBase.description } ${ quest.progress }/${ quest.goal }`;
          embed.fields.push({name: "\n–ö–≤–µ—Å—Ç:", value});
        }

        if (user.curses && user.curses.length){
          const content = user.curses.map(curse => `„Éª${ curse.values.progress || 0 }/${ curse.values.goal }`).join("; ");
          embed.fields.push({name: "·†å·†å", value: `–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∫–ª—è—Ç–∏—è: ${ content }`});
        }
        
        return embed;
      }


      const createEmbedAtSecondPage = async () => {
        const footer = member ?
          {text: `–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å ${new Intl.DateTimeFormat("ru-ru", {day: "numeric", year: "numeric", month: "long"}).format(member.joinedTimestamp)}`} :
          null;

        const embed = {
          title: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${ target.tag }`,
          color: interaction.embedColor,
          footer,
          edit: interaction.controller.editEmbed
        }

        const contents = [];

        const inventory = [
          `üî©${user.keys}`,
          `<a:void:768047066890895360>${user.void}`,
          `üß§${ user.thiefGloves || 0 }|${ (user.thiefWins && String(user.thiefWins).replace("-", "!")) || 0 }`,
          `${ user.chilli  ? "üå∂Ô∏è" + user.chilli  : "" }`,
          `${ user.monster ? "üê≤" + user.monster : "" }`,
          `${ user.seed    ? "üå±" + user.seed    : "" }`,
          `${ user.cheese  ? "üßÄ" + user.cheese  : "" }`
        ];

        if (user.element){
          const emoji = ["üçÉ –ó–µ–º–ª—è", "‚òÅÔ∏è –í–æ–∑–¥—É—Ö", "üî• –û–≥–æ–Ω—å", "üëæ –¢—å–º–∞"][user.element];
          const content = `\n${ emoji } ‚Äî —ç–ª–µ–º–µ–Ω—Ç ${(user.elementLevel ?? 0) + 1} —É—Ä.\n`;
          contents.element = content;
        }

        const fields = [
          {
            name: "–ö–ª—É–±–Ω–∏–∫–∏ <:berry:756114492055617558>",
            value: `–ò–º–µ–µ—Ç—Å—è: ${ user.berrys }`,
            inline: true
          },
          {
            name: `–°—É–Ω–¥—É–∫ ${ user.CD_32 > Date.now() ? "<:chest_opened:986165753843679232>" : "<a:chest:805405279326961684>" }`,
            value: `–°—É–Ω–¥—É–∫ —É—Ä.: ${user.chestLevel + 1}\n–ë–æ–Ω—É—Å —Å–ª–µ–¥. –æ—Ç–∫—Ä—ã—Ç–∏—è: \`${user.chestBonus || 0}\``,
            inline: true
          },
          {
            name: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏",
            value: `${inventory.join("  ")}${ contents.element ?? "" }\n‚†Ä`,
            inline: false
          },
          {
            name: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤ üìú",
            value: (() => {
              const userCompleted = (user.questsGlobalCompleted ?? "").split(" ").filter(Boolean);
              const globalsContent = `–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: ${ userCompleted.length }/${ QuestManager.questsBase.filter(quest => quest.isGlobal).size }`;
              const dailyQuestsContent = `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: ${target.bot ? "BOT" : user.dayQuests || 0}`;
              return `${ dailyQuestsContent }\n${ globalsContent }`;
            })(),
            inline: false
          },
          {
            name: "–ü—Ä–æ–∫–ª—è—Ç–∏—è üíÄ",
            value: (() => {
              const surviveContent = `–ü–µ—Ä–µ–∂–∏—Ç–æ –ø—Ä–æ–∫–ª—è—Ç–∏–π: ${ user.cursesEnded || 0 }`;
              const getCurrentContent = () => {
                if (!user.curses || !user.curses.length){
                  return "–ü—Ä–æ–∫–ª—è—Ç–∏—è –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç.";
                }
                
                const count = Util.ending(user.curses.length, "", `–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è (–∏—Ö ${ user.curses.length })`, "–¢–µ–∫—É—â–µ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ", "–¢–µ–∫—É—â–∏–µ –¥–≤–∞ –ø—Ä–æ–∫–ª—è—Ç–∏—è", {unite: (_quantity, word) => word});
                const curse = user.curses.at(interaction.currentCurseView);
                const description = CurseManager.intarface({user: target, curse}).toString();
                return `>>> ${ count }:\n${ description }`
              }
              return `${ surviveContent }\n${ getCurrentContent() }`;
            })(),
            inline: false,
            filter: () => user.cursesEnded || user.curses
          },
          {
            name: "–ë–æ–Ω—É—Å—ã –∫–æ—Ç–ª–∞ <a:placeForVoid:780051490357641226>",
            value: `\`\`\`–£–º–µ–Ω—å—à–µ–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–∞: ${ ~~user.voidCooldown }/20\n–°–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª: ${~~user.voidPrise}/5\n–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏: ${~~user.voidDouble}/1\n–£—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤: ${~~user.voidQuests}/5\n–®–∞–Ω—Å –∫–æ–∏–Ω–∞: ${~~user.voidCoins}/7 (${+(1 / (85 * 0.90 ** user.voidCoins) * 100).toFixed(2)}%)\n–ú–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫: ${~~user.voidMonster}/1\n–ö–∞–∑–∏–Ω–æ: ${~~user.voidCasino}/1\n–°–≤–æ–±–æ–¥–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π: ${ ~~user.voidFreedomCurse }/1\n–ë–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫: ${~~user.voidThief}\n–£–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –ö–ª–µ–≤–µ—Ä: ${user.voidMysticClover ?? 0 }\n–§–µ—Ä–º–µ—Ä: ${user.voidTreeFarm ?? 0 }\n–ù–∞–≥—Ä–∞–¥–∞ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π: ${35 + (user.coinsPerMessage || 0)}\`\`\``,
            inline: false
          }
        ];

        embed.fields = fields.filter(field => !field.filter || field.filter());
        return embed;
      }



     

      const controller = interaction.controller;
      controller.message = await msg.msg( await createEmbedAtFirstPage() );
      controller.editEmbed = true;

      while (true) {
        Util.sleep(8500);

        const react = await controller.message.awaitReact({user: "any", type: "all", time: 20000}, ...controller.reactions);
        switch (react) {
          case "640449848050712587":
            interaction.currentCurseView = interaction.currentCurseView + 1 % user.curses?.length || 1;
            await controller.message.msg( await createEmbedAtFirstPage() );
            controller.reactions = ["640449832799961088"];
            break;
          case "640449832799961088":
            await controller.message.msg( await createEmbedAtSecondPage() );
            controller.reactions = ["640449848050712587"];
            break;

          default: return;
        }
      }
  }, {delete: true, cooldown: 20, cooldownTry: 3, type: "user"}, "—é–∑–µ—Ä u —é profile –ø—Ä–æ—Ñ–∏–ª—å"),

  help: new Command(async (msg, interaction) => {
    let endingIndex = Object.values(commands).findIndex((e, i) => i != 0 && e.id === 1);
    let guildCommands = [];

    if (msg.guild.data.commands) {
      guildCommands.push({
        name: "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã <:cupS:806813704913682442>",
        value: Object.keys(msg.guild.data.commands).map(e => `\`!${e}\``).join(" ")
      });
    }

    let fields = [
      {
        name: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º <a:diamond:725600667586134138>",
        value: Object.entries(commands).filter(([k, v], i) => v.type === "guild" && i < endingIndex && !v.hidden).map(([k, v]) => `\`!${k}\``).join(" ")
      },
      {
        name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ <:berry:756114492055617558>",
        value: Object.entries(commands).filter(([k, v], i) => v.type === "user" && i < endingIndex && !v.hidden).map(([k, v]) => `\`!${k}\``).join(" ")
      },
      {
        name: "–ë–æ—Ç <:piggeorg:758711403027759106>",
        value: Object.entries(commands).filter(([k, v], i) => v.type === "bot" && i < endingIndex && !v.hidden).map(([k, v]) => `\`!${k}\``).join(" ")
      },
      ...guildCommands,
      {
        name: "–î—Ä—É–≥–æ–µ <:coin:637533074879414272>",
        value: Object.entries(commands).filter(([k, v], i) => v.type === "other" && i < endingIndex && !v.hidden).map(([k, v]) => `\`!${k}\``).join(" ")
      }
    ];

    const embed = {
      title: "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–ª–æ–º–∞—é—Ç –≤–∞—à —Å–µ—Ä–≤–µ—Ä",
      description: `–ó–Ω–∞–µ—Ç–µ –≤—Å–µ-–≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? –í—ã —Ç–æ—á–Ω–æ –º–æ–ª–æ–¥–µ—Ü!`,
      fields,
      components: {
        type: 2,
        label: "Discord",
        style: 5,
        url: "https://discord.gg/76hCg2h7r8",
        emoji: {id: "849587567564554281"}
      }
    }

    msg.msg(embed);
  }, {delete: true, cooldown: 15, type: "other"}, "—Ö–µ–ª–ø –ø–æ–º–æ—â—å cmds commands –∫–æ–º–∞–Ω–¥—ã —Ö"),

  praise: new Command(async (msg, interaction) => {
    let
      memb     = interaction.mention,
      userData = interaction.userData,
      membUser = memb.data;

    if (memb == msg.author) {
      msg.channel.msg({title: "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∂–µ—Ä—Ç–≤—É –æ–±—ä—è—Ç–∏–π!", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}});
      return;
    }

    let heAccpet = await Util.awaitUserAccept({name: "praise", message: {title: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–≤–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"}, channel: msg.channel, userData});
    if (!heAccpet) {
      return;
    };

    userData.praise = userData.praise || [];
    if (userData.praise.length > 1 + Math.floor(userData.level * 1.5 / 10)) {
      msg.channel.msg({title: "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ—Ö–≤–∞–ª—ã", color: "#ff0000"});
      return;
    }

    membUser.praiseMe = membUser.praiseMe || [];
    if (userData.praise.includes(memb.id)) {
      msg.channel.msg({title: "–í—ã —É–∂–µ —Ö–≤–∞–ª–∏–ª–∏ –µ–≥–æ!"});
      return;
    }

    userData.praise.push(memb.id);
    membUser.praiseMe.push(userData.id);
    msg.channel.msg({title: `${memb.username} –ø–æ—Ö–≤–∞–ª–∏–ª–∏ ${membUser.praiseMe.length}-–π —Ä–∞–∑\n–≠—Ç–æ —Å–¥–µ–ª–∞–ª ${msg.author.username}!`, author: {name: memb.username, iconURL: memb.avatarURL()}});

    msg.author.action(Actions.likedTheUser, {channel: msg.channel, target: memb, likeType: "byCommand"});
    msg.author.action(Actions.praiseUser, {channel: msg.channel, target: memb, msg});
    memb.action(Actions.userPraiseMe, {channel: msg.channel, msg, memb: msg.author});
  }, {delete: true, memb: true, type: "user"}, "–ø–æ—Ö–≤–∞–ª–∏—Ç—å like –ª–∞–π–∫ –ª–∞–π–∫–Ω—É—Ç—å"),

  praises: new Command(async (msg, interaction) => {

    const context = {
      questionMessage: null
    };

    if (interaction.params === "+"){
      const data = msg.author.data;

      const currentPraises = data.praise || [];
      const currentLength = currentPraises.length;

      currentPraises.forEach(id => {
        const target = client.users.cache.get(id).data.praiseMe;
        if (!target)
          return;

        const index = target.indexOf( msg.author.id );
        if (index === -1)
          return;

        target.splice(index, 1);
      });

      data.praise = [];



      msg.msg({description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä "+" ‚Äî –≤—Å–µ –ø–æ—Ö–≤–∞–ª—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã (${ currentLength })`, delete: 10000});
    }


    let
      memb = interaction.mention || msg.guild.members.cache.get(interaction.params) || msg.author,
      user = memb.data,
      isAuthor = memb == msg.author,
      iPraise  = (user.praise && user.praise.length) ? user.praise.map((id, i) => (i + 1) + ". "+ (DataManager.getUser(id) ? Discord.escapeMarkdown( DataManager.getUser(id).name ) : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")).join(`\n`) : (isAuthor) ? "–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ —Ö–≤–∞–ª–∏–ª–∏ \n–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **!–ø–æ—Ö–≤–∞–ª–∏—Ç—å**" : "–ù–∏–∫–æ–≥–æ –Ω–µ —Ö–≤–∞–ª–∏–ª",
      mePraise = (user.praiseMe && user.praiseMe.length) ? user.praiseMe.map((id, i) => (i + 1) + ". "+ (DataManager.getUser(id) ? Discord.escapeMarkdown( DataManager.getUser(id).name ) : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")).join(`\n`) : (isAuthor) ? "–í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Ö–≤–∞–ª–∏–ª, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –∏–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å" : "–ï–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–≤–∞–ª–∏–ª, –ø–æ—Ö–≤–∞–ª–∏—Ç–µ –µ–≥–æ!";

    const maximumPraises = Math.min(
      2 + Math.floor(user.level * 1.5 / 10),
      20
    );

    user.praise = user.praise || [];
    if ( user.praise[0] ) {
      iPraise += "\n‚Ä¢ (–ø—É—Å—Ç–æ)".repeat( Math.max(maximumPraises - user.praise.length, 0) );
    }

    let message = await msg.channel.msg({title: isAuthor ? "–ü–æ—Ö–≤–∞–ª—ã" : "–ü–æ—Ö–≤–∞–ª–∏–ª", description: iPraise, color: "#00ffaf", author: {name: memb.tag, iconURL: memb.avatarURL()}, footer: {text: isAuthor ? "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å,\n–ø–æ—Ö–≤–∞–ª—É –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ *–≥–∞–ª–æ—á–∫—É* –Ω–∏–∂–µ." : ""}});
    let react = await message.awaitReact({user: msg.author, type: "all"}, "640449832799961088", (isAuthor && user.praise[0]) ? "685057435161198594" : null);

    while (true) {
      switch (react){
        case "640449832799961088":
          await message.msg({title: isAuthor ? "–í–∞—Å –ø–æ—Ö–≤–∞–ª–∏–ª–∏" : "–ë—ã–ª –ø–æ—Ö–≤–∞–ª–µ–Ω", color: "#00ffaf", description: mePraise, author: {name: memb.tag, iconURL: memb.avatarURL()}, edit: true});
          react = await message.awaitReact({user: msg.author, type: "all"}, "640449848050712587");
          break;


        case "640449848050712587":
          await message.msg({title: isAuthor ? "–ü–æ—Ö–≤–∞–ª—ã" : "–ü–æ—Ö–≤–∞–ª–∏–ª", color: "#00ffaf", description: iPraise, author: {name: memb.tag, iconURL: memb.avatarURL()}, footer: {text: isAuthor ? `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å,\n–ø–æ—Ö–≤–∞–ª—É –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ *–≥–∞–ª–æ—á–∫—É* –Ω–∏–∂–µ.` : "Have a good goose"}, edit: true});
          react = await message.awaitReact({user: msg.author, type: "all"}, "640449832799961088", (isAuthor && user.praise[0]) ? "685057435161198594" : null);
          break;


        case "685057435161198594":
          context.questionMessage = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"});
          let answer = await msg.channel.awaitMessage({user: msg.author, remove: true})?.content;
          context.questionMessage.delete();

          if (answer === "+")
            answer = user.praise
              .map((id, i) => i + 1)
              .join(",");



          const throwOut = () => {
            if (throwOut.message === undefined)
              throwOut.message = "";

            throwOut.out = true;
          }

          const splices = answer.match(/\d+/g);

          if (splices === null){
            await msg.channel.msg({title: `–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–æ–º–µ—Ä, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å`, color: "#ff0000", delete: 9000});
            react = "640449848050712587";
            break;
          }


          const willRemoved = splices
            .map(userIndex => {
              if (user.praise.length < userIndex || userIndex <= 0){
                throwOut();
                throwOut.message += `\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º ${ userIndex }`

                return null;
              }

              const id = user.praise[userIndex - 1];
              return DataManager.getUser(id)
            })
            .filter(data => data !== null);

          willRemoved
            .forEach(data => {
              if (data) {
                let index = data.praiseMe.indexOf(user.id);
                if (~index)
                  data.praiseMe.splice(index, 1);
              }

              user.praise.splice(answer - 1, 1);
            });


          if (willRemoved.length > 1){
            const list = willRemoved
              .map(data => {
                if (!data)
                  data = {name: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"};

                return data.name || `ID: ${ data.id }`;
              })
              .map(name => `‚Ä¢ ${ name }`)
              .join("\n");

            const description = `–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–≤–∞–ª:\n${ list }`;
            const author = { name: msg.author.tag, iconURL: msg.author.avatarURL() };
            await msg.msg({author, description});
          }

          if (willRemoved.length === 1){
            const data = willRemoved[0];


            const discordUser = client.users.cache.get( data.id );
            const name   = discordUser ? discordUser.username : (data.name || data.id);
            const author = discordUser ? {name, iconURL: discordUser.avatarURL()} : null;

            await msg.msg({title: `–í—ã —É–¥–∞–ª–∏–ª–∏ ${ name } –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–≤–∞–ª`, author});
          }


          if (throwOut.out){
            const main = `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ ${ user.praise.length } –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.\n–£–∫–∞–∂–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –∏–ª–∏ –∑–Ω–∞–∫ "+" (–≤—Å–µ –ø–æ—Ö–≤–∞–ª—ã), —á—Ç–æ–±—ã –∑–∞ —Ä–∞–∑ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–≤–∞–ª.`;
            const description = `${ main }\n${ throwOut.message }`;
            msg.msg({title: "–û—Ç—á—ë—Ç –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–æ–±–ª–µ–º:", description, color: "#ff0000", delete: 12000});
          }

          iPraise = (user.praise.length) ? user.praise.map((id, i) => (i + 1) + ". "+ (DataManager.getUser(id) ? Discord.escapeMarkdown( DataManager.getUser(id).name ) : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")).join(`\n`) : (isAuthor) ? "–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ —Ö–≤–∞–ª–∏–ª–∏ \n–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **!–ø–æ—Ö–≤–∞–ª–∏—Ç—å**" : "–ù–∏–∫–æ–≥–æ –Ω–µ —Ö–≤–∞–ª–∏–ª";
          iPraise += "\n‚Ä¢ (–ø—É—Å—Ç–æ)".repeat( Math.max(maximumPraises - user.praise.length, 0) );
          await message.msg({title: isAuthor ? "–ü–æ—Ö–≤–∞–ª—ã" : "–ü–æ—Ö–≤–∞–ª–∏–ª", color: "#00ffaf" , description: Discord.escapeMarkdown(iPraise), author: {name: memb.tag, iconURL: memb.avatarURL()}, footer: {text: isAuthor ? `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å,\n–ø–æ—Ö–≤–∞–ª—É –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ *–≥–∞–ª–æ—á–∫—É* –Ω–∏–∂–µ.` : "Have a good goose"}, edit: true});



          react = "640449848050712587";
          break;


        default:
         msg.reactions.removeAll();
         return;
       }
    }
  }, {delete: true, cooldown: 20, cooldownTry: 2, type: "user"}, "–ø–æ—Ö–≤–∞–ª—ã –ª–∞–π–∫–∏ likes"),

  warn: new Command(async (msg, interaction) => {
    let memb = interaction.mention;

    interaction.params = interaction.params.split(" ").slice(1).join(" ");

    if (memb == msg.author) {
      msg.msg({title: `${msg.author.username} –≤—ã–¥–∞–ª —Å–µ–±–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Ç–æ, —á—Ç–æ ${interaction.params.trim() || "—Å–º–µ—à–Ω–æ–π —Ç–∞–∫–æ–π"}`, color: "#ff0000"});
      return;
    }

    let message = (interaction.params) ?
      `–£—á–∞—Å—Ç–Ω–∏–∫ ${msg.author.username} –≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${memb.username}\n**–ü—Ä–∏—á–∏–Ω–∞:** ${interaction.params}` :
      `${msg.author.username} –≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${memb.username} –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.`;

    msg.msg({title: "–í—ã–¥–∞–Ω –ø—Ä–µ–¥", description: `${message}`, color: "#ff0000", author: {name: `–í—ã–¥–∞–ª: ${msg.author.username}`, iconURL: msg.author.avatarURL()}, footer: {text: "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –±–∞–Ω...", iconURL: memb.avatarURL()}});

    memb.msg({title: `–í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ \n–ü—Ä–∏—á–∏–Ω–∞: ${interaction.params || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`, color: "#ff0000", footer: {text: "–í—ã–¥–∞–ª: " + msg.author.tag}});
    msg.guild.logSend({title: `–û–¥–Ω–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ`, description: message, color: "#ff0000"});
  }, {delete: true, memb: true, dm: true, cooldownTry: 3, cooldown: 120, Permissions: 4194304, type: "guild"}, "–ø—Ä–µ–¥ –≤–∞—Ä–Ω"),

  clear: new Command(async (msg, interaction) => {
    await msg.delete()
      .catch(() => {});

    const
      channel      = msg.channel,
      args         = interaction.params;

    const referenceId = msg.reference ? msg.reference.messageId : null;

    const userId  = Util.match(args, /\d{17,19}/);
    const limit   = Util.match(args, /(?:\s|^)\d{1,16}(?:\s|$)/);


    const
      foundedMessages = [],
      twoWeekAgo      = new Date() - 1209600000,
      options         = { limit: 50 };

    const foundLimit =
      referenceId ? 500 :
      Math.min(
        limit !== false ? limit : 75,
        900
      );

    let lastMessageId = null;
    while (true) {
      if (lastMessageId)
        options.before = lastMessageId;

      const messages = await channel.messages.fetch(options);
      foundedMessages.push(...messages.values());

      if (referenceId){
        const founded = messages.find(msg => msg.id === referenceId);

        if (founded){
          foundedMessages.splice(foundedMessages.indexOf(founded));
          break;
        }

        if (messages.size !== 50 || foundedMessages.length === 350){
          msg.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ", color: "#ff0000", delete: 3000, description: args});
          return;
        }
      }

      lastMessageId = messages.last().id;
      if (messages.size !== 50 || foundedMessages.length >= foundLimit){
        break;
      }
    };

    let messages = foundedMessages;

    messages = messages.filter(message => !message.pinned);

    if (msg.channel.type === "dm")
      messages = messages.filter(message => message.author === client.user);


    if (userId)
      messages = messages.filter(message => message.author.id === userId);

    messages.splice(foundLimit);

    if (messages.length === 0)
      return msg.msg({title: "–í—Ä–æ–¥–µ-–∫–∞–∫ —É–¥–∞–ª–µ–Ω–æ 0 —Å–æ–æ–±—â–µ–Ω–∏–π", delete: 3000, description: "–Ø —Å–µ—Ä—å—ë–∑–Ω–æ! –ù–µ —É–¥–∞–ª–µ–Ω–æ –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!"});


    let counter = await msg.msg({title: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–æ–¥–æ–∂–¥–∏—Ç–µ... ${  Util.ending(messages.length, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") } –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.`, description: "–ù–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —á–∏—Å—Ç–∫—É", reactions: ["‚ùå"]});
    let toDelete = messages.length;

    await Util.sleep(3000);

    if (messages.length > 120){
      msg.channel.startTyping();
    }

    const byBulkDelete = [];
    const byOneDelete  = [];

    messages.forEach(msg => {
      if (msg.channel.type === "dm")
        return byOneDelete.push(msg);

      if (msg.createdTimestamp - twoWeekAgo < 0)
        return byOneDelete.push(msg);

      byBulkDelete.push(msg);
    });

    const updateCounter = async () => {
      const current = toDelete - byOneDelete.length - byBulkDelete.length;
      counter = await counter.msg({title: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–æ–¥–æ–∂–¥–∏—Ç–µ... ${ current } / ${ toDelete }`, edit: true});
    }

    const isReaction = () => {
      const reacted = counter.reactions.cache.get("‚ùå");
      if (reacted)
        return reacted.users.cache.has(msg.author.id);
    }

    const sendLog = () => {
      const current = toDelete - byOneDelete.length - byBulkDelete.length;

      if (current === 0)
        return;

      const mode = (referenceId) ? `–î–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è` : (userId) ? `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${ userId }>` : (limit) ? "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞" : "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è";
      const isCancel = !!(toDelete - current);
      const description = `–í –∫–∞–Ω–∞–ª–µ: ${ channel.toString() }\n–£–¥–∞–ª–∏–ª: ${msg.author.toString()}\n–¢–∏–ø —á–∏—Å—Ç–∫–∏: ${ mode }${ isCancel ? "\n\n–ß–∏—Å—Ç–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" : "" }`;

      if (msg.guild){
        const title = `–£–¥–∞–ª–µ–Ω–æ ${  Util.ending(current, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") }`;
        msg.guild.logSend({title, description}); 
      }
        
    }

    while (byBulkDelete.length || byOneDelete.length){


      if ( isReaction() ){
        counter.delete();

        const current = toDelete - byOneDelete.length - byBulkDelete.length;
        const description = `–ë—ã–ª–æ –æ—á–∏—â–µ–Ω–æ ${  Util.ending(current, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") } –¥–æ –æ—Ç–º–µ–Ω—ã`;
        msg.msg({title: "–û—á–∏—Å—Ç–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", description, delete: 12000});

        sendLog();

        msg.channel.stopTyping();

        return;
      }




      if (byBulkDelete.length){
        await channel.bulkDelete( byBulkDelete.splice(0, 50) );
      }

      else {
        for (const message of byOneDelete.splice(0, Util.random(5, 15))){
          await message.delete();
        }
      }



      updateCounter();
    }

    await Util.sleep(toDelete * 30);

    counter.msg({title: `–£–¥–∞–ª–µ–Ω–æ ${  Util.ending(toDelete, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") }!`,  edit: true, delete: 1500 });

    sendLog();
  }, {myChannelPermissions: 8192, ChannelPermissions: 8192, cooldown: 15, cooldownTry: 5, type: "guild"}, "–æ—á–∏—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∏ –æ—á–∏—Å—Ç—å –∫–ª–∏—Ä –∫–ª–∏–∞—Ä"),

  embed: new Command(async (msg, interaction) => {

    const context = {
      questionMessage: null,
      embed: new EmbedBuilder(),
      previewMessage,
      updatePreviewMessage: () => {
        context.previewMessage({edit: true, ...context.embed});
      }
    }

    const createBaseEmbed = (json) => {
      const title = "–≠–º–±–µ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä";
      const description = `–° –ø–æ–º–æ—â—å—é —Ä–µ–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–π—Ç–µ –≤–µ–ª–∏–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ \n–∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º\n–ü–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!\n\nüìå - –∑–∞–≥–ª–∞–≤–∏–µ/–Ω–∞–∑–≤–∞–Ω–∏–µ\nüé® - —Ü–≤–µ—Ç\nüé¨ - –æ–ø–∏—Å–∞–Ω–∏–µ\nüë§ - –∞–≤—Ç–æ—Ä\nüéè - –ø–æ–¥–≥—Ä—É–ø–ø–∞\nü™§ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É\nü™Ñ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–∑—É\nüß± - –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å\nüïµÔ∏è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫\nüòÜ - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\nüì• - —Ñ—É—Ç–µ—Ä\n\n‚≠ë –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∂–º—è–∫–∞–π—Ç–µ <:arrowright:640449832799961088>\n`;

      const embed = {
        title,
        description
      };

      if (json){
        try {
          const parsed = JSON.parse(json);
          Object.assign(embed, parsed);
        } catch {};
      }
     

      return embed;
    }

    Object.assign(
      context.embed,
      createBaseEmbed(interaction.params)
    );

    let author = msg.author;
  
    context.previewMessage = await msg.msg(context.embed);

      
    
    let
      react, answer, reactions;


    while (true) {
      if (typeof react != "object")
        react = await context.previewMessage.awaitReact({user: author, type: "one"}, "üìå", "üé®", "üé¨", "üë§", "üéè", "üì•", "üòÜ", "640449832799961088");
      else
        react = await context.previewMessage.awaitReact({user: author, type: "one"}, ...react);

      switch (react) {
        case "üìå":
          context.questionMessage = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üìå", color: context.embed.color});
          answer = await msg.channel.awaitMessage({user: msg.author, remove: true});
          context.questionMessage.delete();
          if (!answer){
            continue;
          }

          let link = answer.content.match(/https:\/\/.+?(\s|$)/);
          if (link){
            answer.content = answer.content.replace(link[0], "").trim();
            context.embed.setURL(link);
          }
          context.embed.setTitle(answer);

          break;

        case "üé®":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: #2c2f33", embed: {color: embed.color}});
          if (!answer){
            continue;
          }

          let color = answer.content.match(/[abcdef0-9]{6}|[abcdef0-9]{3}/i);
          if (!color) {
            msg.msg({title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX `#38f913`", color: "#ff0000", delete: 5000});
            continue;
          }
          color = color[0].toLowerCase();
          color = color.length === 3 ? [...color].map(e => e + e).join("") : color;

          context.embed.color = color;
          break;

        case "üé¨":
          answer = await msg.channel.awaitMessage(msg.author, {time: 1000000, title: "–û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∏–ª—å–º—É üé¨", embed: {color: embed.color}});
          if (!answer){
            continue;
          }
          context.embed.setDescription(answer);
          break;

        case "üë§":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∏–∫", embed: {description: "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", color: embed.color}});
          if (!answer){
            continue;
          }
          let user = answer.mentions.users.first();
          if (user){
            context.embed.setAuthor(user.username, user.avatarURL());
            break;
          }

          let image = answer.content.match(/https:\/\/.+?(\s|$)/);
          if (image){
            answer.content = answer.content.replace(image[0], "").trim();
          }

          image = image ? image[0] : null;
          context.embed.setAuthor(answer.content, image);
          break;

        case "üéè":
          await context.previewMessage.reactions.removeAll();
          react = ["640449848050712587", "üß±", "ü™Ñ", "ü™§", "üïµÔ∏è"];
          break

        case "üì•":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ñ—É—Ç–µ—Ä–∞", embed: {description: `–í–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞`, color: embed.color}});
          if (!answer){
            continue;
          }
          let url = answer.content.match(/https:\/\/.+?(\s|$)/);
          if (url){
            answer.content = answer.content.replace(url[0], "").trim();
          }

          url = url ? url[0] : null;
          context.embed.setFooter(answer, url);
          break;

        case "üòÜ":
          await context.previewMessage.reactions.removeAll();
          let collector = await msg.msg({title: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä—è–º–æ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n–ê –∑–∞—Ç–µ–º –∂–º—è–∫–Ω–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é\"–ì–æ—Ç–æ–≤–æ\"<:mark:685057435161198594>", color: embed.color});
          react = await context.previewMessage.awaitReact({user: author, type: "one"}, "685057435161198594");
          reactions = Array.from(collector.reactions.cache.keys());
          collector.delete();
          await context.previewMessage.reactions.removeAll();
          break;

        case "ü™§":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", embed: {description: "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ø—Ä–∞–≤–∞-—Å–≤–µ—Ä—Ö—É", color: embed.color}});
          if (!answer){
            continue;
          }
          if (!answer.content.startsWith("http")){
            msg.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});
            continue;
          }
          context.embed.setThumbnail(answer.content);
          react = ["640449848050712587", "üß±", "ü™Ñ", "ü™§", "üïµÔ∏è"];
          break;

        case "ü™Ñ":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", embed: {description: "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–º–±–µ–¥–∞", color: embed.color}});
          if (!answer){
            continue;
          }
          if (!answer.content.startsWith("http")){
            msg.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});
            continue;
          }
          context.embed.setImage(answer.content);
          react = ["640449848050712587", "üß±", "ü™Ñ", "ü™§", "üïµÔ∏è"];
          break;

        case "üß±":
          let name = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏", embed: {fields: [{name: "–¢–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è **–Ω–∞–∑–≤–∞–Ω–∏–µ**", value: "–¢—É—Ç –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ"}], color: embed.color}});
          if (!name){
            continue;
          }
          let value = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ", embed: {fields: [{name: name, value: "–¢—É—Ç –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ"}], color: embed.color}});
          if (!value){
            continue;
          }
          context.embed.addField(name, value, true);
          react = ["640449848050712587", "üß±", "ü™Ñ", "ü™§", "üïµÔ∏è"];
          break;

        case "üïµÔ∏è":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä –í–µ–±—Ö—É–∫–∞, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ.", embed: {description: "–ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è –≤–µ–±—Ö—É–∫, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –µ–≥–æ –∏–º—è.\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫.", color: embed.color}});
          if (!answer){
            continue;
          }

          let avatar = Util.match(answer, /http\S+/);
          if (avatar){
            answer.content = answer.content.replace(avatar, "").trim();
          }

          context.embed.webhook = {name: answer.content, avatar};
          react = ["640449848050712587", "üß±", "ü™Ñ", "ü™§", "üïµÔ∏è"];
          msg.msg({title: "–£—Å–ø–µ—à–Ω–æ!", author: {name: answer.content, iconURL: avatar}, delete: 3000});
          break;

        case "640449848050712587":
          // Arror-Left
          await context.previewMessage.reactions.removeAll();
          break;

        case "640449832799961088":
          // Send Embed-Message
          await context.previewMessage.reactions.removeAll();
          let whatChannelSend = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–º–±–µ–¥–∞", color: embed.color, description: "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é <:arrowright:640449832799961088>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª."});
          answer = await Util.awaitReactOrMessage(whatChannelSend, msg.author, "640449832799961088");
          whatChannelSend.delete();

          if (!answer){
            continue;
          }

          let channel =
            answer === "640449832799961088" ? msg.channel : false
            ||
            answer.mentions.channels.first()
            ||
            msg.guild.channels.cache.get(answer.content)
            ||
            client.channels.cache.get(answer.content);

          if (!channel) {
            msg.channel.msg({title: "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", color: "#ff0000", delete: 4500});
            continue;
          }

          if (!channel.guild.members.resolve(msg.author)) {
            msg.channel.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥–Ω–∞–ª–µ–∂–∏—Ç —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≠–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ", color: "#ff0000", delete: 4500});
            continue;
          }

          if (channel.guild.members.resolve(msg.author).wastedPermissions(18432, channel)[0]) {
            msg.channel.msg({title: "–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≠–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏—è ", color: "#ff0000", delete: 4500});
            continue;
          }

          if (context.embed.webhook){
            let webhooks = await channel.fetchWebhooks();
            let hook = webhooks.find(e => e.name === context.embed.webhook.name);

            if (hook && context.embed.webhook.avatar){
              await webhook.edit({avatar: context.embed.webhook.avatar});
            }

            if (!hook){
              hook = await channel.createWebhook(context.embed.webhook.name, {
                avatar: context.embed.webhook.avatar || "https://www.emojiall.com/images/240/openmoji/1f7e9.png",
                reason: `${msg.author.tag} (${msg.author.id}) Created a message with Embed-constructor`
              });
            }
            channel = hook;
          }

          await channel.msg({content: context.embed, reactions: reactions});
          react = ["‚úèÔ∏è", "‚ùå", "640449832799961088"];
          break;

        case "‚ùå":
          context.previewMessage.delete();
          return;

        case "‚úèÔ∏è":
          context.previewMessage.reactions.removeAll();
          break;

        default:
          return;
      }

      context.updatePreviewMessage();
    }


  }, {delete: true, ChannelPermissions: 16384, cooldown: 30, cooldownTry: 3, type: "guild"}, "–µ–º–±–µ–¥ —ç–º–±–µ–¥"),

  archive: new Command(async (msg, interaction) => {
    if (msg.author.id != 921403577539387454){
      return msg.msg({delete: 4000, content: "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"});
    }
    let
      channel      = msg.channel,
      sum_messages = [],
      options      = {limit: 100},
      time         = 0,
      date         = new Date(),
      last_id;

    while (true) {
      if (last_id) options.before = last_id;
      const messages = await channel.messages.fetch(options, false);
      sum_messages.push(...messages.values());
      last_id = messages.last().id;
      if (messages.size != 100) break;
      if (++time == 20) msg.msg({title: "–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å", delete: 3000})
      if (++time == 50) msg.msg({title: "–ñ–¥–∏—Ç–µ", delete: 3000})
    }

    let input = date + "\n\n", last;
    sum_messages.reverse().forEach(item => {
      if (!last || last.author.tag != item.author.tag){
        let data = new Date(item.createdTimestamp);
        input += "\n    ---" + item.author.tag + " " + data.getHours() + ":" + data.getMinutes() + "\n";
      }
      input += item.content + "\n";
      last = item;
    });

    let buffer = Buffer.from(input.replace("undefined", ""), "utf-8");

    msg.msg({title: new Discord.MessageAttachment(buffer, (interaction.params || "archive") + ".txt"), embed: true});
    if (time > 35) msg.msg({title: "–í–æ—Ç –≤–∞—à–∞ –ø–µ—á–µ–Ω—å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è üç™"});
  }, {delete: true, cooldownTry: 1, cooldown: 3600, Permissions: 16, type: "delete"}, "arhive –∞—Ä—Ö–∏–≤"),

  setchat: new Command(async (msg, interaction) => {
    const type = "chatChannel";
    const guild = msg.guild;
    const channel = msg.mentions.channels.first() ?? msg.channel;
    guild.data[type] = channel.id;
    msg.msg({title: `#${channel.name} –∫–∞–Ω–∞–ª —Å—Ç–∞–ª —á–∞—Ç–æ–º!`, delete: 9000});

    guild.logSend({description: `–ö–∞–Ω–∞–ª—É #${channel.name} —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–µ—Ç–∫—É "—á–∞—Ç"`, author: {name: msg.author.username, avatarURL: msg.author.avatarURL()}});
  }, {delete: true, dm: true, Permissions: 32, type: "guild"}, "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—á–∞—Ç"),

  setlogs: new Command(async (msg, interaction) => {
    const type = "logChannel";
    const guild = msg.guild;
    const channel = msg.mentions.channels.first() ?? msg.channel;
    guild.data[type] = channel.id;
    msg.msg({title: `–ì–æ—Ç–æ–≤–æ. –í #${channel.name} –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—Å—è –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞`, delete: 9000});
    
    guild.logSend({description: `–ö–∞–Ω–∞–ª—É #${channel.name} —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–µ—Ç–∫—É "–ª–æ–≥–∏"`, author: {name: msg.author.username, avatarURL: msg.author.avatarURL()}});
  }, {delete: true, dm: true, Permissions: 32, type: "guild"}, "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ª–æ–≥–∏"),

  welcomer: new Command(async (msg, interaction) => {
    let guild = msg.guild;
    let answer;

    if (guild.data.hi) {
        let early = await msg.msg({title: "–†–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:", color: guild.data.hi.color, image: guild.data.hi.image, description: guild.data.hi.message, scope: {tag: msg.author.toString(), name: msg.author.username}, footer: {text: "–ù–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"}});
        let react = await early.awaitReact({user: msg.author, type: "all", time: 20000}, "‚úèÔ∏è");
        early.delete();
        if (!react) return;
    }

    let whatMessage = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ {name}, –æ–Ω–∏ –∑–Ω–∞—Ç–Ω–æ –≤–∞–º –ø–æ–º–æ–≥—É—Ç!"});
    answer = await msg.channel.awaitMessage({user: msg.author});
    if (!answer) {
      return;
    }

    let message = answer.content;
    whatMessage.delete();

    let whatColor = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX `#38f913`", description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é ‚ùå, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç"});
    answer = await Util.awaitReactOrMessage(whatColor, msg.author, "‚ùå");
    if (!answer){
      return;
    }

    let color = (answer.content) ? answer.content.replace("#", "") : null;
    whatColor.delete();

    let whatImage = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", description: "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç"});
    answer = await Util.awaitReactOrMessage(whatImage, msg.author, "‚ùå");
    if (!answer) {
      return;
    }

    let image = answer.content || null;
    whatImage.delete();
    if (image && !image.startsWith("http")) return msg.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});

    let rolesId;
    let whatRoles = await msg.msg({title: "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–π–¥–∏ —Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", description: "–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"});
    answer = await Util.awaitReactOrMessage(whatRoles, msg.author, "‚ùå");
    if (!answer) return;
    whatRoles.delete();
    if (answer.content){
      rolesId = answer.content.split(" ");
      let roles   = rolesId.map(el => msg.guild.roles.cache.get(el)).filter(el => el);
      if (rolesId.length != roles.length) return msg.msg({title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–¥–µ–Ω—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º: ${rolesId.filter(el => !roles.map(el => el.id).includes(el)).join(" ")}`, delete: 5000, color: "#ff0000"});
    }
    else rolesId = false;



    let whatChannel = await msg.msg({title: "–£–ø–æ–º—è–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–π –∏–ª–∏...", color: "#ffff00", description: `üì• - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ ${guild.channels.cache.get(guild.data.hiChannel) ? ("\n–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n" + guild.channels.cache.get(guild.data.hiChannel).toString() + " - –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å üî∞") : ""}`});
    answer = await Util.awaitReactOrMessage(whatChannel, msg.author, "üì•", ((guild.data.hiChannel) ? "üî∞" : null));
    if (!answer) {
      return;
    }

    whatChannel.delete();

    if (answer !== "üî∞") {
      guild.data.hiChannel = answer.mentions.channels.first() ? answer.mentions.channels.first().id : msg.channel.id;
      msg.channel.msg({title: `#${msg.guild.channels.cache.get(msg.channel.id).name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª–æ–º –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, delete: 4500});
    }

    guild.data.hi = {message, color, image, rolesId};
    msg.msg({title: "–ì–æ—Ç–æ–≤–æ! –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", color: color, image: image, description: message, scope: {tag: msg.author.toString(), name: msg.author.username}, delete: 15000});

  }, {delete: true, dm: true, Permissions: 32, type: "guild"}, "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ sethello –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),

  pay: new Command(async (msg, interaction) => {
    let memb = interaction.mention;
    interaction.params = interaction.params.replace(new RegExp(`<@!?${memb.id}>`), "");


    let num = interaction.params.match(/\d+|\+/);

    if (!num) {
      msg.msg({title: "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏.", color: "#ff0000"});
      return;
    }

    num = num[0];
    interaction.params = interaction.params.replace(num, "").trim();

    let [itemName, ...message] = interaction.params.split(" ");


    if (memb.bot) {
      msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ –±–æ—Ç—É"});
      return;
    }

    let heAccpet = await Util.awaitUserAccept({name: "give", message: {title: "–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –∫–æ–∏–Ω—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã"}, channel: msg.channel, userData: interaction.userData});
    if (!heAccpet) return;

    if (memb === msg.author) {
      msg.msg({title: `${msg.author.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∫–æ–ª–¥–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ (${ num } ‚ùî) ‚Äî –±–µ–∑—É—Å–ø–µ—à–Ω–æ.`});
      return;
    }


    const RESOURCES = [
      {
        resource: "coins",
        names: "coins coin –∫–æ–∏–Ω –∫–æ–∏–Ω–æ–≤ –∫–æ–∏–Ω–∞ –∫–æ–∏–Ω—ã –º–æ–Ω–µ—Ç –º–æ–Ω–µ—Ç—É –º–æ–Ω–µ—Ç—ã –º–æ–Ω–µ—Ç–∞",
        gives: n => `${ Util.ending(n, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} <:coin:637533074879414272>`
      },

      {
        resource: "void",
        names: "void –∫–∞–º–µ–Ω—å –∫–∞–º–Ω—è –∫–∞–º–Ω–µ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–º–Ω–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Å—Ç –Ω",
        gives: n => `${ Util.ending(n, "–∫–∞–º", "–Ω–µ–π", "–µ–Ω—å", "–Ω—è")} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏`
      },

      {
        resource: "chestBonus",
        names: "bonus chest –±–æ–Ω—É—Å –±–æ–Ω—É—Å–æ–≤ –±–æ–Ω—É—Å–∞ –±–æ–Ω—É—Å—ã —Å—É–Ω–¥—É–∫ —Å—É–Ω–¥—É–∫–∞ —Å—É–Ω–¥—É–∫–∏ —Å—É–Ω–¥—É–∫–æ–≤ –± —Å",
        gives: n => `${  Util.ending(n, "–±–æ–Ω—É—Å", "–æ–≤", "", "–∞") } —Å—É–Ω–¥—É–∫–∞`
      },

      {
        resource: "chilli",
        names: "chilli –ø–µ—Ä–µ—Ü –ø–µ—Ä—Ü–∞ –ø–µ—Ä—Ü–µ–≤ –ø–µ—Ä—Ü—ã",
        gives: n =>  Util.ending(n, "–ø–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")
      },

      {
        resource: "keys",
        names: "keys key –∫–ª—é—á –∫–ª—é—á–µ–π –∫–ª—é—á–∞ –∫–ª—é—á–∏ k –∫",
        gives: n =>  Util.ending(n, "–∫–ª—é—á", "–µ–π", "", "–∞")
      },

      {
        resource: "berrys",
        names: "–∫–ª—É–±–Ω–∏–∫–∞ –∫–ª—É–±–Ω–∏–∫ –∫–ª—É–±–Ω–∏–∫–∏ berrys berry —è–≥–æ–¥ —è–≥–æ–¥–∞ —è–≥–æ–¥—ã",
        gives: n =>  Util.ending(n, "–∫–ª—É–±–Ω–∏–∫", "", "–∞", "–∏")
      },

      {
        resource: "monster",
        names: "monster –º–æ–Ω—Å—Ç—Ä –º–æ–Ω—Å—Ç—Ä–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ –º–æ–Ω—Å—Ç—Ä—ã",
        gives: n =>  Util.ending(n, "–º–æ–Ω—Å—Ç—Ä", "–æ–≤", "", "–∞")
      }
    ];

    let resourceData = RESOURCES.find(obj => obj.names.split(" ").includes( itemName.toLowerCase() ));
    if (!resourceData){
      message = [itemName, ...message];
      resourceData = RESOURCES[0];
    }
    let resource = resourceData.resource;

    message = message.join(" ");

    if (num === "+"){
      num = interaction.userData[ resource ];
    }
    num = Math.floor(num);

    if (num < 0) {
      msg.msg({title: "–í–≤–µ–¥–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n<:grempen:753287402101014649> ‚Äî –£–∫—É—à—É."});
      return;
    }

    if (isNaN(interaction.userData[resource])){
      interaction.userData[resource] = 0;
    }

    if (isNaN(memb.data[resource])){
      memb.data[resource] = 0;
    }


    if (interaction.userData[ resource ] < num) {
      const description = Discord.escapeMarkdown(msg.content);
      msg.msg({title: `–ù—É–∂–Ω–æ –µ—â—ë ${ resourceData.gives(num - interaction.userData[ resource ]) }`, description, delete: 12000});
      return;
    }






    interaction.userData[ resource ]   -= num;
    memb.data[ resource ] += num;

    msg.msg({description: `${msg.author.username} –æ—Ç–ø—Ä–∞–≤–∏–ª ${ resourceData.gives(num) } –¥–ª—è ${ memb.toString() }` + (message ? `\n–° —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n${ message }` : ""), author: {name: "–ü–µ—Ä–µ–¥–∞—á–∞", iconURL: msg.author.avatarURL()}});
  }, {delete: true, dm: true, memb: true, cooldownTry: 7, cooldown: 300, type: "user"}, "give –¥–∞—Ç—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å"),

  bot: new Command(async (msg, interaction) => {


    let {rss, heapTotal} = process.memoryUsage();
    let season = ["–ó–∏–º–∞", "–í–µ—Å–Ω–∞", "–õ–µ—Ç–æ", "–û—Å–µ–Ω—å"][Math.floor((new Date().getMonth() + 1) / 3) % 4];
    const VERSION = "V6.0 BETA";

    const embed = {
      title: "–Ω—É —Ç–∏–ø–∞.. –∞–π, –¥–∞, —è –∂–∏–≤–æ–π, –¥–∞",
      description: `<:online:637544335037956096> –ü–∏–Ω–≥: ${client.ws.ping} ${VERSION} [#${season}](https://hytale.com/supersecretpage), —á—Ç–æ —Å—é–¥–∞ –µ—â—ë –∑–∞–ø–∏—Ö–Ω—É—Ç—å?\n–°–µ—Ä–≤–∞–∫–æ–≤...**${client.guilds.cache.size}** (?) –ö–æ–º–∞–Ω–¥: ${Command.cmds}\n–°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ: –ø—Ä–∏–º–µ—Ä–Ω–æ **#**–ü–æ—á–µ–º—É-—Ç–æ —ç—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ;\n\`${(heapTotal/1024/1024).toFixed(2)} –º–± / ${(rss/1024/1024).toFixed(2)} –ú–ë\``,
      footer: {text: `–£–∫—É—à—É! –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: ${ Util.timestampToDate(Date.now() - DataManager.data.bot.newGuildTimestamp, 2) }`},
      components: [
        {
          type: 2,
          label: "–£–¥–∞–ª–∏—Ç—å!",
          style: 1,
          customId: "bot_hi"
        },
        {
          type: 2,
          label: "–°–µ—Ä–≤–µ—Ä",
          style: 5,
          url: "https://discord.gg/76hCg2h7r8",
          emoji: {name: "grempen", id: "753287402101014649"}
        },
        {
          type: 2,
          label: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å",
          style: 5,
          url: `https://discord.com/api/oauth2/authorize?client_id=${ client.user.id }&permissions=1073741832&scope=applications.commands%20bot`,
          emoji: {name: "berry", id: "756114492055617558"}
        }
      ]
    };

    msg.msg(embed);
  }, {delete: true, cooldown: 10, cooldownTry: 2, type: "bot"}, "–±–æ—Ç stats —Å—Ç–∞—Ç—Å ping –ø–∏–Ω–≥ —Å—Ç–∞—Ç–∞ invite –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"),

  top: new Command(async (msg, interaction) => {
    let guild = msg.guild;
    let others = ["637533074879414272", "763767958559391795", "630463177314009115", "üß§", "üìú", "‚öúÔ∏è", (guild.data.boss?.isArrived ? "‚öîÔ∏è" : null)];

    let users = guild.members.cache.map(e => e.user).filter(el => !el.bot && !el.data.profile_confidentiality).sort((b, a) => ( (a.data.level - 1) * 22.5 * a.data.level + a.data.exp) - ( (b.data.level - 1) * 22.5 * b.data.level + b.data.exp));
    let rangs, sort;

    let pages = [];

    let page = 0;
    let embed = {fields: pages[0], author: {name: `–¢–æ–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${ guild.name }`, iconURL: guild.iconURL()}, title: "–ó–∞–≥—Ä—É–∑–∫–∞ –¢–æ–ø–∞.."};
    if (pages[1]) embed.footer = {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`};
    let message = await msg.msg(embed);
    let react = "763767958559391795";
    let index = -1;


    embed.edit = true;

    while (true){
      switch (react) {
        case "640449832799961088": page++;
        break;
        case "640449848050712587": page--;
        break;


        case "637533074879414272":
          // coins
          sort = users.sort((a, b) => (b.data.coins + b.data.berrys * DataManager.data.bot.berrysPrise) - (a.data.coins + a.data.berrys * DataManager.data.bot.berrysPrise));
          index = sort.indexOf(msg.author);
          rangs = sort.map((e, i) => {
            let name = (i + 1) + ". " + ((e.id == msg.author.id) ? (e.username) : e.username);
            let value = `‚Äî ${e.data.coins} (${ Math.floor( e.data.coins + e.data.berrys * DataManager.data.bot.berrysPrise ) }) <:coin:637533074879414272>`;
            return {name, value};
          });
          break;

        case "763767958559391795":
          // level
          sort = users.sort((b, a) => ( (a.data.level - 1) * 22.5 * a.data.level + a.data.exp) - ( (b.data.level - 1) * 22.5 * b.data.level + b.data.exp));
          index = sort.indexOf(msg.author);
          rangs = sort.map((e, i) => {
            let name = ((i == 0) ? "<a:crystal:637290417360076822> " : (i == 1) ? "<:crys3:763767653571231804> " : (i == 2) ? "<:crys2:763767958559391795>" : "<:crys:637290406958202880> ") + (i + 1) + ". " + ((e.id == msg.author.id) ? (e.username) : e.username);
            let value = `–£—Ä–æ–≤–µ–Ω—å: **${ e.data.level }** | –û–ø—ã—Ç–∞: ${(e.data.level - 1) * 22.5 * e.data.level + e.data.exp}`;
            return {name, value};
          });
          break;

        case "630463177314009115":
          // praises
          sort = users.filter(e => e.data.praiseMe).sort((a, b) => (b.data.praiseMe.length) - (a.data.praiseMe.length));
          index = sort.indexOf(msg.author);
          if (!msg.author.data.praiseMe) msg.author.data.praiseMe = [];
          rangs = sort.map((e, i) => {
            let name = (i + 1) + ". " + ((e.id == msg.author.id) ? (e.username) : e.username);
            let value = "‚Äî –ë—ã–ª –ø–æ—Ö–≤–∞–ª–µ–Ω " + Util.ending(e.data.praiseMe.length, "—Ä–∞–∑", "", "", "–∞") + " <:wellplayed:630463177314009115>";
            return {name, value};
          });
          break;

        case "üß§":
          // thief
          sort = users.sort((a, b) => ((b.data.thiefGloves ? +b.data.thiefGloves.split("|")[1] : 0) + ~~b.data.thiefWins / 5) - ((a.data.thiefGloves ? +a.data.thiefGloves.split("|")[1] : 0) + ~~a.data.thiefWins / 5));
          index = sort.indexOf(msg.author);
          rangs = sort.map((e, i) => {
            let name = (i + 1) + ". " + e.username;
            let value = `–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—á–∞—Ç–æ–∫: \`${e.data.thiefGloves || "0|0"}\` > –û—Ç–±–∏—Ç–æ –∞—Ç–∞–∫: ${e.data.thiefWins | 0}`.replace(/-/g, "!");
            return {name, value};
          });
          break;

        case "üìú":
          // quests
          sort = users.filter(e => e.data.dayQuests).sort((a, b) => (b.data.dayQuests) - (a.data.dayQuests));
          index = sort.indexOf(msg.author);
          rangs = sort.map((e, i) => {
            let name = ((i == 0) ? "<a:cupZ:806813908241350696> " : (i == 1) ? "<a:cupY:806813850745176114> " : (i == 2) ? "<a:cupX:806813757832953876> " : "") + (i + 1) + ". " + e.username;
            let value = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: ${e.data.dayQuests || 0} | –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: ${(e.data.completedQuest || []).length}/${Object.values(quests.names).length}`;
            return {name, value};
          });
          break;

        case "‚öúÔ∏è":
          // void
          sort = users.filter(e => e.data.voidRituals).sort((a, b) => (b.data.voidRituals) - (a.data.voidRituals));
          index = sort.indexOf(msg.author);
          rangs = sort.map((e, i) => {
            let name = (i + 1) + ". " + ((e.id == msg.author.id) ? "?".repeat(e.username.length) : e.username) + ((i == 0) ? " <a:neonThumbnail:806176512159252512>" : "") + (random(9) ? "" : " <a:void:768047066890895360>");
            let value = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–ª–∞ ${random(3) ? e.data.voidRituals : "???"}`;
            return {name, value};
          });
          break;

        case "‚öîÔ∏è":
          sort = users.filter(user => guild.data.boss.users[user.id]?.damageDealt).sort((a, b) => guild.data.boss.users[b.id].damageDealt - guild.data.boss.users[a.id].damageDealt);
          index = sort.indexOf(msg.author);
          rangs = sort.map((user, i) => {
            const name = `${ i + 1 }. ${ user.username }`;
            const value = `–í–µ–ª–∏–∫–∏–π –≤–æ–∏–Ω –Ω–∞–Ω—ë—Å ${ guild.data.boss.users[user.id].damageDealt }–µ–¥. —É—Ä–æ–Ω–∞`;
            return {name, value};
          });
          break;

        default: return;
      }

      if (react != "640449848050712587" && react != "640449832799961088"){
        page = 0;
        pages = [];
        while (rangs.length) pages.push(rangs.splice(0, 15));
      }
      embed.message = index !== -1 ? `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ ${ index + 1 } –º–µ—Å—Ç–µ, ${ msg.author.username }` : `–í—ã –Ω–µ —á–∏—Å–ª–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Ç–æ–ø–µ, ${ msg.author.username }`
      embed.footer = (pages[1]) ? {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`} : null;
      embed.fields = (pages[0]) ? pages[page] : [{name: "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª –≤ —Ç–æ–ø", value: "–ó–Ω–∞—á–∏—Ç –≤—ã –ª—ë–≥–∫–æ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º(-–æ–π)"}];

      message = await message.msg(embed);
      react = await message.awaitReact({user: msg.author, type: "all"}, (page != 0 ? "640449848050712587" : null), ((pages[1] && page != pages.length - 1) ? "640449832799961088" : null), ...others.filter(e => e != react));
    }

  }, {delete: true, dm: true, Permissions: 16384, cooldown: 20, type: "user"}, "—Ç–æ–ø —Ä–∞–Ω–≥–∏ rank ranks rangs –ª–∏–¥–µ—Ä—ã leaderboard leaders"),

  mute: new Command(async (msg, interaction) => {
    let guild = msg.guild;
    let guildMember = guild.members.resolve(interaction.mention);
    let role;



    if (interaction.mention === msg.author)
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Å–µ–±–µ –º—É—Ç, –º–æ–≥—É —Ç–æ–ª—å–∫–æ –≤–∞–º –µ–≥–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å.", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});

    if (interaction.mention === client.user)
      return msg.msg({title: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –º–µ–Ω—è –∑–∞–º—É—Ç–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä—è–≤–∏—Ç–µ –∑–∞ –º–æ—é –ø–æ–∏–º–∫—É –Ω–∞–≥—Ä–∞–¥—É –≤ 100 000 –∫–æ–∏–Ω–æ–≤ <:coin:637533074879414272>", delete: 12000});

    if (interaction.mention.bot)
      return msg.msg({title: "–ï—Å–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –≤–∞–º –Ω–∞–¥–æ–µ–¥–∞–µ—Ç, —Ç–æ –∑–Ω–∞–π—Ç–µ ‚Äî –º–Ω–µ –æ–Ω —Ç–æ–∂–µ –Ω–∞–¥–æ–µ–ª", description: "–ù–æ –∑–∞–º—É—Ç–∏—Ç—å –µ–≥–æ —è –≤—Å–µ-—Ä–∞–≤–Ω–æ –Ω–µ –º–æ–≥—É.", delete: 12000});

    if (guildMember.roles.highest.position > interaction.mentioner.roles.highest.position)
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É, —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã—à–µ –≤–∞—à–∏—Ö", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});

    if (guildMember.permissions.has("ADMINISTRATOR"))
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É, —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});




    interaction.params = interaction.params.replace(RegExp(`<@!?${interaction.mention.id}>`), "").trim();


    // parse timestamps
    let timeToEnd = 0;

    while (true){
      let regBase = `(\\d+?)\\s*(d|–¥|h|—á|m|–º|s|—Å)[a-zA-Z–∞-—è–ê-–Ø]*`;
      const reg = RegExp(`^${ regBase }|${ regBase }$`);
      let matched = interaction.params.match( reg );

      if (!matched){
        break;
      }

      if (matched[3]){
        matched[1] = matched[3];
        matched[2] = matched[4];
      }

      let [value, timeType] = [ matched[1], matched[2] ];

      interaction.params = interaction.params.replace(matched[0], "").trim();
      timeToEnd += value * {s: 1000, m: 60000, h: 3600000, d: 84000000, —Å: 1000, –º: 60000, —á: 3600000, –¥: 84000000}[timeType];
    }

    let cause = interaction.params;


    // find muted role
    if (guild.data.mute_role)
      role = guild.roles.cache.get(guild.data.mute_role);

    if (!role){
      role =
        guild.roles.cache.find(e => "mute muted –∑–∞–º—É—á–µ–Ω –º—å—é—Ç –º—É—Ç –∑–∞–º—å—é—á–µ–Ω".includes(e.name.toLowerCase()))
        ||
        await guild.roles.create({data: {name: "MUTED", color: "#a8a8a8", permissions: ["VIEW_CHANNEL"]}});

      guild.data.mute_role = role.id;
    }

    if (guildMember.roles.cache.get(role.id)){
      msg.msg({title: "–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ", color: "#ff0000"});
      return;
    }


    if (timeToEnd){
      TimeEventsManager.create("offMuteAutomatic", timeToEnd, [msg.guild.id, guildMember.id]);
      timeToEnd = new Intl.DateTimeFormat("ru-ru", {day: "numeric", month: "numeric", hour: "2-digit", minute: "2-digit"}).format(Date.now() + timeToEnd);
    }

    guildMember.roles.add(role, `Muted from ${msg.author.id}`);

    await Util.sleep(700);

    let embed = {
      description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${guildMember} –±—ã–ª –∑–∞–º—É—á–µ–Ω.${cause ? `\n–ü—Ä–∏—á–∏–Ω–∞: ${cause}` : ""}${timeToEnd ? `\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç —Å–Ω—è—Ç—ã ${timeToEnd}` : ""}`,
      color: "#de3c37",
      author: {name: guildMember.displayName, iconURL: guildMember.user.displayAvatarURL()},
      footer: {text: `–ú—É—Ç –≤—ã–¥–∞–ª ${msg.author.username}`, iconURL: msg.author.avatarURL()}
    }
    msg.guild.logSend({...embed, title: "–£—á–∞—Å—Ç–Ω–∏–∫—É –≤—ã–¥–∞–Ω –º—É—Ç"});
    msg.msg({...embed, title: "–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –∑–∞–º—É—á–µ–Ω"});
  }, {memb: true, dm: true, delete: true, Permissions: 4194304, myPermissions: 268435456, type: "guild"}, "–º—É—Ç –º—å—é—Ç"),

  unmute: new Command(async (msg, interaction) => {
    let guild = msg.guild;
    let guildMember = guild.members.resolve(interaction.mention);
    let role;



    if (interaction.mention === msg.author)
      return msg.msg({title: "–ï—Å–ª–∏ –≤—ã —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—ã –Ω–µ –≤ –º—É—Ç–µ, –≤–µ—Ä–Ω–æ?", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});

    if (interaction.mention === client.user)
      return msg.msg({title: "–ë–ª–∞–≥–æ–¥–∞—Ä—é, –Ω–æ —è –Ω–µ –≤ –º—É—Ç–µ", delete: 12000});

    if (interaction.mention.bot)
      return msg.msg({title: "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–µ–≥–µ–Ω–¥–∞ –æ.. –ê –≤–ø—Ä–æ—á–µ–º –Ω–µ –≤–∞–∂–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º—É—Ç–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", description: "–ù–æ –∑–∞–º—É—Ç–∏—Ç—å –µ–≥–æ —è –≤—Å–µ-—Ä–∞–≤–Ω–æ –Ω–µ –º–æ–≥—É.", delete: 12000});

    if (guildMember.roles.highest.position > interaction.mentioner.roles.highest.position)
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã—à–µ –≤–∞—à–∏—Ö", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});

    if (guildMember.permissions.has("ADMINISTRATOR"))
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–∞–∫ –±—ã —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ –Ω–µ –∑–≤—É—á–∞–ª–æ.", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, delete: 12000});



    // find muted role
    if (guild.data.mute_role)
      role = guild.roles.cache.get(guild.data.mute_role);

    if (!role){
      role =
        guild.roles.cache.find(e => "mute muted –∑–∞–º—É—á–µ–Ω –º—å—é—Ç –º—É—Ç –∑–∞–º—å—é—á–µ–Ω".includes(e.name.toLowerCase()))
        ||
        await guild.roles.create({data: {name: "MUTED", color: "#a8a8a8", permissions: ["VIEW_CHANNEL"]}});

      guild.data.mute_role = role.id;
    }



    if (!guildMember.roles.cache.get(role.id)){
      msg.msg({title: "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ –º—É—Ç–∞", description: `–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–∞—Ö, –∑–∞–º—É—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1—Å –∏–ª–∏ –≤—ã–¥–∞–π—Ç–µ –∏ –∑–∞–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å ${role}`, color: "#ff0000"});
      return;
    }

    guildMember.roles.remove(role);


    let embed = {
      description: `–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–∞—Ö`,
      color: "#de3c37",
      author: {name: guildMember.displayName, iconURL: guildMember.user.displayAvatarURL()},
      footer: {text: `–ú—É—Ç c–Ω—è–ª ${msg.author.username}`, iconURL: msg.author.avatarURL()}
    }

    msg.guild.logSend({title: "–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–Ω—è—Ç –º—É—Ç", ...embed});
    msg.msg({title: "–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–Ω—è–ª–∏ –º—É—Ç", ...embed});
  }, {memb: true, dm: true, delete: true, Permissions: 4194304, myPermissions: 268435456, type: "guild"}, "–∞–Ω–º—É—Ç –∞–Ω–º—å—é—Ç"),

  reactor: new Command(async (msg, interaction) => {
    let answer = await Util.awaitUserAccept({name: "reactor", message: {title: "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–µ–µ —Ä–æ–ª–∏. \n–†–µ–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ\n–í—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏–∏?)"}, channel: msg.channel, userData: interaction.userData});
    if (!answer) return;

    let whatChannel = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï—Å–ª–∏ –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ, –Ω–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ"});
    answer = await Util.awaitReactOrMessage(whatChannel, msg.author, "640449832799961088");
    whatChannel.delete();

    if (answer instanceof Discord.Message) {
      answer.delete();
    }

    let channel = answer === "640449832799961088" ? msg.channel : (answer.mentions.channels.first() || msg.guild.channels.cache.get(answer.content));
    if (!channel) {
      msg.msg({title: "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", delete: 3000, color: "#ff0000"});
      return;
    }

    let whatMessage = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"});
    answer = await msg.channel.awaitMessage({user: msg.author});
    whatMessage.delete();
    let message = await channel.messages.fetch(answer.content).catch( e => {msg.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ", delete: 3000, color: "#ff0000"}); throw e} );

    let reactions = [...message.reactions.cache.keys()];
    if (!reactions.length) {
      let whatReactions = await msg.msg({title: "–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —Å–µ–π—á–∞—Å.\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∏–∂–µ."});
      while (true){
        let react = await whatReactions.awaitReact({user: msg.author, type: "all"}, "685057435161198594");
        if (!react) {
          return;
        }

        reactions = [...message.reactions.cache.keys()];
        if (!reactions.length) client.api.channels(msg.channel.id).messages.post({data: {"content": "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–¥ –ø—Ä–∏–∫–ª–µ–ø–ª—ë–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", "message_reference": {message_id: channel.id}}});
        else {
          break;
        }
      }
      whatReactions.delete();
    }

    let whatRoles = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏"});
    answer = await msg.channel.awaitMessage({user: msg.author, time: 300000});
    whatRoles.delete();

    let rolesId = answer.content.match(/\d{17,20}/g);
    if (!rolesId) {
      msg.msg({title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–æ–ª–µ–π`, delete: 5000, color: "#ff0000"});
      return;
    }

    let roles = rolesId.map(el => channel.guild.roles.cache.get(el)).filter(el => el);
    if (rolesId.length !== roles.length) {
      msg.msg({title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–¥–µ–Ω—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º: ${rolesId.filter(el => !roles.map(el => el.id).includes(el)).join(" ")}`, delete: 5000, color: "#ff0000"});
      return;
    }

    if (roles.length > reactions.length) {
      msg.msg({title: "–†–æ–ª–µ–π —É–∫–∞–∑–∞–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º —Å—Ç–æ–∏—Ç —Ä–µ–∞–∫—Ü–∏–π –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", delete: 5000, color: "#ff0000"});
      return;
    }

    if (roles.length < reactions) {
      answer = await msg.msg({title: "–†–æ–ª–µ–π —É–∫–∞–∑–∞–Ω–æ –º–µ–Ω—å—à–µ, —á–µ–º —Å—Ç–æ–∏—Ç —Ä–µ–∞–∫—Ü–∏–π –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"});
      let react = await answer.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "‚ùå");

      if (react != "685057435161198594") {
        msg.msg({title: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", delete: 4500});
        return;
      }
    }

    // let settings = {
    //
    // }

    let obj = {};
    roles.forEach((e, i) => obj[reactions[i]] = e.id);
    new ReactionsManager(message.id, channel.id, channel.guild.id, "reactor", obj);

    msg.msg({title: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", description: `–°–æ–æ–±—â–µ–Ω–∏—é —Å ID ${message.id} –±—ã–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–∏–µ —Å–ª–µ–¥—É—â–∏–µ —Ä–æ–ª–∏:\n${roles.map(e => " ‚Ä¢ " + e.name).join("\n")}`, delete: 9000});
    msg.guild.logSend({title: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", description: `–°–æ–æ–±—â–µ–Ω–∏—é —Å ID ${message.id} –±—ã–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–∏–µ —Å–ª–µ–¥—É—â–∏–µ —Ä–æ–ª–∏:\n${roles.map(e => " ‚Ä¢ " + e.name).join("\n")}`});
  }, {dm: true, delete: true, Permissions: 268435488, myPermissions: 268435456, cooldown: 30, type: "guild"}, "—Ä–µ–∞–∫—Ç–æ—Ä"),

  setprofile: new Command(async (msg, interaction) => {
    let
      user  = interaction.userData,
      args  = interaction.params.split(" "),
      value = args.splice(1).join(" "),
      item  = args[0].toLowerCase();

      if (!["description", "–æ—Å–µ–±–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ", "color", "—Ü–≤–µ—Ç", "birthday", "–¥—Ä", "confidentiality", "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"].includes(item)) {
        let problemsMessage = await msg.msg({title: "<a:who:638649997415677973> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", delete: 10000, description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n`‚Ä¢ –æ—Å–µ–±–µ/description`\n`‚Ä¢ —Ü–≤–µ—Ç/color`\n`‚Ä¢ –¥—Ä/birthday`\n`‚Ä¢ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/confidentiality`"});

        //** –†–µ–∞–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫
        let react = await problemsMessage.awaitReact({user: msg.author, type: "all"}, "‚ùì");
        if (!react){
          return;
        }

        let helper = await commands.commandinfo.code(msg, {args: "setprofile"});
        await Util.sleep(20000);
        helper.delete();
        /**/

        return;
      }

      if (!value) {
        msg.msg({title: "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ", delete: 3000});
        return;
      }

      switch (item) {
        case "description":
        case "–æ–ø–∏—Å–∞–Ω–∏–µ":
        case "–æ—Å–µ–±–µ":
          let minus = (value.match(/<a?:.+?:\d+?>|\\?!\{.+?\}/g) || []).join("").length;
          if (value.length - minus > 121) return msg.msg({title: "–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 120 —Å–∏–º–≤–æ–ª–æ–≤", delete: 5000, color: "#ff0000", description: `–í–∞—à–∞ –¥–ª–∏–Ω–∞: ${value.length - minus}\n–¢–µ–∫—Å—Ç:\n${value}`});
          let line = "";
          let lineMinus = 0;
          minus = 0;

          let words = value.split(" ");
          value = "";
          for (let i = 0; i < words.length; i++){
            let e = words[i];

            lineMinus += (e.match(/<a?:.+?:\d+?>|\\?!\{.+?\}/g) || []).join("").length;
            let indent;
            if (indent = e.match(/\n/)) {
              words.splice(i + 1, 0, e.slice(indent.index + 1));
              value += `${line} ${e.slice(0, indent.index)}\n`;
              line = "";
              lineMinus = 0;
              continue;
            }

            if (line.length - lineMinus + e.length < 30) {
              line += " " + e;
            }
            else {
              value += line + "\n" + e;
              line = "";
              lineMinus = 0;
            }
          }
          value += line;

          user.profile_description = value;
          msg.msg({title: `–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`, delete: 5000})
        break;

        case "color":
        case "—Ü–≤–µ—Ç":
          if (value == "0"){
             delete user.profile_color;
             msg.msg({title: "–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç —É–¥–∞–ª—ë–Ω", delete: 5000})
          }

          let color = value.match(/[abcdef0-9]{6}|[abcdef0-9]{3}/i);
          if (!color) {
            return msg.msg({title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX `#38f913`", color: "#ff0000", delete: 5000});
          }
          color = color[0].toLowerCase();
          color = color.length === 3 ? [...color].map(e => e + e).join("") : color;

          user.profile_color = color;
          msg.msg({title: `–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω #${color.toUpperCase()}\n–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç –≤ –∑–Ω–∞—á–µ–Ω–∏–µ 0`, color: color, delete: 5000});
        break;

        case "birthday":
        case "–¥—Ä":
          if (user.BDay){
            let prise = [1200, 3000, 12000][user.chestLevel];
            let message = await msg.msg({title: `–í—ã —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –≤–∞–º ${prise} –∫–æ–∏–Ω–æ–≤\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`});
            let react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");

            if (react != "685057435161198594"){
              return msg.msg({title: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", color: "#ff0000", delete: 4000});
            }
            if (user.coins < prise){
              return msg.msg({title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤", color: "#ff0000", delete: 4000});
            }
            user.coins -= prise;
          }

          let day = value.match(/\d\d\.\d\d/);
          if (!day){
            return msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"19.11\" - –¥–µ–Ω—å, –º–µ—Å—è—Ü", color: "#ff0000", delete: 5000});
          }

          day = day[0];

          const [date, month] = day.split(".").map(Number);
          if (date > 31 || date < 1 || month < 1 || month > 12){
            return msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"19.11\" - –¥–µ–Ω—å, –º–µ—Å—è—Ü", color: "#ff0000", delete: 5000});
          }
          user.BDay = day;
          msg.author.action(Actions.globalQuest, {name: "setBirthday"});
          msg.msg({title: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üéâ", delete: 3000});
        break;

        case "confidentiality":
        case "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
          let message = await msg.msg({title: `–†–µ–∂. –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ${user.profile_confidentiality ? "–≤–∫–ª—é—á–µ–Ω, –æ—Ç–ª—é—á–∏—Ç—å?" : "–≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∏—Ç—å?"}`});
          let react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
          if (react != "685057435161198594") {
            return msg.msg({title: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", color: "#ff0000", delete: 4000});
          }
          user.profile_confidentiality = user.profile_confidentiality ? false : true;
        break;
      }
  }, {delete: true, cooldown: 20, cooldownTry: 5, type: "user"}, "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å–ø—Ä–æ—Ñ–∏–ª—å about –æ—Å–µ–±–µ sp –Ω–ø"),

  voice: new Command(async (msg, interaction) => {
    return false;
    let connection;
    if (msg.member.voice.channel) connection = await msg.member.voice.channel.join();
    else msg.msg({title: "–ë—ã—Å—Ç—Ä–æ –∑–∞—à—ë–ª –≤ –≤–æ–π—Å!"});


    const dispatcher = connection.play(ytdl('https://youtu.be/tbr9dXoFKh8', { filter: 'audioonly' }));
    //main/images/one.mp3
  }, {dm: true, type: "dev"}, "–≤–æ–π—Å"),

  birthdays: new Command(async (msg, interaction) => {
    const splitDate = (date) => date.split(".").map(Number);

    const [currentDay, currentMonth] = splitDate(DataManager.data.bot.dayDate);



    const users = msg.guild.members.cache
      .map(member => member.user)
      .filter(user => user.data.BDay && !user.data.profile_confidentiality);

    const sortByDate = (userA, userB) => {
      const [aDay, aMonth] = splitDate(userA.data.BDay);
      const [bDay, bMonth] = splitDate(userB.data.BDay);


      if (aMonth !== bMonth){
        return (-1) ** (aMonth < bMonth);
      }

      if (aDay !== bDay){
        return (-1) ** (aDay < bDay);
      }

      return 0;
    };

    const usersByBirthdays = {
      inThisYear: [],
      inNextYear: []
    }

    const checkInThisYear = (day, month) => 
        month > currentMonth ||
        month === currentMonth && day >= currentDay;
    

    users.forEach(user => {
      const [day, month] = splitDate(user.data.BDay);

      const inThisYear = checkInThisYear(day, month);
      
      inThisYear ?
        usersByBirthdays.inThisYear.push(user) :
        usersByBirthdays.inNextYear.push(user);

    });


    const sortedUsers = usersByBirthdays.inThisYear.length >= 20 ?
      usersByBirthdays.inThisYear.sort(sortByDate) :
      [...usersByBirthdays.inThisYear.sort(sortByDate), ...usersByBirthdays.inNextYear.sort(sortByDate)];


    const daysTo = ({date: [day, month], current}) => {
      const year = new Date().getFullYear() + (+!current);
      const compare = new Date(`${ year }.${ month }.${ day }`);

      const diff = compare.getTime() - Date.now();
      return Math.ceil(diff / 86_400_000);
    }

    const toField = (user) => {
      const isToday = user.data.BDay === DataManager.data.bot.dayDate;
      const inThisYear = checkInThisYear(...splitDate(user.data.BDay));

      const dateContent = isToday ? "—Å–µ–≥–æ–¥–Ω—è! üéÅ" : user.data.BDay;
      const inDaysContent = ` (—á–µ—Ä–µ–∑ ${ daysTo({current: inThisYear, date: splitDate(user.data.BDay)}) }–¥.)`;
      const name = `${ dateContent }${ inDaysContent }`;
      const value = user.tag;
      return {name, value, inline: true};
    };

    const fields = sortedUsers.length ?
      sortedUsers
        .slice(0, 20)
        .map(toField) :
      [{name: "–ù–∏–∫—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è", value: "–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ ‚Äî `!–Ω–ø –¥—Ä <date>`"}];


    const birthdaysToday = DataManager.data.bot.clearParty || 0;

    const title = "üéâ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è!";
    const description = `–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞—Ç—ã –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–ª–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`;
    const footer = { text: birthdaysToday ? `–ü—Ä–∞–∑–¥–Ω—É—é—â–∏—Ö —Å–µ–≥–æ–¥–Ω—è: ${ birthdaysToday }` : "glhf" };

    msg.msg({title: title, description, fields, footer});
  }, {delete: true, cooldown: 15, type: "user"}, "parties –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –¥–Ω–∏—Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä"),

  emojis: new Command(async (msg, interaction) => {

    if (interaction.params){
      let id = Util.match(interaction.params, /\d{17,21}/);
      if (!id){
        msg.msg({title: "–ù–µ —Å–º–∞–π–ª–∏–∫", description: `\`${interaction.params}\` ‚Äî –Ω–µ —ç–º–æ–¥–∑–∏, –∏ –Ω–µ –∞–π–¥–∏.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–í–≤–µ–¥—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–∞–π–ª–∏–∫–∞, –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º`, color: "#ff0000", delete: 5000});
        return;
      }

      let emoji = client.emojis.cache.get(id);
      if (!emoji){
        msg.msg({title: "–≠—Ç–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç.", description: "–¢–∞–∫–æ–≥–æ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ –Ω—ë–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ", delete: 5000});
        return;
      }

      let author = await emoji.fetchAuthor();
      const fields = [{name: "–ò–º—è:", value: "`" + emoji.name + "`", inline: true}, {name: "–≠–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–∏–ª:", value: author.tag, inline: true}, {name: "–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ", value: Util.timestampToDate(Date.now() - emoji.createdTimestamp, 4) + " –Ω–∞–∑–∞–¥."}];
      msg.msg({title: "–û –Ω—ë–º:", description: `> ${ emoji.toString() }`, thumbnail: emoji.url, author: {name: `–≠–º–æ—Ç–∏–∫–æ–Ω :>\n–° —Å–µ—Ä–≤–µ—Ä–∞ ${ emoji.guild.name }`, iconURL: emoji.guild.iconURL()}, footer: {text: `ID: ${ emoji.id }`}, fields});
      return;
    };

    let emojis = msg.guild.emojis.cache.sort( (a, b) => b.  animated - a.animated || ((b.name > a.name) ? -1 : (b.name < a.name) ? 1 : 0) ).map(e => e.toString() + "  " + e.id);

    let pages = [];
    let page = 0;
    while (emojis.length) pages.push(emojis.splice(0, 20));
    if (!pages[0]) {
      return msg.msg({title: "<a:google:638650010019430441> –≠–º–æ—Ç–∏–∫–æ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞!", description: "–ù–æ —Ç—É—Ç –ø–æ—á–µ–º—É-—Ç–æ –ø—É—Å—Ç–æ... üêò"})
    }

    let embed = {
      title: "<a:google:638650010019430441> –≠–º–æ—Ç–∏–∫–æ–Ω—ã!!",
      description: pages[page].join("\n"),
      thumbnail: msg.guild.emojis.cache.random().url
    };
    if (pages[1]) embed.footer = {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`};

    let message = await msg.msg(embed);


    let react = await message.awaitReact({user: msg.author, type: "all"}, (pages[1]) ? "640449832799961088" : null);
    embed.edit = true;

    while (true){
      switch (react) {
        case "640449832799961088":
          page++;
          break;
        case "640449848050712587":
          page--;
          break;
        default: return;
      }

      embed.footer = {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`};
      embed.description = pages[page].join("\n");

      embed.thumbnail = msg.guild.emojis.cache.random().url;
      message = await message.msg(embed);
      react = await message.awaitReact({user: msg.author, type: "all"}, (page != 0 ? "640449848050712587" : null), (page + 1 != pages.length ? "640449832799961088" : null));
    }


  }, {delete: true, cooldown: 7, cooldownTry: 3, type: "other"}, "emoji —Å–º–∞–π–ª–∏–∫–∏ —ç–º–æ–¥–∑–∏ —ç–º–æ–¥–∂–∏"),

  idea: new Command(async (msg, interaction) => {
    let heAccpet = await Util.awaitUserAccept({name: "idea", message: {title: "<a:crystal:637290417360076822> –ü–æ–¥–∞—Ç—å –∏–¥–µ—é", description: "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–í—Å—ë –∏–¥–µ–∏ –ø–æ–ø–∞–¥–∞—é—Ç **[—Å—é–¥–∞.](https://discord.gg/76hCg2h7r8)**"}, channel: msg.channel, userData: interaction.userData});
    if (!heAccpet) return msg.author.msg({title: "–í–∞—à–∞ –∏–¥–µ—è –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É", description: "–¢–µ–∫—Å—Ç –∏–¥–µ–∏:\n" + interaction.params, color: "#ff0000"});

    let channel = client.guilds.cache.get("752898200993660959").channels.cache.get("753587805195862058");

    const getIdeaNumber = async () => {
      const messages = await channel.messages.fetch();
      const lastIdeaMessage = messages.find(message => message.author === client.user);
      return +match(lastIdeaMessage.embeds[0].author.name, /#\d+/).slice(1);
    }


    const ideaNumber = await getIdeaNumber();

    channel.msg({title: "<:meow:637290387655884800> –ö–∞–∫–∞—è –∫–ª–∞—Å—Å–Ω–∞—è –∏–¥–µ—è!", 
      description: "**–ò–¥–µ—è:**\n" + interaction.params, color: interaction.userData.profile_color || "00ffaf",
      author: {
        name: `${msg.author.username} #${ ideaNumber + 1 }`,
        iconURL: msg.author.avatarURL()
      },
      reactions: ["814911040964788254", "815109658637369377"]});
    msg.msg({title: "<:meow:637290387655884800> –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–º —Å–≤–æ—é –∏–¥–µ—é! –°–ø–∞—Å–∏–±–æ!", description: `–ê —á—Ç–æ, –∏–¥–µ—è ¬´${interaction.params}¬ª –≤–µ—Å—å–º–∞ –Ω–µ –ø–ª–æ—Ö–∞...`, color: "#00ffaf", author: {name: msg.author.username, iconURL: msg.author.avatarURL()} });
  }, {args: true, cooldown: 1200, cooldownTry: 2, delete: true, type: "bot"}, "–∏–¥–µ—è innovation –Ω–æ–≤–≤–æ–≤–µ–¥–µ–Ω–∏–µ"),

  grempen: new Command(async (msg, interaction) => {

    if (interaction.mention){
      const data = interaction.mention.data;
      const wordNumbers = ["–Ω–æ–ª—å", "–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å", "–¥–µ—Å—è—Ç—å"];

      const getList = (mask) => wordNumbers.filter((word, index) => (2 ** index) & mask);
      const list = getList(data.grempen || 0);

      const buyingItemsContent = data.shopTime === Math.floor(Date.now() / 86400000) && data.grempen ?
        `–ø—Ä–∏–æ–±—Ä–µ–ª ${  Util.ending(list.length, "—Ç–æ–≤–∞—Ä", "–æ–≤", "", "–∞") } –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: ${ Util.joinWithAndSeparator( list.sort(Math.random) ) }. –ï—Å–ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å –Ω—É–ª—è –∫–æ–Ω–µ—á–Ω–æ-–∂–µ.` :
        "—Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª.\n–ú–æ–∂–µ—Ç –í—ã —Å–∞–º–∏ –∂–µ–ª–∞–µ—Ç–µ —á–µ–≥–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–∫—É–ø–∏—Ç—å?";

      const description = `–û—Ö, —Ç–∞–∫–∏ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–ª–æ–≤–µ–∫, –æ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ${ buyingItemsContent }`;
      msg.msg({title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞", description, color: "#541213", thumbnail: interaction.mention.avatarURL()});
      return;
    }


    let user = msg.author.data;

    const allItems = [
      {
        name: "ü¶¥ –ü—Ä–æ—Å—Ç–æ –ø–∞–ª–∫–∞",
        value: 244,
        inline: true,
        others: ["–ø–∞–ª–∫–∞", "–ø–∞–ª–∫—É"],
        fn: () => {
          let phrase = ".\n–í—ã –∫—É–ø–∏–ª–∏ –ø–∞–ª–∫—É. –≠—Ç–æ —Å–∞–º–∞—è –æ–±—ã—á–Ω–∞—è –ø–∞–ª–∫–∞, –∏ –≤—ã –µ—ë –≤—ã–±—Ä–æ—Å–∏–ª–∏.";
          if (user.monster){
            const DENOMINATOR  = 0.995;
            const COMMON_VALUE = 3;

            const MIN = 5;

            const max = (COMMON_VALUE * (1 - DENOMINATOR ** user.monster)) / (1 - DENOMINATOR) + MIN;
            const count = Math.ceil(
              Util.random(MIN, max)
            );
            phrase += `\n–í–∞—à–∏ —Ä—É—á–Ω—ã–µ –ú–æ–Ω—Å—Ç—Ä—ã, –ø–æ–≥–Ω–∞–≤—à–∏—Å—å –∑–∞ –Ω–µ–π, –Ω–∞—à–ª–∏ ${  Util.ending(count, "–∫–ª—é—á", "–µ–π", "", "–∞") }`;
            user.keys += count;
          }

          return phrase;
        }
      },
      {
        name: "üå∂Ô∏è –ñ–≥—É—á–∏–π –ø–µ—Ä—á–∏–∫",
        value: 160,
        inline: true,
        others: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—á–∏–∫"],
        fn: () => {
          if (user.chilli === undefined) {
            user.chilli = 0;
            msg.msg({title: "–û–∫–µ–π, –≤—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä–µ—Ü, –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å—Ç–µ –µ–≥–æ...", description: "–ö–æ–º–∞–Ω–¥–∞ –±—Ä–æ—Å–∫–∞ `!chilli @–ü–∏–Ω–≥`", delete: 12000});
          }

          user.chilli++;
          return ". \"–ì–æ—Ç–æ–≤—Ç–µ—Å—å –≥–ª—É–ø—Ü—ã, –≥—Ä—è–¥—ë—Ç —ç—Ä–∞ –ø–µ—Ä—á–∏–∫–æ–≤\"";
        }
      },
      {
        name: "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ –ø–µ—Ä—á–∞—Ç–Ω–∏–∫–∞",
        value: 700,
        inline: true,
        others: ["–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫–∞"],
        fn: () => {
          if (user.thiefGloves) {
            let [count, combo] = user.thiefGloves.split("|");
            count = +count + 2;
            user.thiefGloves = count + "|" + combo;
            delete user.CD_39;
          }
          else {
            user.thiefGloves = "2|0";
            msg.author.msg({title: "–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–æ –ø–µ—Ä—á–∞—Ç–∫–∏?", description: "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!rob`.\n**–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:**\n–í–∞—à–∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–≥—Ä–∞–±–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω –æ–Ω–ª–∞–π–Ω.\n–í —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –º–∏–Ω—É—Ç —É –æ–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–≥–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–≥–Ω–∞—Ç—å –≤–∞—Å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏.\n–ï—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç–µ—Å—å –¥–≤–∞–∂–¥—ã, —Ç–æ –ø–µ—Ä—á–∞—Ç–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî —ç–¥–∞–∫–∏–π —Ä–∏—Å–∫.\n–ù—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ —É–º–Ω—ã–º, –∏—Å–∫–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞.\n–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–∏—Ç—Ä—ã, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ø–∞–ª–∏–ª, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä—á–∞—Ç–∫–∏.\n–¶–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–±–∞–π—Ç–∏—Ç—å –≤–∞—Å –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∞—Å—Ç—å, –∞ –≤–æ—Ä, —Ç–æ –µ—Å—Ç—å –≤—ã, –¥–æ–ª–∂–µ–Ω –≤—ã–∂–¥–∞—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É."})
          }
          return ". _–†–µ–∂–∏–º –≤–æ—Ä–æ–≤–∏—Ç–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω._";
        }
      },
      {
        name: "üî© –°—Ç–∞—Ä—ã–π –∫–ª—é—á",
        value: 15,
        inline: true,
        others: ["–∫–ª—é—á", "–∫–ª—é—á–∏–∫", "key"],
        fn: () => {
          user.keys++;
          return " –∏ —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ? –ù–µ—Ç! –≠—Ç–æ –Ω–µ –§–∏–∫—Å–∏–∫!";
        }
      },
      {
        name: "üß™ –ë—É—Ç—ã–ª—ë–∫ –æ–ø—ã—Ç–∞",
        value: "???",
        inline: true,
        others: ["–æ–ø—ã—Ç", "–±—É—Ç—ã–ª—ë–∫"],
        fn: (product) => {
          const rand = Util.random(3, 7);
          const LIMIT = 15_000;
          const flaconPrice = Math.min(
            Math.ceil(user.coins / rand),
            LIMIT
          );
          user.exp += Math.ceil(flaconPrice * 0.8);

          product.value = flaconPrice;
          return `, –∫–∞–∫ –¥–æ—Ä–æ–≥—É—â–∏–π —Ñ–ª–∞–∫–æ–Ω –¥–∞–≤—à–∏–π –≤–∞–º —Ü–µ–ª—ã—Ö ${ Math.floor(flaconPrice * 0.8) } <:crys:637290406958202880>`;
        }
      },
      {
        name: "üê≤ –†—É—á–Ω–æ–π –º–æ–Ω—Å—Ç—Ä",
        value: 1999 + 1000 * Math.ceil((user.monstersBought ?? 0) / 3),
        inline: true,
        others: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–∞"],
        fn: () => {
          if (user.monster === undefined){
            user.monster = 0;
            user.monstersBought = 0;
            msg.msg({description: "–ú–æ–Ω—Å—Ç—Ä—ã –∑–∞—â–∏—â–∞—é—Ç –≤–∞—Å –æ—Ç –º–µ–ª–∫–∏—Ö –≤–æ—Ä–∏—à–µ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤–æ—Ä–æ–≤, —Ç–∞–∫–∂–µ –æ–Ω–∏ –æ—á–µ–Ω—å –ª—é–±—è—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–∞–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º–∏!", author: {name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", iconURL: client.user.avatarURL()}, delete: 5000});
          }
          user.monster++;
          user.monstersBought++;
          return ", –æ–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–≤–µ—Ä—è*";
        }
      },
      {
        name: "ü•´ –ö–æ–Ω—Å–µ—Ä–≤—ã –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        value: 1200,
        inline: true,
        others: ["–∫–æ–Ω—Å–µ—Ä–≤—ã", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
        fn: () => {
          if (user.iq === undefined){
            user.iq = Util.random(27, 133);
          }

          user.iq += Util.random(3, 7);
          return ".\n–í—ã –µ–¥–∏—Ç–µ —ç—Ç–∏ –∫–æ–Ω—Å–µ—Ä–≤—ã –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —É–º–Ω–µ–µ. –≠—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ—á–Ω–æ –±—ã–ª–∞ –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω–æ–π...";
        }
      },
      {
        name: "üçº –ë—É—Ç—ã–ª–∫–∞ –≥–ª—É–ø–æ—Å—Ç–∏",
        value: 400,
        inline: true,
        others: ["–±—É—Ç—ã–ª–∫–∞", "–±—É—Ç—ã–ª–∫—É", "–≥–ª—É–ø–æ—Å—Ç—å", "–≥–ª—É–ø–æ—Å—Ç–∏"],
        fn: () => {
          if (user.iq === undefined){
            user.iq = Util.random(27, 133);
          }

          user.iq -= Util.random(3, 7);
          return ".\n–ì—É-–≥—É, –≥–∞-–≥–∞?... –ü–æ—Ä–∞ —É—á–∏—Ç—Å—è...!";
        }
      },
      {
        name: "üëú –®—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞",
        value: 3200,
        inline: true,
        others: ["—à—É–±–∞", "—à—É–±—É", "—à—É–±–∞ –∏–∑ –µ–Ω–æ—Ç–∞"],
        fn: (product) => {
          let isFirst = !(user.completedQuest && user.completedQuest.includes("beEaten"));
          user.coins += product.value + (isFirst ? 200 : -200);
          msg.author.action(Actions.globalQuest, {name: "beEaten"});

          if (user.curses.length > 0){
            delete user.curses;
            return ", –∫–∞–∫ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∑–∞—â–∏—Ç–∏–≤—à–∏–π –≤–∞—Å –æ—Ç –ø—Ä–æ–∫–ª—è—Ç–∏—è";
          }

          return isFirst ?
            ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É –∏ –≤ –º–∏–≥ –±—ã–ª–∏ —Å—ä–µ–¥–µ–Ω—ã –æ–∑–ª–æ–±–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –µ–Ω–æ—Ç–æ–≤.\n–•–æ—Ä–æ—à–æ, —á—Ç–æ —ç—Ç–æ –±—ã–ª –≤—Å–µ–≥–æ-–ª–∏—à—å —Å–æ–Ω, –¥—É–º–∞–µ—Ç–µ –≤—ã...\n–ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–≤–æ—é —Å—Ç–∞—Ä—É—é —à—É–±—É –∏–∑ –∫—Ä–æ–ª–∏–∫–∞ –≤—ã –≤—ã–∫–∏–Ω—É–ª–∏." :
            ".\n–í—ã –Ω–∞–¥–µ–ª–∏ —à—É–±—É. –û–Ω–∞ –≤–∞–º –æ—á–µ–Ω—å –∏–¥—ë—Ç.";
        }
      },
      {
        name: user.voidCasino ? "ü•Ç Casino" : "üéüÔ∏è –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        value: user.voidCasino ? Math.floor(user.coins / 3.33) : 130,
        inline: true,
        others: ["–±–∏–ª–µ—Ç", "–ª–æ—Ç–µ—Ä–µ—è", "–ª–æ—Ç–µ—Ä–µ—é", "–∫–∞–∑–∏–Ω–æ", "casino", "–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç"],
        fn: () => {
          const coefficient = 220 / 130;
          const bet = user.voidCasino ? user.coins * 0.3 : 130;
          const odds = user.voidCasino ? 22 : 21;
          if (random(odds) > 8) {
            const victory = Math.ceil(bet * coefficient);
            user.coins += victory;
            return user.voidCasino ? `. –ö—É—à –ø–æ–ª—É—á–µ–Ω! ‚Äî ${ victory }` : ", –≤–µ–¥—å —Å –ø–æ–º–æ—â—å—é –Ω–µ—ë –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 220 <:coin:637533074879414272>!";
          }

          return user.voidCasino ? ". –ü—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑—å–º—ë—Ç–µ —Ä–µ–≤–∞–Ω—à –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑." : ", –∫–∞–∫ –±—É–º–∞–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Ç–∏—Ä–∞–Ω–∏—è. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü§™"
        }
      },
      {
        name: "üí° –ò–¥–µ—è",
        value: (user.iq && user.iq % 31 == DataManager.data.bot.dayDate.match(/\d{1,2}/)[0]) ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" : 80,
        inline: true,
        others: ["–∏–¥–µ—è", "–∏–¥–µ—é"],
        fn: (product) => {
          let ideas = [
            "–ø–æ–∑–Ω–∞—Ç—å –º–∏—Ä —à–∞–±–ª–æ–Ω–æ–≤",                 "–∫—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π –ª–∞–≤–∫–µ",     "–Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–ª—é—á–∏–∫–∏",
            "–∑–∞–Ω—è—Ç—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º",              "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",   "–∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å—É–Ω–¥—É–∫",
            "—É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä",                 "–∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–æ–≤",                "–≤—ã–ø–∏—Ç—å —Å–æ–¥–æ–≤—É—é –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å... –ø–∏–≤–∞?",
            "–ø—Ä–∏–¥—É–º–∞—Ç—å –∏–¥–µ—é",                       "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–µ—Ä—á–∏–∫–∞–º",    "–æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–¥–µ—Å—å –ø–∞—Å—Ö–∞–ª–∫–∏",
            "–∫—É–ø–∏—Ç—å —à—É–±—É",                          "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å",                      "—Å–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ",
            "–Ω–∞–∫–æ—Ä–º–∏—Ç—å –∑–ª–æ –¥–æ–±—Ä–æ—Ç–æ–π",               "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ",              "—Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å",
            "—É–ª—ã–±–Ω—É—Ç—å—Å—è",                           "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –ª—é–±–≤–∏",     "—Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è –¥–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ Infinity Train",
            "–ø—Ä–æ–π—Ç–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞",                      "–∑'—ó—Å—Ç–∏ –∫–æ–≥–æ-–Ω–µ–±—É–¥—å",             "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ñ–∏–ª—å–º",
            "–ø–æ–ª—é–±–∏—Ç—å?",                            "–≤–µ—Ä–Ω—É—Ç—å –º–Ω–µ –≤–µ—Ä—É –≤ —Å–µ–±—è",        "\\*–º–Ω–µ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –ø–∞—Å—Ö–∞–ª–æ–∫\\*",
            "–ø–æ–Ω—è—Ç—å ‚Äî –ø—Ä–æ–∫–ª—è—Ç—å—è ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ"
          ]
          const phrase = ["–∑–≤—É—á–∏—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ", "–ø–µ—á–µ–Ω—å–µ...", "–∑–∞—á–µ–º –≤–∞–º –≤—Å—ë —ç—Ç–æ –Ω–∞–¥–æ.", "–ª—É—á—à–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤—ã—Å–ø–∏—Ç–µ—Å—å.", "–ª—É—á—à–µ –∑–∞–π–º–∏—Ç–µ—Å—å –Ω–∏—á–µ–º.", "–∑–∞–Ω—è—Ç—Å—è –Ω–∏—á–µ–≥–æ–Ω–µ–¥–µ–ª–∞–Ω–∏–µ–º –≤—Å—ë-—Ä–∞–≤–Ω–æ –ª—É—á—à–µ."].random();
          return `.\n**–ò–¥–µ—è:** –í—ã –º–æ–≥–ª–∏ –±—ã ${ ideas.random() }, –Ω–æ ${ phrase }`;
        }
      },
      {
        name: "‚òòÔ∏è –°—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä",
        value: 400,
        inline: true,
        others: ["–∫–ª–µ–≤–µ—Ä", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–ª–µ–≤–µ—Ä", "clover"],
        fn: (product) => {
          const phrase = ". –ö–ª–µ–≤–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 —á–∞—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 15%!\n–î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.";
          const guild = msg.guild;
          const data = guild.data;

          if (!data.cloverEffect){
            data.cloverEffect = {
              coins: 0,
              timestamp: Date.now(),
              uses: 1
            };
            TimeEventsManager.create("cloverEnd", 14400000, [guild.id, msg.channel.id]);
            return phrase;
          }

          const clover = data.cloverEffect;
          clover.uses++;

          const increaseTimestamp = (timestamp) => {
            const adding = Math.floor(14_400_000 - (timestamp - Date.now()) / 18);
            const ms = timestamp + Math.max(adding, 0);
            return ms;
          }
          const day = TimeEventsManager.Util.timestampDay(clover.timestamp);
          clover.timestamp = increaseTimestamp(clover.timestamp);

          const filter = event => event.name === "cloverEnd" && event.params.includes(guild.id);
          const event = TimeEventsManager.at(day).find(filter);
          TimeEventsManager.change(event, {timestamp: clover.timestamp});
          return phrase;
        }
      },
      {
        name: "üîÆ –í—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä",
        value: 8000,
        inline: true,
        others: ["—à–∞—Ä", "–∫—É–±–∏–∫", "—Å–ª—É—á–∞–π", "–≤—Å–µ–≤–∏–¥—è—â–∏–π", "ball", "–≤—Å–µ–≤–∏–¥—è—â–∏–π —à–∞—Ä"],
        fn: (product) => {
          const items = ["void", "seed", "coins", "level", "exp", "coinsPerMessage", "chilli", "key", "monster", "berrys", "iq", "chestBonus"];
          const item = items.random();
          user[item] = (user[item] ?? 0) + 1;
          return ` –∫–∞–∫ \`gachi-${ item }\`, –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–¥–∏–Ω.`;
        }
      },
      {
        name: "üîß –ó–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤",
        value: 312 + user.level * 2,
        inline: true,
        others: ["–∑–∞–≤–æ–∑", "–∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤"],
        fn: (product) => {
          user.grempen = 0;
          return ` –∫–∞–∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–π –∑–∞–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏`;
        }
      },
      {
        name: "üëÄ –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏",
        value: 600,
        inline: true,
        others: ["–∫–∞–º–µ–Ω—å", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ", "–∫–∞–º–µ–Ω—å —Å –≥–ª–∞–∑–∞–º–∏"],
        fn: (product) => {
          if (!user.curses){
            user.curses = [];
          }

          const already = user.curses.length;

          if (already && !user.voidFreedomCurse){
            user.coins += product.value;
            user.grempen -= 2 ** todayItems.indexOf(product);
            return " –∫–∞–∫ –Ω–∏—á—Ç–æ. –í–µ–¥—å –≤—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã!";
          }

          const curse = CurseManager.generate({hard: null, user: msg.author});
          const curseBase = CurseManager.cursesBase.get(curse.id);
          CurseManager.init({user: msg.author, curse});

          return ` –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ. –ß—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –±–∏—á–∞ –∫–∞–º–Ω—è: ${ curseBase.description }.`;
        }
      }
    ];

    const getTodayItems = () => allItems.filter((e, i) => DataManager.data.bot.grempen.includes( i.toString(16) ));

    let grempenList;
    let todayItems = grempenList = getTodayItems();

    if (Math.floor(Date.now() / 86400000) !== user.shopTime){
      user.grempen = 0;
      user.shopTime = Math.floor(Date.now() / 86400000);
    }


    const isBought = (product) => {
      const index = todayItems.indexOf(product);
      if (index === -1)
        return null;

      return (user.grempen & 2 ** index) !== 0;
    }

    const buyFunc = async (name) => {
      const product = allItems.find(item => item.name === name || item.others.includes(name));

      if (!product || isBought(product) !== false){
        const emoji = product ? product.name.split(" ")[0] : "üë∫";
        const itemList = todayItems.filter(item => item !== product).map(item => item.name.split(" ")[0]).join(" ");
        await msg.msg({title: "<:grempen:753287402101014649> –£–ø—Å!", description: `**–°–µ–≥–æ–¥–Ω—è —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç (${ emoji }) –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –≤ –ª–∞–≤–∫–µ.**\n–ñ–µ–ª–∞–µ—Ç–µ –≤–∑–ª—è–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã?\n${ itemList }`, color: "#400606", delete: 8000});
        return;
      }

      if (user.coins < (product.value ?? 0)) {
        await msg.msg({title: "<:grempen:753287402101014649> –¢-–í—ã —á—Ç–æ —É–¥—É–º–∞–ª–∏?", description: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤, ${product.name} —Å—Ç–æ–∏—Ç –Ω–∞ ${product.value - user.coins} –¥–æ—Ä–æ–∂–µ`, color: "#400606", delete: 5000});
        return;
      }


      let phrase = product.fn(product);

      if (!isNaN(product.value))
        user.coins -= product.value;


      user.grempen += 2 ** todayItems.indexOf(product);
      msg.author.action(Actions.buyFromGrempen, {product, channel: msg.channel});
      if (user.grempen == 63){
        msg.author.action(Actions.globalQuest, {name: "cleanShop"});
      }

      return msg.msg({description: `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É ${product.name.split(" ")[0]} !\n–¶–µ–Ω–∞ –≤ ${ Util.ending(product.value, "–º–æ–Ω–µ—Ç", "", "—É", "—ã")} –ø—Ä–æ—Å—Ç–æ –Ω–∏—á—Ç–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫—É—é —Ö–æ—Ä–æ—à—É—é –≤–µ—â—å${phrase}`, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, color: "#400606"});
    }

    if (interaction.params){
      buyFunc(interaction.params.toLowerCase());
      return;
    }

    if (user.coins < 80) {
      msg.channel.startTyping();
      await Util.sleep(1700);
      msg.channel.stopTyping();
      return msg.msg({title: "<:grempen:753287402101014649>", description: "–ò–∑—ã–¥–∏ –±–µ–∑–¥–æ–º–Ω—ã–π –ø–æ–ø—Ä–æ—à–∞–π–∫–∞\n–±–µ–∑ –¥–µ–Ω–µ–≥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!", color: "#541213", delete: 3000});
    }



    const productsToFields = () => {
      const list = todayItems.map((item, i) => {
        let {name, value} = item;

        if (isBought(item)){
          value = "–ö—É–ø–ª–µ–Ω–æ";
        }

        return {name, value, inline: true};
      })


      return list;
    }

    let embed = {title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞", description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É, –º–µ–Ω—è –∑–æ–≤—É—Ç –ì—Ä–µ–º–ø–ª–µ–Ω—Å –∏ —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∫–∏–¥–∫–∏!\n–û, –≤–∏–∂—É —É –≤–∞—Å –µ—Å—Ç—å **${user.coins}** <:coin:637533074879414272>, –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ª–∏ —á–µ–≥–æ –Ω–∏–±—É–¥—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?`, fields: productsToFields(), color: "#400606", footer: {text: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è, —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ü–µ–Ω—ã!"}}
    let shop  = await msg.msg(embed);

    let react;
    while (true) {
      let reactions = todayItems.filter(item => isBought(item) === false && (isNaN(item.value) || item.value <= user.coins)).map(item => item.name.split(" ")[0]);
      if (reactions.length === 0)
        reactions = ["‚ùå"];

      react = await shop.awaitReact({user: msg.author, type: "all"}, ...reactions);

      if (!react || react === "‚ùå") {
        await shop.reactions.removeAll();
        await shop.msg({title: "–õ–∞–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë <:grempen:753287402101014649>", edit: true, color: "#400606", description: "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `!grempen`, –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.", image: "https://cdn.discordapp.com/attachments/629546680840093696/847381047939432478/grempen.png"});
        return;
      }

      const product = allItems.find(item => item.name.split(" ")[0] === react);
      buyFunc(product.name);




      if (user.coins < 80) {
        msg.channel.startTyping();
        await Util.sleep(1200);

        shop.msg({title: "–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –ù–µ—Ç? –ù—É –∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π—Ç–µ!", edit: true, delete: 3000});
        msg.channel.stopTyping();
        return;
      }
      embed = {title: "<:grempen:753287402101014649> –ó–ª–æ–≤–µ—â–∞—è –ª–∞–≤–∫–∞", edit: true, description: `–£ –≤–∞—Å –µ—Å—Ç—å-–æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–∏–Ω—ã? –û—Ç–ª–∏—á–Ω–æ! **${user.coins}** <:coin:637533074879414272> —Ö–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–∫—É–ø–∏—Ç—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –µ—â—ë!`, fields: productsToFields(), footer: {text: "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë, –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"}, color: "#400606"};
      await shop.msg(embed);
    };
  }, {delete: true, cooldown: 10, cooldownTry: 3, type: "other"}, "–≥—Ä–µ–º–ø–ª–µ–Ω—Å –≥—Ä–µ–º–ø–µ–Ω—Å evil_shop –∑–ª–æ–≤–µ—â–∞—è_–ª–∞–≤–∫–∞ hell –ª–∞–≤–∫–∞ grempens shop"),

  embeds: new Command(async (msg, interaction) => {
    let answer = await Util.awaitUserAccept({name: "embeds", message: {title: "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –¥–æ 70-—Ç–∏ —ç–º–±–µ–¥–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ", description: "–° –µ—ë –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—Å—ë –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç **—É–¥–∞–ª–µ–Ω—ã**, –∞ —ç–º–±–µ–¥—ã –±—É–¥—É—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ **–æ—Ç –∏–º–µ–Ω–∏ –ü—Ä–∏–∑—Ä–∞–∫–∞**\n\n–†–µ–∞–∫—Ü–∏–∏:\n ‚Ä¢ <:json:754777124413505577> - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º JSON –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n ‚Ä¢ <:swap:754780992023167007> - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –¥–≤–∞ —ç–º–±–µ–¥–∞\n ‚Ä¢ <:right:756212089911247021> - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"}, channel: msg.channel, userData: interaction.userData});
    if (!answer) return;

    let embeds = await msg.channel.messages.fetch({limit: 100, before: (interaction.params || null)});
      embeds.concat(await msg.channel.messages.fetch({limit: 100, before: embeds.last().id}));

    embeds = [...embeds.filter(e => e.embeds.find(e => e.type == "rich" && e.color != 10092543)).values()];
    embeds.length = Math.min(embeds.length, 70);

    if (!embeds[0]) return msg.msg({title: "–í –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π", delete: 3000});

    let input   = embeds.reverse().map((e, i) => (i + 1) + ". " + e.embeds[0].title).join("\n");
    let bot_msg = await msg.msg({title: "	‚Ä¢ " + embeds.length + " <a:diamond:725600667586134138>", description: input, color: "#99ffff"});


    let eventFuncDelete = e => {
      if (e.channel.id != msg.channel.id || !e.embeds.find(e => e.type == "rich" && e.color != 10092543)) return;
      let index = embeds.findIndex(el => el.id == e.id);
      if (!index) return;
      embeds.splice(index, 1);

      input = embeds.map((e, i) => (i + 1) + ". " + e.embeds[0].title).join("\n");
      bot_msg.msg({title: "	‚Ä¢ " + embeds.length + " <a:diamond:725600667586134138>", description: input, color: "#99ffff", edit: true});
    }
    client.on("messageDelete", eventFuncDelete);
    setTimeout(e => client.removeListener("messageDelete", eventFuncDelete), 600000);

    let eventFuncWrite = e => {
      if (e.channel.id != msg.channel.id || !e.embeds.find(e => e.type == "rich" && e.color != 10092543)) return;

      embeds.push(e);
      let input = embeds.map((e, i) => (i + 1) + ". " + e.embeds[0].title).join("\n");
      bot_msg.msg({title: "	‚Ä¢ " + embeds.length + " <a:diamond:725600667586134138>", description: input, color: "#99ffff", edit: true});
    }
    client.on("message", eventFuncWrite);
    setTimeout(e => client.removeListener("message", eventFuncWrite), 600000);


    let react;
    do {
      react = await bot_msg.awaitReact({user: msg.author, type: "one", time: 60000}, "754777124413505577", "754780992023167007", "756212089911247021");
      switch (react) {
        case "754777124413505577":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –≤ JSON –≤–∏–¥–µ", embed: {color: "#99ffff"}});
          if (!answer) return;
          answer = Number(answer.content);
          if (isNaN(answer) || embeds.length < answer || answer < 0) {
            msg.msg({title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", description: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ " + embeds.length, color: "#ff0000", delete: 3000});
            break;
          }

          let element = embeds[answer - 1];
          msg.author.msg({title: "> " + element.embeds[0].title, description: "```JSON\n" + Discord.escapeCodeBlock( JSON.stringify(element.embeds[0], null, 2) ) + "```"});
          msg.msg({title: "–ì–æ—Ç–æ–≤–æ! –õ–∏—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", color: "#99ffff", delete: 3500});
          break;

        case "754780992023167007":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –∏ –º–µ—Å—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –µ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å", embed: {color: "#99ffff"}});
          let indices = answer.content.match(/\d+/g);
          if (!indices[1]){
            msg.msg({title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", description: "–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ " + embeds.length, color: "#ff0000", delete: 3000});
            break;
          }
          embeds.splice(indices[0] - 1, 1, ...embeds.splice(indices[1] - 1, 1, embeds[indices[0] - 1]));

          let input = embeds.map((e, i) => (i + 1) + ". " + e.embeds[0].title).join("\n");
          await bot_msg.msg({title: "	‚Ä¢ " + embeds.length + " <a:diamond:725600667586134138>", description: input, color: "#99ffff", edit: true});
          break;

        case "756212089911247021":
          client.removeListener("messageDelete", eventFuncDelete);
          client.removeListener("message", eventFuncWrite);
          await bot_msg.reactions.removeAll();
          bot_msg.msg({title: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", edit: true, delete: 5000});

          embeds.forEach(item => msg.msg({content: item.embeds[0]}).then( e => item.delete() ));
          msg.msg({title: "–ì–æ—Ç–æ–≤–æ!", delete: 2000});
          bot_msg.delete();
          return;
        default:
          client.removeListener("messageDelete", eventFuncDelete);
          client.removeListener("message", eventFuncWrite);
          return bot_msg.delete();
      }
    } while (true);

  }, {delete: true, type: "guild"}, "—ç–º–±–µ–¥—Å —ç–º–±–µ–¥—ã –µ–º–±–µ–¥—ã –µ–º–±–µ–¥—Å"),

  berry: new Command(async (msg, interaction) => {
    const MAX_LIMIT = 35000;
    const INFLATION = 0.2;
    const TAX = 0.02;

    let
      user        = interaction.userData,
      myBerrys    = user.berrys || (user.berrys = 0),
      marketPrise = DataManager.data.bot.berrysPrise,

      action      = interaction.params && interaction.params.split(" ")[0],
      quantity    = interaction.params && interaction.params.split(" ")[1];



    const getPrice = (quantity, isBuying = -1) => {
      quantity = isBuying === -1 ?
        Math.min(marketPrise / INFLATION, quantity)
        : quantity;

      // –ù–∞–ª–æ–≥
      const tax = isBuying !== -1 ? 1 : (1 - TAX);
      // –ò–Ω—Ñ–ª—è—Ü–∏—è
      const inflation = (quantity * INFLATION / 2) * isBuying;


      const price = Math.round( (marketPrise + inflation) * quantity * tax );
      return price;
    };

    if (interaction.mention) {
      myBerrys = interaction.mention.data.berrys || 0;
      msg.msg({title: "–ö–ª—É–±–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        description: `–ö–ª—É–±–Ω–∏—á–µ–∫ ‚Äî **${ myBerrys }** <:berry:756114492055617558>\n–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ ‚Äî **${ Math.round(marketPrise) }** <:coin:637533074879414272>`,
        author: {name: interaction.mention.tag, iconURL: interaction.mention.avatarURL()},
        footer: {text: `–û–±—â–∞—è —Ü–µ–Ω–∞ —è–≥–æ–¥–æ–∫: ${ getPrice(myBerrys, -1) }`}
      });
      return;
    }

    const store = (quantity, isBuying) => {
      // buying == -1 || 1
      myBerrys = user.berrys;

      if (quantity === "+")
        quantity = myBerrys;

      quantity = Math.floor(quantity);

      if ( isNaN(quantity) ){
        msg.msg({title: "–£–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞", color: "#ff0000", delete: 5000});
        return;
      }

      if (quantity < 0){
        msg.msg({title: "–í–≤–µ–¥–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n<:grempen:753287402101014649> ‚Äî –£–∫—É—à—É.", color: "#ff0000", delete: 5000});
        return;
      }

      if (isBuying < 0 && quantity > myBerrys){
        msg.msg({title: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å ${ quantity } <:berry:756114492055617558>, —É –≤–∞—Å –≤—Å–µ–≥–æ ${myBerrys}`, color: "#ff0000", delete: 5000});
        return;
      }

      if (isBuying > 0 && myBerrys + quantity > MAX_LIMIT){
        quantity = Math.max(MAX_LIMIT - myBerrys, 0);
      }

      let prise = getPrice(quantity, isBuying);


      if (isBuying > 0 && user.coins < prise) {
        msg.msg({title: `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${prise - user.coins} <:coin:637533074879414272>`, delete: 5000});
        return;
      }

      user.coins -= prise * isBuying;
      user.berrys = myBerrys += quantity * isBuying;
      marketPrise = DataManager.data.bot.berrysPrise = Math.max(DataManager.data.bot.berrysPrise + quantity * INFLATION * isBuying, 0);

      msg.msg({title: (isBuying > 0) ? `–í—ã –∫—É–ø–∏–ª–∏ ${quantity} <:berry:756114492055617558>! –ø–æ—Ç—Ä–∞—Ç–∏–≤ ${ prise } <:coin:637533074879414272>!` : `–í—ã –ø—Ä–æ–¥–∞–ª–∏ ${quantity} <:berry:756114492055617558> –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${prise} <:coin:637533074879414272>!`, delete: 5000});
      msg.author.action(Actions.berryBarter, {quantity, msg, interaction, isBuying, prise});
    }

    if (quantity === "+")
      quantity = user.berrys;

    if (action == "buy"  || action == "–∫—É–ø–∏—Ç—å")  store(quantity, 1);
    if (action == "sell" || action == "–ø—Ä–æ–¥–∞—Ç—å") store(quantity, -1);

    let message = await msg.msg({description: `–£ –≤–∞—Å –∫–ª—É–±–Ω–∏—á–µ–∫ ‚Äî **${ myBerrys }** <:berry:756114492055617558>\n–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ ‚Äî **${ Math.round(marketPrise) }** <:coin:637533074879414272>\n\n–û–±—â–∞—è —Ü–µ–Ω–∞ –≤–∞—à–∏—Ö —è–≥–æ–¥–æ–∫: ${ getPrice(myBerrys, -1) } (—Å —É—á—ë—Ç–æ–º –Ω–∞–ª–æ–≥–∞ ${ TAX * 100 }% –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏)\n\nüì• - –ü–æ–∫—É–ø–∫–∞ | üì§ - –ü—Ä–æ–¥–∞–∂–∞;`, author: {name: msg.author.tag, iconURL: msg.author.avatarURL()}})
    let react = await message.awaitReact({user: msg.author, type: "all"}, "üì•", "üì§");
    let answer;

    while (true) {
      switch (react) {
        case "üì•":
          if (myBerrys >= MAX_LIMIT){
            msg.msg({title: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ. –õ–∏–º–∏—Ç ${ MAX_LIMIT }`, color: "#ff0000", delete: 5000});
            break;
          }

          const getMaxCount = (coins, price) => {

            const a = INFLATION / 2;
            const b = price;
            const c = -coins;

            const discriminant = b ** 2 - 4 * a * c;
            const x2 = (discriminant ** 0.5 - b) / (2 * a);

            return x2;
          }

          let maxCount = getMaxCount(interaction.userData.coins, marketPrise);

          maxCount = Math.min(maxCount, MAX_LIMIT - myBerrys);
          answer = await msg.channel.awaitMessage(msg.author, {title: `–°–∫–æ–ª—å–∫–æ –∫–ª—É–±–Ω–∏–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?\n–ü–æ –Ω–∞—à–∏–º —Ä–∞—Å—á—ë—Ç–∞–º, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ (${maxCount.toFixed(2)}) –µ–¥. <:berry:756114492055617558> (Beta¬†calculator)`, embed: {description: "[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥](https://pastebin.com/Cg9eYndC)"}});
          if (!answer)
            break;

          if (answer.content === "+")
            answer.content = maxCount;

          store(answer.content, 1);
          break;
        case "üì§":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á-–≤–æ –∫–ª—É–±–Ω–∏—á–µ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"});
          if (!answer)
            break;

          store(answer.content, -1);
          break;
        default: return message.delete();
      }
      message = await message.msg({edit: true, description: `–£ –≤–∞—Å –∫–ª—É–±–Ω–∏—á–µ–∫ ‚Äî **${myBerrys}** <:berry:756114492055617558>\n–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ ‚Äî **${ Math.round(marketPrise) }** <:coin:637533074879414272>\n\n–û–±—â–∞—è —Ü–µ–Ω–∞ –≤–∞—à–∏—Ö —è–≥–æ–¥–æ–∫: ${getPrice(myBerrys)} (—Å —É—á—ë—Ç–æ–º –Ω–∞–ª–æ–≥–∞ ${ TAX * 100 }% –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏)\n\nüì• - –ü–æ–∫—É–ø–∫–∞ | üì§ - –ü—Ä–æ–¥–∞–∂–∞;`, author: {name: msg.author.tag, iconURL: msg.author.avatarURL()}});
      react = await message.awaitReact({user: msg.author, type: "all"}, "üì•", "üì§");
    }
  }, {delete: true, cooldown: 15, cooldownTry: 2, type: "user"}, "–∫–ª—É–±–Ω–∏–∫–∞ –∫–ª—É–±–Ω–∏—á–∫–∏ —è–≥–æ–¥–∞ —è–≥–æ–¥—ã berrys –±–µ—Ä—Ä–∏"),

  server: new Command(async (msg, interaction) => {
    let guild = msg.guild;

    const values = {
      stats: {
        msgs:          `–ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${  guild.data.day_msg  }`,
        msgsAll:       `–í—Å–µ–≥–æ: ${  guild.data.day_msg + guild.data.msg_total  }`,
        around:        `–í —Å—Ä–µ–¥–Ω–µ–º: ${  Math.round((guild.data.day_msg + guild.data.msg_total) / guild.data.days)  }`,
        record:        `–†–µ–∫–æ—Ä–¥: ${   Util.ending(guild.data.day_max, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è")  }\n`,
        commands:      `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${  Object.values(guild.data.commandsUsed).reduce((acc, count) => acc + count, 0)  }`,
        todayCommands: `–°–µ–≥–æ–¥–Ω—è: ${  Object.values(guild.data.commandsUsed).reduce((acc, count) => acc + count, 0) - guild.data.commandsLaunched  }`
      },
      members: {
        count:         `–í—Å–µ–≥–æ: ${guild.memberCount}`,
        online:        `–û–Ω–ª–∞–π–Ω: ${guild.members.cache.filter(e => e.presence.status != "offline").size}`,
        offline:       `–û—Ñ—Ñ–ª–∞–π–Ω: ${guild.members.cache.filter(e => e.presence.status == "offline").size}`
      },
      channels: {
        categories:    `–ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${guild.channels.cache.filter(e => e.type == "category").size}`,
        texted:        `–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: ${guild.channels.cache.filter(e => e.type == "text").size}`,
        voices:        `–ì–æ–ª–æ—Å–æ–≤—ã—Ö: ${guild.channels.cache.filter(e => e.type == "voice").size}`
      }
    }

    let stats    = Object.values( values.stats ).join("\n");
    let members  = Object.values( values.members ).join("\n");
    let channels = Object.values( values.channels ).join("\n");

    let verification = {
      "NONE": "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç",
      "LOW": "–ù–∏–∑–∫–∏–π",
      "MEDIUM": "–°—Ä–µ–¥–Ω–∏–π",
      "HIGH": "–í—ã—Å–æ–∫–∏–π",
      "VERY_HIGH": "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π"
    }

    let fields = [{name: "–£—á–∞—Å—Ç–Ω–∏–∫–∏:", value: members, inline: true}, {name: "–ö–∞–Ω–∞–ª—ã:", value: channels, inline: true}, {name: "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**", value: stats}, {name: `**–í–ª–∞–¥–µ–ª–µ—Ü:**`, value: await guild.fetchOwner(), inline: true}, {name: `**–£—Ä. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:**`, value: verification[guild.verificationLevel], inline: true}];
    //* CLOVER
    if (guild.data.cloverEffect){

      const clover = guild.data.cloverEffect;
      const day = TimeEventsManager.Util.timestampDay(clover.timestamp);
      const filter = ({name, params}) => name === "cloverEnd" && params.includes(msg.guild.id);
      const event = TimeEventsManager.at(day).find(filter);
     
      const timeTo = event.timestamp - Date.now();
      const multiplier = 1.08 + (0.07 * ((1 - 0.9242 ** clover.uses) / (1 - 0.9242)));

      

      fields.unshift({name: "üçÄ –î–µ–π—Å—Ç–≤–∏–µ –ö–ª–µ–≤–µ—Ä–∞", value: `–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${+(timeTo / 3600000).toFixed(2)}—á.\n–ö–ª–µ–≤–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω: <t:${ Math.floor(clover.timestamp / 1_000) }>;\n–ù–∞–≥—Ä–∞–¥ –ø–æ–ª—É—á–µ–Ω–æ: ${clover.coins}\n–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–µ—Ç–µ–ª—å: X${multiplier.toFixed(2)}\n–ö—É–ø–ª–µ–Ω–æ –∫–ª–µ–≤–µ—Ä–æ–≤: ${clover.uses}`});
    }
    //**

    msg.msg({title: guild.name + " " + ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú"].random(), thumbnail: guild.iconURL(), description: guild.data.description || "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <a:who:638649997415677973>\n`!editServer` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", footer: {text: "–°–µ—Ä–≤–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω " + Util.timestampToDate(Date.now() - guild.createdTimestamp, 3) + " –Ω–∞–∑–∞–¥." + "\nID: " + guild.id}, image: guild.data.banner, fields});
  }, {delete: true, type: "guild"}, "—Å–µ—Ä–≤–µ—Ä"),

  editserver: new Command(async (msg, interaction) => {
    let guild = msg.guild
    let server = guild.data;
    let settingsAll = [
      ["description", "ü™ß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", "–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É–¥–∞—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"],
      ["banner", "üåå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–Ω–Ω–µ—Ä", "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å —Å–≤–æ–π –±–∞–Ω–Ω–µ—Ä!"],
      ["chatFilter", "üö∏ –§–∏–ª—å—Ç—Ä —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω", "–§–∏–ª—å—Ç—Ä —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω :)"],
      ["hi", "üëã –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ", "¬´–ü—Ä–∏–≤–µ—Ç —Ç–µ–±–µ, –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫¬ª"],
      //["globalXp", "üìØ –û–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞", "–í—ã –≤–∏–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –æ–ø—ã—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"]
    ]

    let channels = [server.chatChannel, server.logChannel, server.hiChannel].map(e => e ? (guild.channels.cache.get(e) || "–Ω–µ –Ω–∞–π–¥–µ–Ω") : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").map((e, i) => ["–ß–∞—Ç: ", "–î–ª—è –ª–æ–≥–æ–≤: ", "–î–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–π: "][i] + e);
    let settings = settingsAll.map(e => (server[e[0]]) ? "<a:yes:763371572073201714> " + e[2] : e[1]);

    let randomEmoji = ["üîß", "üî®", "üí£", "üõ†Ô∏è", "üîè"].random(),
     message = await msg.msg({title: "–ò–¥—ë—Ç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... " + randomEmoji, description: settings.join("\n"), footer: {text: "üîÇ - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è"}, fields: [{name: "üèùÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", value: channels}]}),
     react = await message.awaitReact({user: msg.author, type: "all"}, ...settings.map(e => e.split(" ")[0]).filter(e => e != "<a:yes:763371572073201714>"), "üèùÔ∏è", "üîÇ"),
     answer, bot_msg;

    while (true) {
      let reactions;
      switch (react) {
        case "ü™ß":
          bot_msg = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —á—É–¥–µ—Å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞", description: "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã **{ }** üíö"});
          answer = await bot_msg.channel.awaitMessage(msg.author);

          bot_msg.delete();
          if (answer.content){
            server.description = answer.content;
            msg.msg({title: "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Æ—Ö—É!", delete: 3000});
          }
          else msg.msg({title: "–í—Ä–µ–º—è –≤—ã—à–ª–æ ‚è∞", color: "#ff0000", delete: 3000});
          break;

        case "üåå":
          bot_msg = await msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", description: "–ê–ø—á—Ö–∏"});
          answer = await bot_msg.channel.awaitMessage(msg.author);

          answer = answer.content || null;
          bot_msg.delete();
          if (answer && answer.startsWith("http")){
            server.banner = answer;
            msg.msg({title: "–ë–∞–Ω–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", delete: 3000});
          }
          else msg.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});
          break;

        case "üö∏":
          bot_msg = await msg.msg({title: "–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —á–∞—Ç–∞?", description: "–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç: —Ä–µ–∫–ª–∞–º—É, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –∫–∞–ø—Å –∏ —Ç.–¥.\n–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è \"—Å—ã—Ä–æ–π\" –∏ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"});
          answer = await bot_msg.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763804850508136478");
          bot_msg.delete();

          if (answer == "685057435161198594"){
            server.chatFilter = 1;
            msg.msg({title: "–§–∏–ª—å—Ç—Ä –≤–∫–ª—é—á—ë–Ω", delete: 3000});
          }
          else if (answer == "763804850508136478"){
            server.chatFilter = 0;
            msg.msg({title: "–§–∏–ª—å—Ç—Ä –≤—ã–∫–ª—é—á–µ–Ω", delete: 3000});
          }
          break;

        case "üëã":
          await commands["sethello"].code(msg, interaction);
          channels = [server.chatChannel, server.logChannel, server.hiChannel].map(e => (e) ? (guild.channels.cache.get(e).toString() || "–Ω–µ –Ω–∞–π–¥–µ–Ω") : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").map((e, i) => [ "–ß–∞—Ç: ", "–î–ª—è –ª–æ–≥–æ–≤: ", "–î–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–π: "][i] + e);
          break;

        case "üìØ":
          bot_msg = await msg.msg({title: "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏?", description: "–ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–ø—É—Å—Ç–∏–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∞–ª 15 —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ, —Ç–æ –∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —É –Ω–µ–≥–æ –±—É–¥–µ—Ç —Ç–æ–∂–µ 15\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞–∂–∞–≤ <:mark:685057435161198594>. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ 1-–≥–æ –∏ –±—É–¥—É—á–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ"});
          answer = await bot_msg.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763804850508136478");
          if (answer == "685057435161198594"){
            server.globalXp = 0;
            msg.msg({title: "–ì–æ—Ç–æ–≤–æ.", delete: 3000});
          }
          else if (answer == "763804850508136478"){
            server.globalXp = 1;
            msg.msg({title: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ!", delete: 3000});
          }
          break;

        case "üèùÔ∏è":
          bot_msg = await msg.msg({fields: [{name: "–ö–∞–Ω–∞–ª—ã", value: [server.chatChannel, server.logChannel, server.hiChannel].map(e => (e) ? (guild.channels.cache.get(e).toString() || "–Ω–µ –Ω–∞–π–¥–µ–Ω") : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").map((e, i) => [ "üî• –ß–∞—Ç: ", "üìí –î–ª—è –ª–æ–≥–æ–≤: ", "üëå –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–π: "][i] + e)}]});
          let channel = await bot_msg.awaitReact({user: msg.author, type: "all"}, "üî•", "üìí", "üëå");
          bot_msg = await bot_msg.msg({title: "–£–ø–æ–º—è–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏", edit: true});
          answer = await bot_msg.channel.awaitMessage(msg.author);
          bot_msg.delete();
          answer = answer.mentions.channels.first() || guild.channels.cache.get(bot_msg.content);

          if (answer){
            server[(channel == "üî•") ? "chatChannel" : (channel == "üìí") ? "logChannel" : "hiChannel"] = answer.id;
            channels = [server.chatChannel, server.logChannel, server.hiChannel].map(e => (e) ? (guild.channels.cache.get(e).toString() || "–Ω–µ –Ω–∞–π–¥–µ–Ω") : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").map((e, i) => [ "–ß–∞—Ç: ", "–î–ª—è –ª–æ–≥–æ–≤: ", "–î–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–π: "][i] + e);
            msg.msg({title: `–ö–∞–Ω–∞–ª ${answer.name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ${channel}`, delete: 3000})
          }
          else msg.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª", color: "#ff0000"});
          break;

        case "üîÇ":
          reactions = [...settingsAll.map(e => e[1].split(" ")[0]), "üèùÔ∏è"];
          break;

        default:
          message.reactions.removeAll();
          message.delete();
          return;
      }
      settings = settingsAll.map(e => (server[e[0]]) ? "<a:yes:763371572073201714> " + e[2] : e[1]);
      message = await message.msg({title: "–ò–¥—ë—Ç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... " + randomEmoji, description: settings.join("\n"), footer: {text: "üîÇ - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è"}, edit: true, fields: [{name: "üèùÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", value: channels}]});
      reactions = reactions || [...settings.map(e => e.split(" ")[0]).filter(e => e != "<a:yes:763371572073201714>"), "üèùÔ∏è", "üîÇ"];
      react = await message.awaitReact({user: msg.author, type: "all"}, ...reactions);
    }

  }, {delete: true, Permissions: 32, type: "guild"}, "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å–µ—Ä–≤–µ—Ä —Å–µ—Ä–≤–∞—Ç–∏—É—Å servatius"),

  postpone: new Command(async (msg, interaction) => {
    let
      splited = interaction.params.split(" "),
      time = splited[0],
      text = splited.slice(1).join(" ");

    if (!text) return msg.msg({title: "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", description: "–ê—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —è–≤–ª—è–µ—Ç—Å—è {–í—Ä–µ–º—è} + {–¢–µ–∫—Å—Ç}\n–ü—Ä–∏–º–µ—Ä: `!postpone 11:19 –Ø –ª—é–±–ª—é –º–∏—Ä`", delete: 5000});
    time = time.split(":");
    if (isNaN(time[0]) || isNaN(time[1])) return msg.msg({title: "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è", description: "–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã 15:16", color: "#ff0000"});
    let date = new Date();

    date.setHours(time[0]);
    date.setMinutes(time[1]);

    let timeTo = date.getTime() - Date.now();
    if (timeTo < 60000) return msg.msg({title: `–Ø –Ω–µ –º–æ–≥—É –æ—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ ${time.join(":")}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ —ç—Ç–æ–π –º–µ—Ç–∫–µ.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚Äî ${(date = new Date()), date.getHours()}:${date.getMinutes()}`, delete: 5000});
    TimeEventsManager.create("postpone", timeTo, [msg.author.id, msg.channel.id, text]);
    msg.msg({title: "–ì–æ—Ç–æ–≤–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ " + Util.timestampToDate(timeTo), delete: 5000});
  }, {cooldown: 1800 , cooldownTry: 3, delete: true, args: true, myChannelPermissions: 536870912, type: "delete"}, "–æ—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–ª–æ–∂–∏"),

  iq: new Command(async (msg, interaction) => {
    let memb = interaction.mention || client.users.cache.get(interaction.params) || msg.author;

    let first = true;
    if ("iq" in memb.data) {
      first = false;
    }

    let iq = memb.data.iq = first ? Util.random(30, 140) : Math.max(memb.data.iq, 0);
    let name = (memb === msg.author) ? "–≤–∞—Å" : "–Ω–µ–≥–æ";

    let description;
    if (Util.random(18)){
      description = `–£ ${name}${(!first) ? " –≤—Å—ë —Ç–∞–∫ –∂–µ" : ""} ${iq} ${interaction.command.toUpperCase()}`;
    } else {
      iq = ++memb.data.iq;
      description = `–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ —É ${name} –∞–π–∫—å—é –≤—ã—Ä–æ—Å –Ω–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É! –°–µ–π—á–∞—Å ${interaction.command.toUpperCase()} === ${iq}`;
    }
    msg.msg({title: "<a:iq:768047041053196319> + <a:iq:768047041053196319> = ICQ¬≤", description, author: {iconURL: memb.avatarURL(), name: memb.username}});
  }, {cooldown: 15, cooldownTry: 2, type: "user"}, "iqmeme icq –∞–π–∫—é –∞–π–∫—å—é iqbanana"),

  chest: new Command(async (msg, interaction) => {

    const cooldown = interaction.userData.CD_32 - Date.now();
    if (cooldown > 0) {
      msg.msg({title: `–°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!`, color: "#ffda73", footer: {text: "–î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: " + Util.timestampToDate(cooldown), iconURL: "https://vignette.wikia.nocookie.net/e2e-expert/images/b/b3/Chest.png/revision/latest?cb=20200108233859"}});
      return;
    }

    const
      user = interaction.userData,
      treasures = {};

    let chest = {
      icon: ["https://cdn.discordapp.com/attachments/629546680840093696/778990528947027988/ezgif.com-gif-maker.gif", "https://cdn.discordapp.com/attachments/629546680840093696/778990564779229234/ezgif.com-gif-maker_1.gif"].random(),
      color: "#ffda73"
    }

    if (user.BDay === DataManager.data.bot.dayDate) {
      treasures.cake = true;
      treasures.bonus = 10;
      user.chestBonus = 30 + (user.chestBonus ?? 0);
    }


    const addTreasure = (item, count) => treasures[item] = treasures[item] ? count + treasures[item] : count;
    const UNREAL_TREASURES = [
        [
          {item: "void", count: 1, _weight: 1},
          {item: "berrys", count: 1, _weight: 4},
          {item: "keys", count: Util.random(2, 3), _weight: 9},
          {item: "trash", count: 0, _weight: 13},
          {item: "exp", count: Util.random(19, 119), _weight: 22},
          {item: "coins", count: Util.random(23, 40), _weight: 46},
          {item: "chilli", count: 1, _weight: 4},
          {item: "gloves", count: 1, _weight: 1}
        ],
        [
          {item: "void", count: 1, _weight: 1},
          {item: "berrys", count: Util.random(1, 2), _weight: 8},
          {item: "keys", count: Util.random(3, 5), _weight: 7},
          {item: "trash", count: 0, _weight: 3},
          {item: "exp", count: Util.random(30, 200), _weight: 22},
          {item: "coins", count: Util.random(88, 148), _weight: 54},
          {item: "chilli", count: 1, _weight: 3},
          {item: "gloves", count: 1, _weight: 2}
        ],
        [
          {item: "void", count: 1, _weight: 1},
          {item: "berrys", count: Util.random(1, 3), _weight: 12},
          {item: "keys", count: 9, _weight: 1},
          {item: "exp", count: Util.random(470), _weight: 22},
          {item: "coins", count: Util.random(304, 479), _weight: 62},
          {item: "gloves", count: 1, _weight: 1},
          {item: "bonus", count: 5, _weight: 1}
        ]
      ][user.chestLevel];


    let itemsQuantity = (user.chestBonus ?? 0);

    user.chestBonus -= itemsQuantity;
    itemsQuantity = 2 + Math.ceil(itemsQuantity / 3);


    let i = itemsQuantity;
    while (i > 0) {
      i--;
      let {item, count} = UNREAL_TREASURES.random({weights: true});
      switch (item){
        case "bonus":
          i += count;
          itemsQuantity += count;
      }
      addTreasure( item, count );
    }



    const handleResourse = (resource, count) => {
      switch (resource) {
        case "trash":
          itemsQuantity -= count
          delete treasures.trash;
          break;

        case "void":
          chest = { color: "#3d17a0", icon: "https://media.discordapp.net/attachments/631093957115379733/842122055527694366/image-removebg-preview.png" };
          user.void += count;
          itemsOutput.push( `${ Util.ending(count, "–£—Ä–æ–≤", "–Ω–µ–π", "–µ–Ω—å", "–Ω—è")} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:void:768047066890895360>` );
          break;

        case "keys":
          user.keys += count;
          itemsOutput.push( `${ Util.ending(count, "–ö–ª—é—á", "–µ–π", "", "–∞")} üî©` );

          if (count > 99){
            msg.author.action(Actions.globalQuest, {name: "bigHungredBonus"});
          }
          break;

        case "coins":
          user.coins += count;
          itemsOutput.push( `${ Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞")} <:coin:637533074879414272>` );
          break;

        case "exp":
          user.exp += count;
          let emoji = ["<:crys:637290406958202880>", "<:crys2:763767958559391795>", "<:crys3:763767653571231804>"][Math.min(2, Math.floor(count / 10))];
          itemsOutput.push( `${ Util.ending(count, "–û–ø—ã—Ç", "–∞", "", "–∞")} ${emoji}` );
          break;

        case "berrys":
          user.berrys += count;
          itemsOutput.push( `${ Util.ending(count, "–ö–ª—É–±–Ω–∏–∫", "", "–∞", "–∏")} <:berry:756114492055617558>` );
          break;

        case "cake":
          itemsOutput.push("–û–¥–∏–Ω –¢–æ—Ä—Ç–∏–∫ üéÇ");
          break;

        case "bonus":
          itemsOutput.push( `${ Util.ending(count, "–°–æ–∫—Ä–æ–≤–∏—â", "", "–µ", "–∞")} –¥–ª—è —ç—Ç–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ <a:chest:805405279326961684>`);
          break;

        case "gloves":
          const currentGloves = (user.thiefGloves || "0|0")
            .split("|");

          currentGloves[0] = +currentGloves[0] + count;
          user.thiefGloves = currentGloves.join("|");

          itemsOutput.push( `${ Util.ending(count, "–ü–µ—Ä—á–∞—Ç", "–æ–∫", "–∫–∞", "–∫–∏")} üß§`);
          break;

        case "chilli":
          user.chilli = (user.chilli ?? 0) + count;
          itemsOutput.push( `${ Util.ending(count, "–ü–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")} üå∂Ô∏è`);
          break;

        default:
          break;
      }
    }

    const itemsOutput = [];
    Object.entries(treasures).forEach(([k, v]) => handleResourse(k, v));


    msg.author.action(Actions.openChest, {msg, interaction, treasures});

    user.CD_32 = new Date().setHours(23, 59, 0) + 120000;
    msg.author.action(Actions.globalQuest, {name: "firstChest"});



    const embed = {
      title: itemsQuantity > 30 ? "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å—É–Ω–¥—É–∫" : "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—É–Ω–¥—É–∫",
      description: (itemsOutput.length) ? `–ë–û–ù–£–°–û–í –°–£–ù–î–£–ö–ê ‚Äî ${ itemsQuantity }:` : "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—É–Ω–¥—É–∫ ‚Äî –ø—É—Å—Ç. –í—Å–µ–≥–æ-–ª–∏—à—å –ø–∞—Ä–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –∫—Ä–∞–±—å–∏—Ö –Ω–æ–∂–µ–∫ –∏ –≥–æ—Ä—ã –ø–µ—Å–∫–∞... <a:penguin:780093060628873296>",
      color: chest.color,
      thumbnail: !itemsOutput.length ? chest.icon : null,
      footer: {text: `–£—Ä–æ–≤–µ–Ω—å —Å—É–Ω–¥—É–∫–∞: ${ user.chestLevel + 1 }`}
    }
    const message = await msg.msg(embed);
    embed.edit = true;

    while (itemsOutput.length){
      await Util.sleep(1500 / (itemsOutput.length / 2));
      embed.description += itemsOutput.splice(0, 1).map(e => `\n${e}`).join("");
      embed.thumbnail = itemsOutput.length ? null : chest.icon;
      await message.msg(embed);
    }
  }, {type: "other"}, "—Å—É–Ω–¥—É–∫ daily"),

  level: new Command(async (msg, interaction) => {
    return;
    //const canvas = require("canvas");

    const FONT_FAMILY = "VAG World";
    await canvas.registerFont("./main/resources/VAG-font.ttf", {family: "VAG World"});

    let
      canv    = canvas.createCanvas(900, 225),
      ctx     = canv.getContext("2d"),
      member  = (interaction.mention) ? interaction.mention : (interaction.params) ? client.users.cache.get(interaction.params) : msg.author,
      user    = member.data,
      avatar  = member.avatarURL({format: "png"}),

      text, expLine, width, img, gradient;

      gradient = ctx.createLinearGradient(0, 225, 900, 0);
      gradient.addColorStop(0, '#777');
      gradient.addColorStop(1, '#aaa');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 900, 225);

      ctx.save();
      ctx.fillStyle = "#080918";
      ctx.fillRect(30, 30, 840, 165)

      ctx.lineWidth = 20;
      ctx.lineJoin = 'round';
      ctx.strokeStyle = "#080918";
      ctx.shadowOffsetY = 5;
      ctx.shadowOffsetX = -3;
      ctx.shadowColor = "rgba(200, 200, 215, 0.3)";
      ctx.shadowBlur = 7;

      ctx.beginPath();
      ctx.moveTo(20, 20);
      ctx.lineTo(880, 20);
      ctx.lineTo(880, 205);
      ctx.lineTo(20, 205);
      ctx.lineTo(20, 20);
      ctx.lineTo(880, 20);
      ctx.stroke();

      ctx.restore();
      ctx.save();

      ctx.strokeStyle = "rgba(119,119,119, 0.7)";
      ctx.beginPath();
      ctx.moveTo(195, 60);
      ctx.lineTo(195, 165);
      ctx.stroke();

      ctx.fillStyle = "#080918";
      ctx.beginPath();
      ctx.shadowColor = "#999";
      ctx.shadowBlur = 10;
      ctx.arc(110, 100, 45, 0, Math.PI*2, true);
      ctx.fill();
      ctx.clip();

      ctx.globalCompositeOperation = 'source-in';

      avatar = await canvas.loadImage(avatar);
      ctx.drawImage(avatar, 0, 0, 90, 90);
      ctx.restore();

      ctx.font = `bold 20px ${ FONT_FAMILY }`;
      const { width: levelFontWidth } = ctx.measureText(user.level + " —É—Ä–æ–≤–µ–Ω—å");
      ctx.fillText(user.level + " —É—Ä–æ–≤–µ–Ω—å", 110 - levelFontWidth / 2, 170);

      ctx.strokeStyle = "rgba(119,119,119, 1)";
      ctx.beginPath();
      ctx.moveTo(100, 178);
      ctx.lineTo(120, 178);
      ctx.stroke();

      ctx.restore();
      ctx.save();

      ctx.beginPath();
      ctx.font = `bold 5px "${ FONT_FAMILY }", 'sans-serif'`;
      ctx.fillStyle = "#b0b4b0";
      width = {font: Math.min(545 / ctx.measureText(member.username).width * 5, 180)};





      ctx.font = `bold ${ width.font }px "${ FONT_FAMILY }", "sans-serif"`;

      width.textHeight = ctx.measureText(member.username).actualBoundingBoxAscent + ctx.measureText(member.username).actualBoundingBoxDescent;

      let expCanvas = canvas.createCanvas(670, 165);
      let ctx2 = expCanvas.getContext("2d");

      ctx2.textBaseline = "middle";
      ctx2.fillStyle = "#b0b4b0";

      ctx2.font = ctx.font;
      expLine = (670 - ctx.measureText(member.username).width) / 2;

      ctx2.fillText(member.username, expLine, 60);
      ctx2.globalCompositeOperation = "source-atop";

      ctx2.fillStyle = (user.profile_color) ? "#" + user.profile_color : "#0c0";
      ctx2.fillRect(expLine, (165 - width.textHeight) / 2, user.exp / (user.level * 45) * (670 - expLine * 1.8), width.textHeight * 1.5);

      gradient = ctx.createLinearGradient(expLine, 165, (670 - expLine * 1.8), 0);
      gradient.addColorStop(0.2, "rgba(0, 0, 0, 0.5)");
      gradient.addColorStop(0.4, "rgba(0, 0, 0, 0.2)");
      gradient.addColorStop(0.8, "rgba(0, 0, 0, 0)");
      ctx2.fillStyle = gradient;
      ctx2.fillRect(expLine, (165 - width.textHeight) / 2, 670, width.textHeight * 1.2);

      ctx.drawImage(expCanvas, 200, 30);


    let image = canv.toBuffer("image/png");
    msg.msg({title: new Discord.MessageAttachment(image, "level.png"), embed: true, delete: 1_000_000});
  }, {delete: true, dev: true}, "—É—Ä–æ–≤–µ–Ω—å rang rank —Ä–∞–Ω–≥ —Ä–∞–Ω–∫ lvl –ª–≤–ª"),

  puzzle: new Command(async (msg, interaction) => {
    return;
    let
      i = 9,

      canv = canvas.createCanvas(300, i * 30 + 30),
      ctx = canv.getContext("2d"),

      rules = {"!111": "3", "!222": "32", "!11": "21", "!22": "22", "!33": "23", "!1": "11", "!2": "12", "!3": "13"},
      last = String( Util.random(1, 1) );


      ctx.font = "bold 20px sans-serif";
      ctx.shadowBlur = 2;
      ctx.shadowColor = "rgba(19, 202, 36, 0.3)";
      ctx.shadowOffsetX = 3;
      ctx.shadowOffsetY = 3;

      while (i > 0){
        let input = "";
        i--;
        ctx.fillStyle = "#13ca24";
        ctx.fillText(last, 150 - ctx.measureText(last).width / 2, canv.height - (i + 1) * 30);
        while (last) {
          let found = Object.keys(rules).find(e => last.startsWith( e.slice(1) ));
          input += rules[found];
          last = last.slice(found.length - 1);
          ctx.fillStyle = "#f2fafa";
          ctx.fillRect(random(canv.width), Util.random(canv.height), 2, 2);
          ctx.fillRect(random(canv.width), Util.random(canv.height), 1, 1);
          ctx.fillStyle = "rgba(242, 250, 250, 0.5)";
          ctx.fillRect(random(canv.width), Util.random(canv.height), 3, 3)
        }

        last = input;
      }
      ctx.shadowColor = "rgba(150, 75, 0, 0.3)";
      ctx.fillStyle = "#964B00";
      ctx.fillText("???", 134, canv.height);

      ctx.strokeStyle = "rgba(19, 202, 36, 0.5)";
      ctx.shadowColor = "rgba(19, 202, 36, 0.3)";
      ctx.beginPath();

      ctx.moveTo(150, 7.5);
      ctx.lineTo(50, canv.height - 20);
      ctx.lineTo(135, canv.height - 20);
      ctx.lineTo(135, canv.height - 24);

      ctx.moveTo(150, 7.5);
      ctx.lineTo(250, canv.height - 20);
      ctx.lineTo(165, canv.height - 20);
      ctx.lineTo(165, canv.height - 24);

      ctx.stroke();

      ctx.shadowColor = "rgba(255, 255, 0, 0.3)";
      ctx.fillStyle = "#ff0";
      ctx.beginPath();
      ctx.moveTo(150, 0);
      ctx.lineTo(145, 5);
      ctx.lineTo(150, 10);
      ctx.lineTo(155, 5);
      ctx.closePath();
      ctx.fill();

      let image = new Discord.MessageAttachment( canv.toBuffer("image/png"), "pazzle.png" );
      let reward = (Date.now() - 1607558400000) / 500000;
      reward = reward - (reward % 5);

      let message = await msg.msg({title: "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è —ë–ª–æ—á–∫–∞", description: `–†–µ—à–∏—Ç–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!\n–ó–∞–º–µ–Ω–∏—Ç–µ "???", –≤ –∫–æ–Ω—Ü–µ —ë–ª–æ—á–∫–∏, –Ω–∞ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ–≤—É.\n–î–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ*. –£–¥–∞—á–∏.\n–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: **${reward}** <:coin:637533074879414272>`, image: "attachment://pazzle.png", files: image, color: "#f2fafa", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}});
      let react = await message.awaitReact({user: msg.author, type: "all"}, "‚úÖ");

      if (!react) return message.delete();

      let answer = await msg.channel.awaitMessage(msg.author, {title: "3... 2.. 1.! –ü—Ä–æ–±—É–µ–º...!", embed: {color: "#f2fafa"}});

      answer = answer.content;
      if (isNaN(answer)) return msg.msg({title: "–û—Ç–≤–µ—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!", color: "#ff0000", delete: 5000});

      if (answer == last) {
        msg.author.data.coins += reward;
        return msg.msg({title: "–ò —ç—Ç–æ... –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ —É –≤–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö!", delete: 5000});
      }

      let percent = Math.round((1 - Util.similarity(last, answer) / last.length) * 100);
      let phrase;
      switch (true) {
        case percent < 10: phrase = `–û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π.\n–°–æ–≤–µ—Ç: –≤ –æ—Ç–≤–µ—Ç–µ —Ä–æ–≤–Ω–æ **${last.length}** —Ü–∏—Ñ—Ä`;
        break;
        case percent < 25: phrase = `–ü–æ—Ö–æ–∂–µ –≤—ã –≤—Å—Ç–∞–ª–∏ –Ω–∞ –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∏ —Å–∫–æ—Ä–æ —Ä–∞–∑–≥–∞–¥–∞–µ—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á–∫—É, –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!`;
        break;
        case percent < 80: phrase = `–ù–∞ ${percent}% –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –∫–∞—Ä—Ç–æ—à–∫–∞ ‚Äî —ç—Ç–æ —Ñ–æ–Ω–∞—Ä—å, –ª–∏—à—å –Ω–∞ 11.76%.`;
        break;
        case percent < 101: phrase = `–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å! –£ –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è, ||–Ω–æ –æ—Ç–≤–µ—Ç –≤—Å—ë –µ—â—ë –Ω–µ –≤–µ—Ä–Ω—ã–π.||`;
      }
      message.delete();
      msg.msg({title: phrase, color: "#f2fafa", delete: 9000});

  }, {delete: true, type: "delete" /*, cooldown: 3600, cooldownTry: 1*/}, "–ø–∞–∑–ª —ë–ª–∫–∞ –µ–ª–∫–∞"),

  variables: new Command(async (msg, interaction) => {
    const isAdmin = !interaction.mentioner.wastedPermissions(32)[0];
    const manager = new GuildVariablesManager(msg.guild.id);
    const targetName = (message) => target === "guild" ? "–°–µ—Ä–≤–µ—Ä–∞" : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.mentions.users.first().toString()}`;

    let target = interaction.params.match(/^(?:<@!?\d{17,19}>|guild|—Å–µ—Ä–≤–µ—Ä|server)/i);
    if (target) {
      interaction.params = interaction.params.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
      target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";

      if (!interaction.params){
        let fields = manager.variables[target] ?
          Object.entries(manager.variables[target]).map(([name, value]) => ({name, value}))
          :
          [{name: "–¢—É—Ç –ø—É—Å—Ç–æ", value: "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–≥–¥–∞-—Ç–æ –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è"}];

        msg.msg({title: "–°–≤–æ–π—Å—Ç–≤–∞", 
          color: "#ffc135",
          description: `–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ${targetName(msg)}`,
          footer: {text: `(${manager.variables[target] ? Object.keys(manager.variables[target]).length : 0}/20)`},
          fields,
        });
        return;
      }

      if (!isAdmin){
        msg.msg({title: "–í—ã –¥–æ–ª–∂–Ω—ã –æ–±–ª–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", color: "#ff0000", delete: 4000});
        return;
      }

      let [name, ...value] = interaction.params.replace(/\s{1,}/g, " ").split(" ");
      value = value.join(" ");

      let output = manager[value ? "set" : "get"](target, name, value);
      if (output.err){
        let err;
        switch (output.err) {
          case 1:
            err = "–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã";
            break;
          case 2:
            err = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º: 20 —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É";
            break;
          default:
          err = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏";
        }
        msg.msg({title: err, color: "#ff0000", delete: 4000});
        return;
      }

      return msg.msg({title: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è " + (value ? "–∏–∑–º–µ–Ω–µ–Ω–∞" : "–ø–æ–ª—É—á–µ–Ω–∞"), description: value ? `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è \`${output.name}\` ${targetName(msg)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ${output.value}` : `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è \`${output.name}\` —É ${targetName(msg)} —Å–µ–π—á–∞—Å —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ${output.value}`});
    }

    let youre = manager.variables[msg.author.id] ? Object.keys(manager.variables[msg.author.id]) : [];
    manager.embed = {
      title: "–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞",
      description: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: ${Object.values(manager.variables).reduce((acc, last) => acc + Object.keys(last).length, 0)}${youre.length ? "\n–£ –≤–∞—Å —Å–≤–æ–π—Å—Ç–≤: " + youre.length : ""}\n\nüêµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.\nüôä –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n\nüê≠ –û—Ç–∫—Ä—ã—Ç—å –°–ø–∏—Å–æ–∫.\nü¶Ö –ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\nüê£ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–≤–æ–π—Å—Ç–≤—É.\nüê≤ –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.`,
      color: "#ffc135"
    };
    let baseReactions = ["üê≠", "ü¶Ö", "üê£"];
    if (isAdmin){
      baseReactions.unshift("üêµ", "üôä");
      baseReactions.push("üê≤");
    }

    manager.interface = await msg.msg(manager.embed);
    manager.embed.edit = true;
    delete manager.embed.description;

    let
      react, answer, fields = [],
      page = 0, pages = [];

    let output;
    while (true) {
      react = await manager.interface.awaitReact({user: msg.author, type: "one"}, ...baseReactions, (page != 0 ? "640449848050712587" : null), ((pages[1] && page != pages.length - 1) ? "640449832799961088" : null));
      switch (react) {
        case "üêµ":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", embed: {description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n–í–º–µ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ \"—Å–µ—Ä–≤–µ—Ä\"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞."}});
          if (!answer){
            return;
          }

          target = answer.content.match(/^(<@!?(\d{17,19})>|guild|—Å–µ—Ä–≤–µ—Ä|server)/i);
          if (!target){
            msg.msg({title: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 5000});
            break;
          }

          answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
          target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
          answer.content = answer.content.replace(/\s{1,}/g, " ").split(" ");

          if (!answer.content[1]){
            msg.msg({title: "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 3000});
            break;
          }

          output = manager.set(target, answer.content[0], answer.content.slice(1).join(" "));
          if (output.err){
            let err;
            switch (output.err) {
              case 1:
                err = "–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã";
                break;
              case 2:
                err = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º: 20 —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É";
                break;
              default:
                err = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏";
            }
            msg.msg({title: err, color: "#ff0000", delete: 4000});
            return;
          }

          msg.msg({title: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω–µ–Ω–∞:", description: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è \`${output.name}\` ${targetName(answer)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ${output.value}`});
          fields = [{name: "–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", value: `üêµ`}];
          break;

        case "üôä":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", embed: {description: "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n–í–º–µ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ \"—Å–µ—Ä–≤–µ—Ä\"\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞."}});
          if (!answer){
            return;
          }

          target = answer.content.match(/^(<@!?(\d{17,19})>|guild|—Å–µ—Ä–≤–µ—Ä|server)/i);
          if (!target){
            msg.msg({title: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å, –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å", color: "#ff0000", delete: 5000});
            break;
          }

          answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
          target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
          answer.content = answer.content.replace(/\s{1,}/g, " ").split(" ");

          if (!answer.content[0]){
            msg.msg({title: "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞", color: "#ff0000", delete: 3000});
            break;
          }

          output = manager.get(target, answer.content[0]);
          fields = [{name: `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${targerName(answer)} ${output.name}...`, value: `—Å–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ \`${output.value}\`üêµ`}];
          break;

        case "üê≠":
          fields = Object.entries(manager.list()).map(([name, count]) => ({name, value: `–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: ${Util.ending(count, "—Ä–∞–∑", "", "", "–∞")}`}));
          break;

        case "ü¶Ö":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–ª—è –µ—ë –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, description: ""});
          if (!answer){
              return;
          }
          fields = Object.entries(manager.search(answer.content)).map(([id, value], i) => ({name: `${id === "guild" ? "–°–µ—Ä–≤–µ—Ä" : msg.guild.members.cache.get(id).displayName}:`, value: `\`${value}\``}));
          break;

        case "üê£":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–µ–π –¢–û–ü-–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, description: ""});
          if (!answer){
              return;
          }

          fields = manager.top(answer.content).filter(e => e[0] != "guild").map(([id, value], i) => ({name: `${i + 1}. ${msg.guild.members.cache.get(id).displayName}`, value}));
          break;

        case "üê≤":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, embed: {description: "–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å, —Ç–æ–≥–¥–∞ —Å–≤–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –Ω–µ—ë"}});
          target = answer.content.match(/(?:<@!?\d{17,19}>|guild|—Å–µ—Ä–≤–µ—Ä|server)$/i);
          if (target){
            answer.content = answer.content.replace(target[0], "").replace(/\s{1,}/g, " ").trim();
            target = target[0].startsWith("<") ? target[0].match(/\d{17,19}/)[0] : "guild";
          }

          output = manager.remove(answer.content, target);
          fields = [{name: "–£–¥–∞–ª–µ–Ω–æ", value: `–£–¥–∞–ª–µ–Ω–æ ${ Util.ending(+output, "—Å–≤–æ–π—Å—Ç–≤", "", "–æ", "–∞")} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ${answer.content}`}];
          break;


        default: return;
      }
      if (react != "640449848050712587" && react != "640449832799961088"){
        page = 0;
        pages = [];
        while (fields.length) pages.push(fields.splice(0, 10));
      }
      fields = (pages[0]) ? pages[page] : [{name: "–ó–¥–µ—Å—å –ø—É—Å—Ç–æ", value: "–ê –∑–¥–µ—Å—å –∏ –≤–ø—Ä–∞–≤–¥—É –ø—É—Å—Ç–æ..."}];
      manager.embed.footer = (pages[1]) ? {text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`} : null;
      manager.embed.fields = fields;

      manager.interface.msg({title: `${ react } –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞`, ...manager.embed});
    }

  }, {delete: true, dm: true, Permissions: 256, type: "guild"}, "variable –≤–∞—Ä var –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"),

  guildcommand: new Command(async (msg, interaction) => {
    let heAccpet = await Util.awaitUserAccept({name: "guildCommand", message:  {description: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—á–µ–Ω—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –∏ –ø—Ä–æ—Å—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ –±–æ—è—Ç—Å—è –∫–æ–Ω–µ—á–Ω–æ. –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ \"[–®–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö](https://discord.gg/7ATCf8jJF2)\".\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å :)", title: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ ü§î"}, channel: msg.channel, userData: interaction.userData});
    if (!heAccpet) return;

    let answer, react;
    let commands = msg.guild.data.commands || (msg.guild.data.commands = {});


    answer = await msg.channel.awaitMessage(msg.author, {title: "–®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", embed: {description: `–û–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –¥–ª—è –≤—ã–∑–æ–≤–∞.\n–°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :)`, time: 1000000}});
    if (!answer) return false;
    answer.content = answer.content.replace(/[^a-z–∞-—è—ó—ë_$]/gi, "").toLowerCase();

    let cmd;
    if (commands[answer.content]) {
      let oldCommand = await msg.msg({title: "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—ë?", description: "‚úèÔ∏è ‚Äî –•–æ—á—É –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã\nüóëÔ∏è ‚Äî –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ!"});
      react = await oldCommand.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456", "‚úèÔ∏è", "üóëÔ∏è");
      oldCommand.delete();
      if (react == 763807890573885456) return msg.msg({title: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", delete: 4500}), false;
      else cmd = commands[answer.content] = {name: answer.content, author: msg.author.id};

      if (react == "‚úèÔ∏è") {
        answer = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"});
        if (!answer) return;
        cmd.message = answer.content;
        return msg.msg({title: "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", delete: 5000});
      }

      if (react == "üóëÔ∏è") {
        delete commands[answer.content];
        return msg.msg({title: "–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞.", delete: 5000});
      }
    }
    else cmd = commands[answer.content] = {name: answer.content, author: msg.author.id};

    while (true) {
      answer = await msg.channel.awaitMessage(msg.author, {title: "–®–∞–≥ 2. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —à–∞–±–ª–æ–Ω—ã `{}`", embed: {description: `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n_–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞! –í—ã–ø–∞–ª–æ: \\{bot.methods.random(6)}._\n–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ \\{guild.members.count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n–ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —ç—Ç–æ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å –ø–æ–∑–Ω–∞–Ω–∏—è —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π –≤–µ—â–∏ –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –ª–µ–≥–æ.`, time: 3600000}})
      if (!answer) return false;
      cmd.message = answer.content;

      if (!answer.content.match(/!\{.+?\}/g)) {
        let notTemplate = await msg.msg({title: "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∏—Ö?"});
        react = await notTemplate.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
        notTemplate.delete();
        if (react == 685057435161198594) break;
      }
      break;
    }

    let message = await msg.msg({title: "–®–∞–≥ 3. –í–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–µ–Ω —ç–º–±–µ–¥?", description: `–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —ç–º–±–µ–¥-–æ–±—ë—Ä—Ç–∫–∞, —Ü–≤–µ—Ç –∏ –∑–∞–≥–ª–∞–≤–∏–µ`});
    react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
    message.delete();
    if (react == 685057435161198594){
      answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞", embed: {description: `–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ ‚Äî –≥–æ–ª–æ–≤–∞ —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è...\n–ö —Å–ª–æ–≤—É, –æ–Ω–∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã`, time: 1200000}});
      if (!answer) return false;
      cmd.title = answer.content;

      answer = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ", embed: {description: `HEX ‚Äî #ff0000, –≥–¥–µ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ 16-–∑–Ω–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (0,1,2,...,e,f) ‚Äî –∫—Ä–∞—Å–Ω—ã–π, –ø–æ—Ç–æ–º –∑–µ–ª–µ–Ω—ã–π –∏ —Å–∏–Ω–∏–π`, time: 1200000}});
      if (!answer) return false;
      cmd.color = answer.content.replace("#", "");
    }

   message = await msg.msg({title: "–®–∞–≥ 4. –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∫–æ–º–∞–Ω–¥—ã", description: `–£–∫–∞–∂–∏—Ç–µ –∫—É–ª–¥–∞—É–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.`});
   while(true) {
     answer = await Util.awaitReactOrMessage(message, msg.author, "‚ùå");
     if (!answer) return false;
     if (answer != "‚ùå"){
       if (isNaN(answer.content)) {
         msg.msg({title: "–£–∫–∞–∑–∞–Ω–æ –Ω–µ —á–∏—Å–ª–æ", color: "#ff0000", delete: 3000});
         continue;
       }
       cmd.cooldown = answer.content * 1000;
       break;
     }
     break;
  }
  message.delete();

  message = await msg.msg({title: "–®–∞–≥ 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π.", description: "–ù—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã?"});
  react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
  if (react == "685057435161198594") cmd.delete = true;
  message.delete();

  msg.msg({title: "–ì–æ—Ç–æ–≤–æ!", description: `–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É \`!${cmd.name}\`. –°–∞–º–æ–µ –≤—Ä–µ–º—è –µ—ë –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å üòã`});
  }, {Permissions: 8, delete: true, type: "guild"}, "guildcommands createcommand –∫–æ–º–∞–Ω–¥–∞"),

  role: new Command(async (msg, interaction) => {
    let heAccpet = await Util.awaitUserAccept({name: "tieRoles", message: "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–≥—É—Ç –¥–∞—Ç—å —Å–≤–æ–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞–≤–∞—Ç—å –∏–ª–∏ —Å–Ω–∏–º–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏, –Ω–µ –¥–∞–≤–∞—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ä—ã–º–∏", channel: msg.channel, userData: interaction.userData});
    if (!heAccpet) {
      return;
    }

    let tieRoles = msg.guild.data.tieRoles || (msg.guild.data.tieRoles = {});
    const guildRoles = {};

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–ª–∏-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –æ–Ω–∏.
    Object.keys(tieRoles).forEach((control) => {
      controlRole = guildRoles[control] = msg.guild.roles.cache.get(control);
      if (!controlRole) delete tieRoles[control];
    });
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ
    Object.entries(tieRoles).forEach(([control, roles]) => tieRoles[control] = roles.filter(e => {
      return guildRoles[e] = guildRoles[e] || msg.guild.roles.cache.get(e);
    }));


    if (interaction.mention){
      let memb = interaction.mention;
      let myControled = interaction.mentioner.roles.cache.filter(e => Object.keys(tieRoles).includes(e.id)).map(e => e.id);
      let [mention, id] = interaction.params.split(" ");

      let controledRoles = new Set();
      Object.entries(tieRoles).filter(([control, roles]) => myControled.includes(control)).map(([control, roles]) => roles).forEach(e => controledRoles.add(e));
      controledRoles = [...controledRoles];

      if (!controledRoles.length) {
        msg.msg({title: "–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–≥–ª–∏ –±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å", color: "#ff0000", delete: 5000});
        return;
      }

      if (!id) {
        numberReactions = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"].slice(0, controledRoles.length);
        let message = await msg.msg({title: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–π–¥–∏ —Ä–æ–ª–∏", description: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∞–º —Ä–æ–ª—å, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${memb}\n${controledRoles.map((id, i) => `${numberReactions[i]} ${guildRoles[id]}`).join("\n")}`, color: "#00ff00"});
        let react = await message.awaitReact({user: msg.author, type: "all"}, ...numberReactions);
        message.delete();
        if (react) id = controledRoles[numberReactions.indexOf(react)];
      }

      if (!controledRoles.includes(id)) {
        msg.msg({title: "–û—Ç—Å—É—Å—Ç–≤—É—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏", description: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å ${guildRoles[id]}, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö —Ä–æ–ª–µ–π.\n–ò—Ö –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π \`!role\``});
        return;
      }

      memb = msg.guild.members.resolve(memb);
      let heHas = memb.roles.cache.find(e => e.id == id);
      memb.roles[heHas ? "remove" : "add"](id);
      msg.msg({title: "–†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã", description: `${heHas ? `–£ ${memb} –æ—Ç–Ω—è–ª–∏` : `${memb} –ø–æ–ª—É—á–∏–ª`} —Ä–æ–ª—å ${guildRoles[id]}`, delete: 5000});
      return;
    }


    let page = 0;
    let pages = [];

    const isAdmin = !interaction.mentioner.wastedPermissions(8)[0];
    const reactions = [
      {emoji: "640449848050712587", filter: () => page != 0},
      {emoji: "640449832799961088", filter: () => pages[1] && page !== pages.length - 1},
      {emoji: "‚≠ê", filter: () => isAdmin},
      {emoji: "‚ùå", filter: () => isAdmin && Object.keys(tieRoles).length !== 0}
    ]


    const createPages = () => pages = Object.entries(tieRoles).map(([control, roles]) => `[${guildRoles[control]}]\n${roles.map(e => `‚Ä¢ ${guildRoles[e]}`).join("\n")}`);
    createPages();

    if (pages.length === 0) {
      pages.push("–ù–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.");
    }

    const embed = {
      title: "–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏",
      description: pages[0],
      footer: {
        text: `–ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—Ä–æ–ª—å @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n${isAdmin ? "–° –ø–æ–º–æ—â—å—é —Ä–µ–∞–∫—Ü–∏–π –Ω–∏–∂–µ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–≤—è–∑—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ." : ""}${pages[1] ? `\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}` : ""}`
      }
    };






    let message = await msg.msg(embed);
    embed.edit = true;

    let react;
    while (true) {
      react = await message.awaitReact({user: msg.author, type: "all"}, ...reactions.filter( r => r.filter() ).map( r => r.emoji ));
      switch (react) {
        case "640449832799961088": page++;
        break;
        case "640449848050712587": page--;
        break;

        case "‚≠ê":
          let controller = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Ä–æ–ª–∏", embed: {description: "–û–Ω–∞ —Å–º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∏–ª–∏ —Å–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ–∑–∂–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏"}});
          if (!controller){
            continue;
          }
          controller = msg.guild.roles.cache.get(controller.content);
          if (!controller){
            msg.msg({title: `–ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ä–æ–ª—å —Å –∞–π–¥–∏ ${controller.content}`, delete: 8000});
            continue;
          }

          let rolesList = await msg.channel.awaitMessage(msg.author, {title: "–° —á—ë–º —Å–≤—è–∑–∞—Ç—å..?", embed: {description: `–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å ${controller.name}`}});
          if (!rolesList){
            continue;
          }
          rolesList = rolesList.content.split(" ").map(e => msg.guild.roles.cache.get(e)).filter(e => e);
          if (rolesList.length === 0){
            msg.msg({title: `–ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π`, delete: 8000});
            continue;
          }

          tieRoles[controller.id] = tieRoles[controller.id] || [];
          rolesList.forEach(e => {
            guildRoles[e.id] = e;
            if (e.id in tieRoles[controller.id]){
              return;
            }
            tieRoles[controller.id].push(e.id);
          });
          guildRoles[controller.id] = controller;
          msg.msg({title: `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${Util.ending(rolesList.length, "—Å–≤—è–∑", "–µ–π", "—å", "–∏")}`, footer: {text: "–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∞ –≥–ª–∞–≤–Ω–æ–µ –Ω–∏–∫–∞–∫–æ–π –º–∏—Å—Ç–∏–∫–∏!"}, description: rolesList.map(role => `‚Ä¢ ${role}`).join("\n"), delete: 12000});
          createPages();
        break;

        case "‚ùå":
        let id = Object.keys(tieRoles)[page];
        let deleteRolesMessage = await msg.msg({title: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å..?`, description: `–í—ã –æ—á–∏—Å—Ç–∏—Ç–µ –≤—Å–µ —Å–≤—è–∑–∏ —Å —Ä–æ–ª—å—é ${guildRoles[id]}`});
        react = await deleted.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
        deleted.delete();

        if (react == "685057435161198594"){
          delete tieRoles[id];
          if (pages[0]){
            pages = ["–ù–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–≤—è–∑–∏, –≤—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."];
          }
          msg.msg({title: `–°–≤—è–∑—å #${page + 1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`, delete: 5000});
          pages = pages.splice(page, 1);
          page = Math.max(page - 1, 0);
          createPages();
        }
        break;

        default:
        return message.delete();
      }
      embed.description = pages[page];
      if (pages[1]) {
        embed.footer.text = embed.footer.text.split("\n").slice(0, 2).join("\n").concat(`\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1} / ${pages.length}`);
      }
      message.msg(embed);
    }
  }, {delete: true, cooldown: 3, cooldownTry: 3, type: "guild"}, "—Ä–æ–ª—å roles —Ä–æ–ª–∏"),

  chilli: new Command(async (msg, interaction) => {
    let memb = interaction.mention;
    let chilli = msg.channel.chilli && msg.channel.chilli.find(chilli => chilli.current === msg.author.id);
    setTimeout(() => msg.delete(), 30000);

    const addName = (memb) => {
      let newName = memb.displayName + "(üå∂)";
      memb.setNickname(newName).catch(() => {});
    }
    const removeName = (memb) => {
      let newName = memb.displayName.replace(/\(üå∂\)/g, "").trim();
      memb.setNickname(newName).catch(() => {});
    }


    if (!chilli && !msg.author.data.chilli) {
      return msg.msg({title: "–î–ª—è –±—Ä–æ—Å–∫–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏–ª–ª–∏ üå∂Ô∏è\n–ö—É–ø–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ !–ª–∞–≤–∫–µ", color: "#ff0000", delete: 5000, footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ë–µ–∑—É–¥–µ—Ä–∂–Ω—ã–π –ø–µ—Ä—á–∏–∫‚Ñ¢"}});
    }
    if (msg.channel.chilli && msg.channel.chilli.find(e => e.id == memb.id)) {
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ—Ü –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–µ—Ä—Ü–µ–º –≤ —Ä—É–∫–µ", color: "#ff0000", footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ü–µ—Ä—á–∏–∫‚Ñ¢"}});
    }
    if (memb.bot) {
      return msg.msg({title: "ü§¨ü§¨ü§¨", description: "it's hot fruitctttt", color: "#ff0000", footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ö–æ–µ-–∫—Ç–æ –±—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ü –≤ –±–æ—Ç–∞.."}});
    }

    if (chilli){
      chilli.current = memb.id;
      chilli.players[msg.author.id] = ++chilli.players[msg.author.id] || 1;
      removeName(interaction.mentioner);
      addName(msg.guild.members.resolve(memb));

      msg.msg({title: ["–ë—Ä–æ—Å–æ–∫!", "–ê –≥–æ–≤–æ—Ä—è—Ç –ø–µ—Ä—Ü—ã –Ω–µ –ª–µ—Ç–∞—é—Ç..."].random(), 
        description: `–í—ã –±—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä—á–∏–∫–æ–º –≤ ${ memb }`,
        author: {name: msg.author.username, iconURL: msg.author.avatarURL()},
        footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ë–µ–∑—É–¥–µ—Ä–∂–Ω—ã–π –ø–µ—Ä—á–∏–∫‚Ñ¢"},
        delete: 7000
      });

      chilli.rebounds++;
      clearTimeout(chilli.kickTimeout);
      chilli.kickTimeout = setTimeout(e => (msg.channel.chilli && msg.channel.chilli.includes(chilli) && chilli.timeout._onTimeout(), clearTimeout(chilli.timeout)), 5500);
      return;
    }

    const confirm = await msg.msg({title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", description: `${ msg.author.username }, –≤—ã –±—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ—Ü, –Ω–∞–∂–º–∏—Ç–µ "‚ùå" —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å`, reactions: ["‚ùå"]});

    await Util.sleep(2000);
    confirm.delete();

    const confirmed = !confirm.reactions.cache.get("‚ùå").users.cache.has(msg.author.id);
    if (!confirmed){
      msg.msg({title: "–û—Ç–º–µ–Ω–µ–Ω–æ üå∂Ô∏è", delete: 7000});
      return;
    }
      


    msg.author.data.chilli--;
    msg.channel.chilli = msg.channel.chilli || [];

    msg.msg({title: `–ü–µ—Ä–µ—Ü –ø–∞–¥–∞–µ—Ç! –ü–µ—Ä–µ—Ü –ø–∞–¥–∞–µ—Ç!!`, description: `\*–ø–µ—Ä–µ—Ü —É–ø–∞–ª –≤ —Ä—É–∫–∏ ${memb.toString()}\*\n–ß—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`!chilli @memb\``, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ë–µ–∑—É–¥–µ—Ä–∂–Ω—ã–π –ø–µ—Ä—á–∏–∫‚Ñ¢"}});
    addName(msg.guild.members.resolve(memb));
    let ms = Util.random(30, 37) * 1000;

    chilli = { timestamp: Date.now() + ms, players: {}, current: memb.id, rebounds: 0, author: msg.author.id };
    chilli.players[ memb.id ] = 0;
    chilli.players[ msg.author.id ] = 0;

    msg.channel.chilli.push(chilli);

    chilli.timeout = setTimeout(() => {
      let member = msg.guild.members.cache.get(chilli.current);

      Object.keys(chilli.players)
        .forEach(id => client.users.cache.get(id).action(Actions.chilliBooh, {boohTarget: member, chilli, msg, interaction}));

      msg.msg({title: "–ë–∞—Ö! –ü–µ—Ä—á–∏–∫ –≤–∑–æ—Ä–≤–∞–ª—Å—è!", 
        description: `–ü–µ—Ä–µ—Ü –±–∞—Ö–Ω—É–ª –ø—Ä—è–º–æ —É ${ member }\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n–ë—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ –æ—Ç—Å–∫–æ–∫–æ–≤: ${ chilli.rebounds }`,
        fields: Object.entries(chilli.players).sortBy("1", true).map(([id, score]) => ({name: msg.guild.members.cache.get(id).user.username, value: `–°—á—ë—Ç: ${ score }`})).slice(0, 20),
        footer: {iconURL: "https://emojitool.ru/img/microsoft/windows-10-may-2019-update/hot-pepper-2179.png", text: "–ë–µ–∑—É–¥–µ—Ä–∂–Ω—ã–π –ø–µ—Ä—á–∏–∫‚Ñ¢"}
      });
      removeName(member);
      msg.channel.chilli.splice(msg.channel.chilli.indexOf(chilli), 1);


      if (!msg.channel.chilli[0]) {
        delete msg.channel.chilli;
      }
    }, ms);

  }, {memb: true, cooldown: 3.5, cooldownTry: 2, type: "other", hidden: true}, "–ø–µ—Ä—á–∏–∫ –ø–µ—Ä–µ—Ü"),

  rob: new Command(async (msg, interaction) => {
    let memb = interaction.mention;

    if (!interaction.userData.thiefGloves)
      return msg.msg({title: "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–µ—Ä—á–∞—Ç–∫–∏", description: "–ò—Ö, –∏–Ω–æ–≥–¥–∞, –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ !–ª–∞–≤–∫–µ, –ø–æ —Ü–µ–Ω–µ 700 –∫–æ–∏–Ω–æ–≤", color: "#ff0000", delete: 7000});


    let [count, combo] = interaction.userData.thiefGloves.split("|");

    if (memb.id == msg.author.id){
      msg.msg({title: "–°—Ä–µ–¥–∏ –±–µ–ª–∞-–¥–Ω—è –≤—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ —Å–µ–±—è –ø–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ", description: "–ü–æ–∫–∞ –≤—ã –∫—Ä–∏—á–∞–ª–∏ \"–í–æ—Ä! –í–æ—Ä! –õ–æ–≤–∏—Ç–µ –≤–æ—Ä–∞!\", –∫ –≤–∞–º —É–∂–µ –ø–æ–¥—ä–µ–∂–∞–ª–∞ –ª–µ—Å–Ω–∞—è —Å–∫–æ—Ä–∞—è", image: "https://media.discordapp.net/attachments/629546680840093696/1048500012360929330/rob.png"});
      return;
    }
      

    if (!count || +count < 1)
      return msg.msg({title: "–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –ø–µ—Ä—á–∞—Ç–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ", color: "#ff0000", delete: 7000});

    if (memb.bot)
      return msg.msg({title: `–í –ø–æ–ø—ã—Ç–∫–∞—Ö –æ–≥—Ä–∞–±–∏—Ç—å –±–æ—Ç–∞ ${memb.username} –≤—ã –Ω–µ —É—á–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –µ–≥–æ —Ä–µ–∞–∫—Ü–∏–∏.`, description: "–ö —Å—á–∞—Å—Ç—å—é —Ä–æ–±–æ—Ç—ã –Ω–µ –æ–±–∏–∂–∞—é—Ç—Å—è...", color: "#ff0000"});


    let membWins = memb.data.thiefWins |= 0;
    let k = (1 + (membWins > 0 ? membWins * 1.2 : Math.max(membWins, -10) * 0.07));

    if (memb.data.voidMonster){
      k *= 12;
    }


    let rand = ~~(random(21, 49) * (combo / 10 + 1) * k) + memb.data.level;

    if (memb.presence.status == "offline")
      return msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤ –æ—Ñ—Ñ–ª–∞–π–Ω", color: "#ff0000", delete: 7000});

    let message = await memb.msg({title: "‚ùï –í—ã –±—ã–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω—ã", description: `–õ–æ–≤–∫–∏–π –≤–æ—Ä —Å—Ä–µ–¥—å –±–µ–ª–æ-–¥–Ω—è —É–∫—Ä–∞–ª —É –≤–∞—Å ${rand} <:coin:637533074879414272>\n–£ –≤–∞—Å –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–≥–Ω–∞—Ç—å –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–∏–Ω—ã`, color: "#ff0000"}).catch(e => {});
    if (!message){
      msg.author.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description: "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è \"–ù–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞\" –ò–∑-–∑–∞ —á–µ–≥–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ –∫—Ä–∞–∂–µ..."});
      return;
    }


    memb.data.coins -= rand;
    interaction.userData.coins += rand;
    interaction.userData.CD_39 += 7200000;

    msg.msg({title: "–û–≥—Ä–∞–±–ª–µ–Ω–æ –∏ —É–∫—Ä–∞–¥–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –±–µ–∂–∞—Ç—å", description: `–í—ã —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–ª–∏ ${rand} <:coin:637533074879414272> —É ${memb.username}, –Ω–æ —ç—Ç–æ –µ—â—ë –Ω–µ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –≤–∞—Å –¥–æ–≥–æ–Ω—è—Ç, –Ω–∞–≥—Ä–∞–±–ª–µ–Ω–Ω–æ–µ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.\n–£ ${memb.username} –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞, —á—Ç–æ–±—ã —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –¥–æ–±—ã—á–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞.`, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, footer: {text: "–°–µ—Ä–∏—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π: " + ++combo}, delete: 10000});
    let react = await message.awaitReact({user: memb, type: "none", time: 60000}, "‚ùó");


    const
      note         = interaction.params.slice(interaction.mention.toString().length + 1).trim(),
      monsterHelps = memb.data.voidMonster && !(memb.data.CD_39 > Date.now()),
      hurt         = memb.data.thiefWins < -5,
      detective    = hurt && Util.random(1 / (-memb.data.thiefWins * 2.87), {round: false}) <= 0.01;


    if (react || monsterHelps || detective) {
      memb.data.coins += rand;
      interaction.userData.coins -= rand;
      let coinsReturn;

      if (react) {
        interaction.userData.thiefGloves = --count + "|" + 0;
        let accusation  = "";
        let action      = "–í—ã –≤–µ—Ä–Ω—É–ª–∏ —Å–≤–æ–∏ –∫–æ–∏–Ω—ã –∏ —Ö–æ—Ä–æ—à–æ —Å –Ω–∏–º –ø–æ—Å–º–µ—è–ª–∏—Å—å";
        let explanation = `${memb.username} —É—Å–ø–µ–ª —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É–ª –∫–æ–∏–Ω—ã`;

        if (hurt){
          let hurtMessage = await memb.msg({title: "‚ùî –ü—Ä–æ—Å—Ç–∏—Ç—å –í–æ—Ä–∞?", description: `–ï—Å–ª–∏ –≤—ã –µ–≥–æ –ø—Ä–æ—Å—Ç–∏—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∫—Ä–∞–¥—ë—Ç —Å–Ω–æ–≤–∞, –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ 98% –≤–æ—Ä–æ–≤ –¥–µ–ª–∞—é—Ç —ç—Ç–æ –æ–ø—è—Ç—å, –∏ –æ–ø—è—Ç—å.\n–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –≤–∞—Å –æ–≥—Ä–∞–±–∏–ª –∏ –Ω–µ –æ–±–Ω—É–ª–∏—Ç–µ —Å–µ—Ä–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫.\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —á–∞—Å—Ç—å –µ–≥–æ –∫–æ–∏–Ω–æ–≤ —É–π–¥–µ—Ç –∫ –≤–∞–º.`});
          react = await hurtMessage.awaitReact({user: memb, type: "none", time: 60000}, "üòá", "üòà");
          if (react === "üòá"){
            msg.author.msg({title: `–í—ã –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã`, description: `${memb.username} —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –≤—ã –µ–≥–æ –æ–≥—Ä–∞–±–∏–ª–∏ ${ Util.ending(-memb.data.thiefWins, "—Ä–∞–∑", "", "–∞", "")} –ø–æ–¥—Ä—è–¥, –Ω–æ —Ç–∞–∫–∂–µ —Ä–µ—à–∏–ª –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∞—Å –∑–∞ —ç—Ç–æ –∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å –≤–∞—Å –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–Ω–µ–≥.` , color: "#ff0000"});
            message.msg({footer: {text: "‚Äî üíö."}, author: {iconURL: client.user.avatarURL(), name: "–ß—Ç–æ-–∂–µ... –≠—Ç–æ –±—ã–ª–æ –º–∏–ª–æ. –ù–∞–≤–µ—Ä–Ω–æ–µ..."}});
            return;
          }

          coinsReturn = Math.floor(interaction.userData.coins / 3);
          memb.data.coins += coinsReturn;
          interaction.userData.coins -= coinsReturn;
          accusation = `–°–µ–π—á–∞—Å –æ–Ω –æ–±–≤–∏–Ω—è–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏—É–º –≤ ${-memb.data.thiefWins} –≥—Ä–∞–±–µ–∂–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö, –∫ –µ–≥–æ –≥–æ—Ä—é –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ 30% –∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${coinsReturn}) <:coin:637533074879414272> –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Ö –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.`;
          action = `–û–¥–Ω–∞–∫–æ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –±—É–¥—É—á–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏, —á—Ç–æ –≤—Å–µ ${ Util.ending(-memb.data.thiefWins, "—Ä–∞–∑", "", "–∞", "")} –±—ã–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –∏–º.`;
        }

        msg.msg({title: "–ü–æ–π–º–∞–Ω–Ω—ã–π –≤–æ—Ä", description: `–°–µ–≥–æ–¥–Ω—è –µ–Ω–æ—Ç–æ–≤—Å–∫–∞—è –ø–æ–ª–∏—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∞–ª–∞ –≤—Å–µ–º–∏ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∂–∏—Ç–µ–ª—è ${msg.author.toString()}, –æ–Ω –±—ã–ª –ø–æ–π–º–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å—Ç–∞—â–∏—Ç—å –∫–æ–∏–Ω—ã —É ${memb.username}, –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∞–º –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —ç—Ç–∏ –∫–æ–∏–Ω—ã –µ–º—É –Ω—É–∂–Ω—ã –±—ã–ª–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–µ—Ç–∏—à–∫–∞–º.`, color: "#ff0000", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, footer: {text: memb.username, iconURL: memb.avatarURL()}});
        memb.data.thiefWins = Math.max(1, ++membWins);
        message.msg({title: "–û–≥–æ –∫–∞–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –≤—ã –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª —Ö–æ–¥–∏–ª–∏?", description: `–í—ã –±—ã—Å—Ç—Ä–æ –¥–æ–≥–Ω–∞–ª–∏ –≤–æ—Ä–∏—à–∫—É, –∏–º –æ–∫–∞–∑–∞–ª—Å—è –≤–∞—à –∑–Ω–∞–∫–æ–º—ã–π ${msg.author.username}\n${action}`});
        return;
      }

      if (monsterHelps){
        msg.author.msg({title: `–í–∞—Å –Ω–∞—Å—Ç–∏–≥ –æ–≥—Ä–æ–º–Ω—ã–π –º–æ–Ω—Å—Ç—Ä. –ù–µ—É–¥–∞–ª–æ—Å—å –ø–æ—Ö–∏—Ç–∏—Ç—å –∫–æ–∏–Ω—ã.`, color: "#ff0000"});
        msg.msg({title: "–ü–æ—á—Ç–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–π –≤–æ—Ä", description: `–°–µ–≥–æ–¥–Ω—è –æ–≥—Ä–æ–º–Ω—ã–π –º–æ–Ω—Å—Ç—Ä üê≤ –∑–∞–¥–µ—Ä–∂–∞–ª –≤—Å–µ–º–∏ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∂–∏—Ç–µ–ª—è ${msg.author.toString()}, –æ–Ω –±—ã–ª –ø–æ–π–º–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å—Ç–∞—â–∏—Ç—å –∫–æ–∏–Ω—ã —É ${memb.username}, –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∞–º –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —ç—Ç–∏ –∫–æ–∏–Ω—ã –µ–º—É –Ω—É–∂–Ω—ã –±—ã–ª–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–µ—Ç–∏—à–∫–∞–º.`, color: "#ff0000", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, footer: {text: memb.username, iconURL: memb.avatarURL()}})
        message.msg({title: "–í–∞—à —Ä—É—á–Ω–æ–π –º–æ–Ω—Å—Ç—Ä –¥–æ–≥–Ω–∞–ª –≤–æ—Ä–∏—à–∫—É üê≤", description: `–ß—É—Ç—å –Ω–µ —Å—ä–µ–≤ –±–µ–¥–Ω—è–≥—É, –º–æ–Ω—Å—Ç—Ä –≤–µ—Ä–Ω—É–ª –≤–∞—à–∏ –∫–æ–∏–Ω—ã, –≥—Ä–∞–±–∏—Ç–µ–ª–µ–º –æ–∫–∞–∑–∞–ª—Å—è –≤–∞—à –≥–ª—É–ø—ã–π –∑–Ω–∞–∫–æ–º—ã–π ${msg.author.username}...`});

        if (note){
          message.msg({title: "–£ —Å–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö –≤—ã —Ç–∞–∫–∂–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∑–∞–ø–∏—Å–∫—É:", description: note});
        }
        return;
      }

      if (detective){
        coinsReturn = -memb.data.thiefWins * 20 * Math.round(combo / 2 + 2);
        interaction.userData.coins -= coinsReturn;
        interaction.userData.thiefGloves = "-2|0";
        memb.data.thiefWins += 5;

        msg.author.msg({title: `–í–∞—Å –ø–æ–π–º–∞–ª –Ω–∞ –≥–æ—Ä—è—á–µ–º –º–µ—Å—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤`, description: `–û–Ω –¥–∞–≤–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è ${memb} –≤–≤–∏–¥—É —á–∞—Å—Ç—ã—Ö –Ω–∞–ø–∞–¥–µ–Ω–∏–π. –¢–µ–ø–µ—Ä—å –≤–∞–º —Å–≤–µ—Ç–∏—Ç –ø–æ—Ç–µ—Ä—è –ø–µ—Ä—á–∞—Ç–æ–∫ —Å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π —É—â–µ—Ä–±–∞.` , color: "#ff0000"});
        msg.msg({title: "–í–æ—Ä–∞ –Ω–∞ –≥–æ—Ä—è—á–µ–º –ø–æ–π–º–∞–ª –≥–µ—Ä–æ–π-–¥–µ—Ç–µ–∫—Ç–∏–≤", description: `–ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞–ª –∑–∞ ${memb.username}, –∏ –Ω–µ –∑—Ä—è! –°–µ–≥–æ–¥–Ω—è –Ω–∞ –Ω–µ–≥–æ –Ω–∞–ø–∞–ª –≤–æ—Ä ‚Äî ${msg.author}  –±—ã–ª –ø–æ–π–º–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∫—Ä–∞—Å—Ç—å –∫–æ–∏–Ω—ã. –ö–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∞–º –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —ç—Ç–∏ –∫–æ–∏–Ω—ã –µ–º—É –Ω—É–∂–Ω—ã –±—ã–ª–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–µ—Ç–∏—à–∫–∞–º. –û–¥–Ω–∞–∫–æ –∑–∞ —Å–µ—Ä–∏—é –≤ ${-memb.data.thiefWins} –Ω–∞–ø–∞–¥–µ–Ω–∏–π, –æ–Ω –æ–±—è–∑–∞–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ ${coinsReturn} <:coin:637533074879414272> –∫–æ–∏–Ω–æ–≤ –∏ —Å–¥–∞—Ç—å –ª—é–±—ã–µ —Å–≤–æ–∏ –ø–µ—Ä—á–∞—Ç–∫–∏.\n–≠—Ç–æ—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤ —É–±–µ–∂–¥—ë–Ω, –ø–æ–∫–∞ –æ–Ω –∑–∞—â–∏—â–∞–µ—Ç —ç—Ç–æ—Ç –ª–µ—Å ‚Äî –±–æ—è—Ç—Å—è –Ω–µ—á–µ–≥–æ!`, color: "#ff0000", author: {name: msg.author.username, iconURL: msg.author.avatarURL()}, footer: {text: memb.username, iconURL: memb.avatarURL()}})
        message.msg({title: "–í–∞—Å —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å", description: `–ú–µ—Å—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –¥–∞–≤–Ω–æ —Å–ª–µ–¥–∏–ª –∑–∞ –≤–∞–º–∏ –≤–≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ –≤–∞—Å –≥—Ä–∞–±–∏–ª–∏ –Ω–µ –æ–¥–∏–Ω —Ä–∞–∑. –í–∞–º –ø–æ–≤–µ–∑–ª–æ, —á—Ç–æ —Å–µ–π—á–∞—Å –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è —Ä—è–¥–æ–º –∏ —Å–º–æ–≥ –ø–æ–π–º–∞—Ç—å –≤–æ—Ä–∞!`});
        return;
      }
    }

    if (combo === 7)
      msg.author.action(Actions.globalQuest, {name: "thief"});

    if (memb.data.thiefWins >= 9)
      msg.author.action(Actions.globalQuest, {name: "crazy"});


    if (interaction.userData.voidThief)
      interaction.userData.chestBonus = (interaction.userData.chestBonus ?? 0) + interaction.userData.voidThief * 10;



    let description = note ? `–£ —Å–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∑–∞–ø–∏—Å–∫—É:\n‚Äî ${note}` : "";
    if (memb.data.voidMonster){
      description = "–í–∞—à –º–æ–Ω—Å—Ç—Ä –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –≤–∞–º –ø–æ–º–æ—á—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã —Å–∞–º–∏ –æ–≥—Ä–∞–±–∏–ª–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞\n" + description;
    }
    message.msg({title: "–í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –≤ —Å–µ–±—è ‚Äî –≤–æ—Ä —É—à—ë–ª.", description: description, color: "#ff0000"});


    interaction.userData.thiefGloves = count + "|" + combo;
    msg.author.msg({title: `–í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ ‚Äî –≤—ã —Å–∫—Ä—ã–ª–∏—Å—å –∏ –≤–∞—Å –Ω–µ —É–∑–Ω–∞–ª–∏!\n–¢–µ–∫—É—â–µ–µ –∫–æ–º–±–æ: ${combo}`});

    message.reactions.cache.get("‚ùó").users.remove();
    memb.data.thiefWins = Math.min(-1, --membWins);

  }, {delete: true, dm: true, memb: true, cooldown: 3, type: "user"}, "–æ–≥—Ä–∞–±–∏—Ç—å —Ä–æ–± —É–∫—Ä–∞—Å—Ç—å"),

  ball: new Command(async (msg, interaction) => {
    if (!interaction.params.includes(" ")) {
      return msg.msg({title: "–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å", delete: 4000, color: "#ff0000"});
    }

    msg.channel.startTyping();
    await Util.sleep(700);
    let answer = [{_weight: 1, answer: "*–ß—Ç–æ-—Ç–æ –Ω–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–º*"}, {_weight: 1, answer: "–¢—ã —Å–∫—É—á–Ω—ã–π, —è —Å–ø–∞—Ç—å"}, {_weight: 2, answer: "\\*–ó–≤—É–∫–∏ —Å–≤—ë—Ä—á–∫–æ–≤\\*"}, {_weight: 3, answer: "–Ω–µ—Ç-–Ω–µ—Ç-–Ω–µ—Ç."}, {_weight: 3, answer: "–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª ‚Äî –Ω–µ—Ç"}, {_weight: 3, answer: "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π"}, {_weight: 4, answer: "–ê–±—Å–æ–ª—é—Ç–Ω–æ –∏ –±–µ—Å–ø—Ä–µ–∫–æ—Å–ª–æ–≤–Ω–æ, –º–æ–π –æ—Ç–≤–µ—Ç ‚Äî –Ω–µ—Ç."}, {_weight: 5, answer: "–ú–µ—á –ª–∂–∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –¥–∞"}, {_weight: 6, answer: "–¢–æ—á–Ω–æ –Ω–µ—Ç"}, {_weight: 7, answer: "–Ω–µ–∞"}, {_weight: 8, answer: "–Ω–µ—Ç"}].random({weights: true}).answer;
    client.api.channels(msg.channel.id).messages.post({data: {"content": `${answer}`, "message_reference": {message_id: msg.id}}});
    await Util.sleep(1500);
    msg.channel.stopTyping();
  }, {cooldown: 3, cooldownTry: 2, args: true, type: "other"}, "8ball —à–∞—Ä"),

  avatar: new Command(async (msg, interaction) => {
    const avatarURL = (interaction.mention || msg.author).avatarURL({dynamic : true});
    msg.msg({content: avatarURL});
  }, {cooldown: 12, cooldownTry: 2, delete: true, type: "other"}, "–∞–≤–∞—Ç–∞—Ä"),

  counter: new Command(async (msg, interaction) => {
    msg.msg({content: "123"});
    if (CounterManager.data.filter(counter => counter.guildId === msg.guild.id).length >= 15){
      msg.msg({title: "–ú–∞–∫—Å–∏–º—É–º 15 —Å—á—ë—Ç—á–∏–∫–æ–≤", color: "#ff0000", delete: 7000});
    }

    const context = {
      interaction,
      questionMessage: null,
      typeBase: null,
      templateContent: null,
      counter: {}
    }
    const counterTypes = [
      {
        emoji: "üñäÔ∏è",
        label: "üñäÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ",
        description: "–ï–¥–∏–Ω–æ–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ, –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ, –∏–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
        id: "message",
        change: async (context) => {
          const counter = context.counter;
          counter.channelId = interaction.channel.id;
          counter.guildId   = interaction.guild.id;
          counter.authorId  = interaction.user.id;

          context.questionMessage = await msg.msg({title: "–í–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–µ–Ω —ç–º–±–µ–¥?", description: `–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —ç–º–±–µ–¥-–æ–±—ë—Ä—Ç–∫–∞: —Ü–≤–µ—Ç –∏ –∑–∞–≥–ª–∞–≤–∏–µ`});
          const react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
          context.questionMessage.delete();

          if (!react){
            return;
          }

          if (react === "685057435161198594"){

          }

          if (react === "763807890573885456"){

          }
        }
      },
      {
        emoji: "ü™ß",
        label: "ü™ß–ò–º—è –∫–∞–Ω–∞–ª–∞",
        description: "–ú–µ–Ω—è–µ—Ç –∏–º—è —É–∫–∞–∑–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
        id: "channel",
        change: async (context) => {
          const counter = context.counter;
          counter.channelId = interaction.channel.id;
          counter.guildId   = interaction.guild.id;
          counter.authorId  = interaction.user.id;
          
        }
      },
      {
        emoji: "üñåÔ∏è",
        label: "üñåÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
        description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω—ã–π –∫–∞–Ω–∞–ª",
        id: "poster",
        change: async (context) => {
          const counter = context.counter;
          counter.channelId = interaction.channel.id;
          counter.guildId   = interaction.guild.id;
          counter.authorId  = interaction.user.id;
          
        }
      }
    ];


    context.questionMessage = await msg.msg({title: "ü™Ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞", description: `–°—á—ë—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø ${ counterTypes.map(({label, description}) => `‚ùØ ${ label }\n> ${ description }\n> `).join("\n") }\n `});
    const takeCounterType = async (context) => {
      const reactions = counterTypes.map(({emoji}) => emoji);
      const reaction = await context.questionMessage.awaitReact({user: msg.author, type: "all"}, ...reactions);
      return counterTypes.find(({emoji}) => emoji === reaction);
    }
    context.typeBase = await takeCounterType(context);
    
    if (!context.type){
      context.questionMessage.delete();
      return;
    }
    context.questionMessage.msg({title: "ü™Ñ –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤", description: "–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç —Å—á—ë—Ç—á–∏–∫ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞", edit: true});
    context.templateContent = await msg.channel.awaitMessage(msg.author)?.content;

    context.questionMessage.delete();
    if (!context.templateContent){
      return;
    }

    if (!context.templateContent.match(/\{(?:.|\n)+?\}/)){
      msg.msg({title: "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã.", color: "#ff0000", delete: 5000});
      return;
    }

    const counter = await context.typeBase.change(context.context);
    if (!counter){
      return;
    }
    CounterManager.create(counter);
    msg.msg({title: "–£—Å–ø–µ—Ö", delete: 4_000});

    switch (type) {
      case "üñäÔ∏è":
        let embed = {embed: true};
        let textValue = template;
        let message = await msg.msg({title: "–í–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–µ–Ω —ç–º–±–µ–¥?", description: `–ü–æ–¥—Ä–∞–∑—É–º–∏–≤–∞–µ—Ç—Å—è —ç–º–±–µ–¥-–æ–±—ë—Ä—Ç–∫–∞, —Ü–≤–µ—Ç –∏ –∑–∞–≥–ª–∞–≤–∏–µ`});
        react = await message.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
        message.delete();
        if (react == 685057435161198594){
          embed = {description: template}
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞", embed: {description: `–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ ‚Äî –≥–æ–ª–æ–≤–∞ —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è...\n–û–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã`, time: 1_200_000}});
          if (!answer) return false;
          textValue = answer.content || "";

          answer = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ", embed: {description: `HEX ‚Äî #ff0000, –≥–¥–µ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ 16-–∑–Ω–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (0,1,2,...,e,f) ‚Äî –∫—Ä–∞—Å–Ω—ã–π, –∑–∞ –Ω–∏–º –∑–µ–ª–µ–Ω—ã–π –∏ —Å–∏–Ω–∏–π`, time: 1_200_000}});
          if (!answer) return false;
          embed.color = answer.content.replace("#", "");
        }

        msg.msg({title: "–ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ", description: "–≠—Ç–æ –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫", delete: 7000});
        await Util.sleep(1500);
        counter = await msg.msg({title: textValue, ...embed});
        
      break;
      case "ü™ß":
        let channel = await msg.channel.awaitMessage(msg.author, {title: "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ"});
        if (channel){
          channel = (channel.mentions.channels.first()) ? channel.mentions.channels.first() : msg.guild.channels.cache.get(channel.content);
          msg.msg({title: "–ì–æ—Ç–æ–≤–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ–º–∞—Ü–∏—é.", description: "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `!counters`", delete: 7000});
          CounterManager.create({channelId: channel.id, guildId: msg.guild.id, type: "channel", template});
        }
        else msg.channel.msg({title: "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", color: "#ff0000"});
      break;
      case "üñåÔ∏è":
        let interval = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è", description: "–ú–∏–Ω–∏–º—É–º 15–º"});
        interval = interval && +interval.content > 15 && +interval.content;
        if (!interval) return msg.msg({title: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", color: "#ff0000", delete: 4000});
        CounterManager.create({channelId: msg.channel.id, guildId: msg.guild.id, type: "poster", template, params: interval});
      break;
      default: return await Util.sleep(2000);

    }
  }, {delete: true, Permissions: 16, dm: true, type: "guild"}, "—Å—á—ë—Ç—á–∏–∫ —Å—á–µ—Ç—á–∏–∫ count"),

  counters: new Command(async (msg, interaction) => {
    const counterContent = (counter) => ({
      title: `üñäÔ∏è [–°–æ–æ–±—â–µ–Ω–∏–µ.](https://discord.com/channels/${ counter.guildId }/${ counter.channelId }/${ counter.messageId })`,
      channel: `ü™ß \`#${ msg.guild.channels.cache.get(counter.channel).name }\``,
      poster: `üñåÔ∏è <#${ counter.channel }>`
    })[counter.type];

    const counters = CounterManager.data
      .filter(counter => counter.guildId === msg.guild.id)
      .map((counter, i) => ({name: `**${i + 1}.**`, value: counterContent(counter), inline: true, counter: counter}));

    let message  = await msg.msg({title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", fields: counters[0] ? counters : {name: "–ù–æ —Ç—É—Ç ‚Äî –ø—É—Å—Ç–æ.", value: "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!counter`"}});

    const reactions = () => (counters[0] && !interaction.mentioner.wastedPermissions(16)[0]) ? ["‚úèÔ∏è", "üóëÔ∏è"] : ["‚ùå"];
    let react, question, answer, counter;
    while (true){
      react = await message.awaitReact({user: msg.author, type: "all"}, ...reactions());
      switch (react) {
        case "üóëÔ∏è":
          question = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞, –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"});
          answer = await Util.awaitReactOrMessage(question, msg.author, "‚ùå");
          question.delete();
          if (!answer || !answer.content || isNaN(answer.content) || answer.content > counters.length) break;
          counter = counters.splice(answer.content - 1, 1)[0];
          CounterManager.delete(counter._original);
          counters.forEach((e, i) => e.name = `**${i + 1}.**`);
          message.msg({title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", edit: true, fields: counters[0] ? counters : {name: "–¢—É—Ç –ø—É—Å—Ç–æ.", value: "–í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç—á–∏–∫"}, description: `–°—á—ë—Ç—á–∏–∫ #${answer.content} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`});
        break;
        case "‚úèÔ∏è":
          question = await msg.msg({title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞, –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"});
          answer = await Util.awaitReactOrMessage(question, msg.author, "‚ùå");

          if (!answer || !answer.content || isNaN(answer.content) || answer.content - 1 > counters.length){
            question.delete();
            msg.msg({title: "–≠–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", color: "#ff0000"});
            break;
          };

          counter = counters[answer.content - 1];
          question.msg({title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", edit: true, description: `**–°—Ç–∞—Ä–æ–µ:**\n\`\`\`${Discord.escapeCodeBlock( counter._original.template )}\`\`\``});
          answer = await msg.channel.awaitMessage(msg.author);
          question.delete();
          counter._original.template = answer.content;
          CounterManager.writeFile();
          CounterManager.up(counter._original);

          counter.value = counter.type == "channel" ? `ü™ß \`#${msg.guild.channels.cache.get(e.channel).name}\`` : counter.value ;
          message.msg({title: "–°—á—ë—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", edit: true, fields: counters, description: `–°–æ–æ–±—â–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ!`});
        break;
        default: return message.delete();
      }
    }
  }, {cooldown: 10, cooldownTry: 3, delete: true, dm: true, type: "guild"}, "—Å—á—ë—Ç—á–∏–∫–∏ —Å—á–µ—Ç—á–∏–∫–∏"),

  remind: new Command(async (msg, interaction) => {
    const parseParams = (params) => {
      params = params.split(" ");

      const stamps = [];
      while (params.at(0)?.match(/\d+(?:–¥|d|—á|h|–º|m|—Å|s)/)){
        stamps.push( ...params.splice(0, 1) );
      }
      const phrase = params.join();
      return [stamps, phrase];
    }
    const [stamps, phraseRaw] = parseParams(interaction.params);
  
    const phrase = (phraseRaw || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
      .replace(/[a-z–∞-—è—ä—ë—å]/i, (letter) => letter.toUpperCase());

    const userData = msg.author.data;
    if (stamps.length === 0){
      const filter = (event, remindTimestamp) => event.name === "remind" && JSON.parse(event.params).at(0) === msg.author.id && event.timestamp === remindTimestamp;

      const userRemindEvents = (userData.reminds ?? []).map(timestamp => {
        const day = TimeEventsManager.Util.timestampDay(timestamp);

        const event = TimeEventsManager.at(day)?.find(
          (event) => filter(event, timestamp)
        );

        if (!event){
          const index = userData.reminds.indexOf(timestamp);
          userData.reminds.splice(index, 1);
        }
        return event ?? null;
      })
      .filter(Boolean);

      const userRemindsContentRaw = userRemindEvents.map(({params, timestamp}) => {
        const [_authorId, _channelId, phrase] = JSON.parse(params);
        return `‚Ä¢ <t:${ Math.floor(timestamp / 1_000) }:R> ‚Äî ${ phrase }.`;
      })

    
      
      const remindsContent = userRemindEvents.length ? `\n\n–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${ userRemindsContentRaw.join("\n\n").slice(0, 100) }` : "";
      const description = `–ü—Ä–∏–º–µ—Ä:\n!–Ω–∞–ø–æ–º–Ω–∏ 1—á 7–º ${ phrase }${ remindsContent }`;
      const message = await msg.msg({title: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å..",  color: "#ff0000", delete: 50000, description });
      if (userRemindEvents.length){
        const createRemoveRemindInterface = async () => {
          const react = await message.awaitReact({user: msg.author, type: "one"}, "üóëÔ∏è");
          if (!react){
            return;
          }

          const answer = await message.channel.awaitMessage(msg.author, {title: `–ü–µ—Ä–µ–ª–∏—á–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ ${ userRemindEvents.length } —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å üóëÔ∏è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å`});
          if (!answer){
            return;
          }

          const numbers = [...new Set(answer.content.split(" ").filter(Boolean))];
          if (numbers.some(isNaN) || numbers.some(number => number <= 0 || number > userRemindEvents.length)){
            return msg.msg({title: "üóëÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ.", delete: 5000});
          }

          const willRemoved = numbers.map(index => userData.reminds[index - 1]);
          for (const timestamp of willRemoved){
            const event = userRemindEvents.find((event) => filter(event, timestamp));
            TimeEventsManager.remove(event);
            const index = userData.reminds.indexOf(timestamp);
            if (~index === 0){
              continue;
            }

            userData.reminds.splice(index, 1);
            if (userData.reminds.length === 0){
              delete userData.reminds;
            }
            message.delete();
          }
        }
        createRemoveRemindInterface();
      }
      return;
    }

    let timeTo = 0;
    stamps.forEach(stamp => {
      switch (stamp.slice(-1)) {
        case "d":
        case "–¥":
          timeTo += 86400000 * stamp.slice(0, -1);
          break;
        case "h":
        case "—á":
          timeTo += 3600000 * stamp.slice(0, -1);
          break;
        case "m":
        case "–º":
          timeTo += 60000 * stamp.slice(0, -1);
          break;
        case "s":
        case "—Å":
          timeTo += 1000 * stamp.slice(0, -1);
          break;
      }
    });
    
    const event = TimeEventsManager.create("remind", timeTo, [msg.author.id, msg.channel.id, phrase]);
    userData.reminds ||= [];
    userData.reminds.push(event.timestamp);
    msg.msg({title: "–ù–∞–ø–æ–º–Ω–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", description: `‚Äî ${ phrase }`, timestamp: event.timestamp, footer: {iconURL: msg.author.avatarURL(), text: msg.author.username}});
  }, {cooldown: 20, cooldownTry: 3, delete: true, type: "other"}, "–Ω–∞–ø–æ–º–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å"),

  giveaway: new Command(async (msg, interaction) => {
    let message = await msg.msg({title: "üå≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏", description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–¥–∞—á—É!\n‚óñü™ß  –¢–µ–∫—Å—Ç üö©\n‚óñ‚è∞  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üö©\n‚óñüéâ  –ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n‚óñüéÅ  –í—ã–¥–∞–≤–∞–µ–º—ã–µ —Ä–æ–ª–∏", color: "#4a7e31", footer: {text: "üö© –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º"}});
    let react, answer, timestamp, title, descr, winners = 1, role;
    do {
      react = await message.awaitReact({user: msg.author, type: "one"}, "ü™ß", "‚è∞", "üéâ", "üéÅ", (timestamp && descr) ? "640449832799961088" : null);
      switch (react) {
        case "ü™ß":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–ª–∞–≤–∏–µ`});
          if (!answer) return;
          title = answer.content;

          answer = await msg.channel.awaitMessage(msg.author, {title: `–£–∫–∞–∂–∏—Ç–µ ${descr ? "–Ω–æ–≤–æ–µ " : ""}–æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π —Ä–∞–∑–¥–∞—á–∏`, embed: {description: descr ? "–°—Ç–∞—Ä–æ–µ: " + descr : ""}, time: 1800000});
          if (!answer) return;
          descr = answer.content;
          break;
        case "‚è∞":
          let parse = new Date();
          answer = await msg.channel.awaitMessage(msg.author, {title: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∏–≤–µ–Ω—Ç–∞`, embed: {description: `–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ, —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –¥–∞—Ç–æ–π, –¥–≤–æ–µ—Ç–æ—á–∏–µ–º ‚Äî –≤—Ä–µ–º—è\n**–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:**\n22:00 ‚Äî —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è\n31.12 ‚Äî —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞\n11:11 01.01 ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ! –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (${new Intl.DateTimeFormat("ru-ru", {weekday: "short", hour: "2-digit", minute: "2-digit"}).format(parse)}) –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞—à–µ–≥–æ`}});
          if (!answer) {
            return;
          }

          let co = answer.content;
          let finded = [co.match(/(?<=\.)\d\d/), co.match(/\d\d(?=\.)/), co.match(/\d\d(?=:)/), co.match(/(?<=:)\d\d/)].map(e => e ? e[0] : undefined);
          if (!finded.some(e => e)) {
            msg.msg({title: "–ù–∞–º –Ω–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", color: "#ff0000", delete: 4000})
            break;
          }
          let [month = parse.getMonth() + 1, days = parse.getDate(), hours = parse.getHours(), minutes = 0] = finded;
          timestamp = new Date(parse.getFullYear(), month - 1, days, hours, minutes, 0);
          if (timestamp.getTime() - Date.now() < 0) {
            let messageSetYear = await msg.msg({title: "–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥?"});
            react = await messageSetYear.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763807890573885456");
            messageSetYear.delete();
            if (react == "685057435161198594") timestamp += 31536000000;
            else {
              msg.msg({title: "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", delete: 4000});
              break;
            }
          }
          timestamp = timestamp.getTime();
          const title = `–ì–æ—Ç–æ–≤–æ! –í—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è ~${Util.timestampToDate(timestamp - Date.now(), 3)}`;
          msg.msg({title, delete: 3000, timestamp});
          break;
        case "üéâ":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`});
          if (!answer) {
            return;
          }
          if (isNaN(answer.content)) {
            msg.msg({title: "–£–∫–∞–∑–∞–Ω–æ –Ω–µ —á–∏—Å–ª–æ", color: "#ff0000", delete: 3000});
            break;
          }
          winners = Number(answer.content);
          break;
        case "üéÅ":
          answer = await msg.channel.awaitMessage(msg.author, {title: `–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∞–π–¥–∏`});
          if (!answer) return;
          role = answer.content.match(/(?:<@&)?(\d+)>?/)[1];
          break;
        case "640449832799961088":
          let giveaway = await msg.msg({title, description: descr, timestamp, reactions: ["üå≤"], color: "#4a7e31", footer: {text: "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏: "}});
          TimeEventsManager.create("giveaway", timestamp - Date.now(), [msg.channel.id, giveaway.id, winners, role]);
        default:
          await Util.sleep(1000);
          message.delete();
          return;
      }
      let description = message.embeds[0].description.replace(react, "<a:yes:763371572073201714>");
      if (description != message.embeds[0].description) message.msg({title: "üå≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏", edit: true, color: "#4a7e31", description: description});
    } while(react);
  }, {delete: true, Permissions: 32, type: "guild"}, "—Ä–∞–∑–¥–∞—á–∞ —Ä–æ–∑—ã–≥—Ä—ã—à"),

  template: new Command(async (msg, interaction) => {

  }, {args: true, type: "dev"}, "—à–∞–±–ª–æ–Ω"),

  quests: new Command(async (msg, interaction) => {
    let memb = ((interaction.mention) ? interaction.mention : (interaction.params) ? client.users.cache.get(interaction.params) : msg.author);
    let user = memb.data;

    QuestManager.checkAvailable({user: msg.author});

    const userQuests = (user.questsGlobalCompleted ?? "").split(" ").filter(Boolean);
    const globalQuestsList = QuestManager.questsBase.filter(quest => quest.isGlobal);

    let globalQuestsContent = globalQuestsList
      .map(({id, title}) => userQuests.includes(id) ? `<a:yes:763371572073201714> **${ title }**` : `<a:Yno:763371626908876830> ${ title }`)
      .join("\n");

    const secretAchievements = ["voidIce", "crown"];

    const dailyQuest = {
      nextContent: `–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \`${ +((new Date().setHours(23, 59, 50) - Date.now()) / 3_600_000).toFixed(1) }—á\``,
      questBase: QuestManager.questsBase.get(user.quest.id),
      ...user.quest
    }

    const fields = [
      {
        name: "–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:",
        value: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: \`${ userQuests.length }/${ globalQuestsList.size }\`\n–°–µ–∫—Ä–µ—Ç–Ω—ã—Ö: \`${ secretAchievements.filter(keyword => keyword in user).length }/${ secretAchievements.length }\``
      },
      {
        name: "–î–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:",
        value: `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: \`${user.dayQuests || 0}\`\n–î–æ —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–∫–∏: \`${Math.ceil((user.dayQuests + 1) / 50) * 50 - user.dayQuests || 50}\``
      },
      {
        name: "–°–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–≤–µ—Å—Ç–∞:",
        value: `–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã: \`X${ dailyQuest.questBase.reward.toFixed(1) }\`\n–ü—Ä–æ–≥—Ä–µ—Å—Å: \`${ dailyQuest.isCompleted ? "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" : `${ dailyQuest.progress }/${ dailyQuest.goal }`}\`\n–ù–∞–∑–≤–∞–Ω–∏–µ: \`${dailyQuest.id }\`\n${ dailyQuest.nextContent }`
      }
    ]
    msg.msg({title: "–î–æ—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤", author: {name:  user.name, iconURL: memb.avatarURL()}, description: globalQuestsContent, fields, image: "https://media.discordapp.net/attachments/549096893653975049/830749264928964608/5.png?width=300&height=88", thumbnail: "https://cdn.discordapp.com/emojis/830740711493861416.png?v=1"})
  }, {delete: true, cooldown: 35, cooldownTry: 3, type: "user"}, "quest –∫–≤–µ—Å—Ç—ã"),

  witch: new Command(async (msg, interaction) => {
    // <a:void:768047066890895360> <a:placeForVoid:780051490357641226> <a:cotik:768047054772502538>

    if (interaction.mention){
      const data = interaction.mention.data;
      msg.msg({title: "<a:cotik:768047054772502538> –î—Ä—É–≥ —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç—è—â–µ–≥–æ—Å—è –∫–æ—Ç–∞ ‚Äî –º–æ–π –¥—Ä—É–≥", description: `–°–µ–≥–æ–¥–Ω—è –í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ó–∞–∫–æ–Ω–Ω–æ –ª–∏ —ç—Ç–æ? –ö–æ–Ω–µ—á–Ω–æ –∑–∞–∫–æ–Ω–Ω–æ, –æ–Ω –Ω–µ –ø—Ä–æ—Ç–∏–≤.\n${ interaction.mention.username }, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ—Ç—ë–ª ${ data.voidRituals } —Ä–∞–∑.\n–ï–≥–æ –±–æ–Ω—É—Å –∫ –æ–ø—ã—Ç—É: ${ (100 * (1.02 ** data.voidRituals)).toFixed(2) }% –æ—Ç –∫–æ—Ç–ª–∞.\n<a:placeForVoid:780051490357641226>\n\n–°—ä–µ—à—å –µ—â—ë —ç—Ç–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑–∫–∏—Ö –±—É–ª–æ–∫, –¥–∞ –≤—ã–ø–µ–π —á–∞—é`, color: "#3d17a0"});
      return;
    }

    let user = interaction.userData;
    let minusVoids = Math.floor(Math.min(2 + user.voidRituals, 20) * (1 - 0.10 * (user.voidPrise ?? 0)));

    const sendVoidOut = () => {
      const description = `–î–æ–±—É–¥—å—Ç–µ –µ—â—ë ${ Util.ending(minusVoids - user.void, "—É—Ä–æ–≤", "–Ω–µ–π", "–µ–Ω—å", "–Ω—è")} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:placeForVoid:780051490357641226>\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∏—Ç—É–∞–ª –Ω—É–∂–Ω–æ ${  Util.ending(minusVoids, "–∫–∞–º–Ω", "–µ–π", "—å", "—è") }, –∞ —É –≤–∞—Å –ª–∏—à—å ${ user.void };\n–ò—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, —Å –Ω–∏–∑–∫–∏–º —à–∞–Ω—Å–æ–º, –æ—Ç–∫—Ä—ã–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—É–Ω–¥—É–∫.\n–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: ${user.voidRituals}\n–ö–æ—Ç—ë–ª –¥–∞—ë—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –±–æ–Ω—É—Å—ã, –∞ —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.`;
      const footer = {text: ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—É–¥–∞ –¥–µ–ª–∏—Å—å –≤—Å–µ –≤–µ–¥—å–º—ã?", "–ü—Ä–∞–≤–∏–ª–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä 5:\n–ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ.*", "–ù–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ ‚Äî –ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–≤–µ—Ç—è—â–∏—Ö—Å—è –∫–æ—Ç–æ–≤.", "–ë–µ—Ä–µ–≥–∏—Ç–µ—Å—å –º—è—É–∫–∞—é—â–∏—Ö —Å–æ–∑–¥–∞–Ω–∏–π."].random()};
      msg.msg({title: "<a:void:768047066890895360> –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞", description, color: "#3d17a0", footer});
    }

    if (user.void < minusVoids) {
      sendVoidOut();
      return;
    }

    let boiler = await msg.msg({title: "<a:placeForVoid:780051490357641226> –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –æ—Ç–¥–∞—Ç—å —Å–≤–æ–∏ —É—Ä–æ–≤–Ω–∏ –∑–∞ –≤–µ—á–Ω—ã–µ —É—Å–∏–ª–µ–Ω–∏—è..?", description: `–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ ${ minusVoids } —É—Ä. –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ, —Å–∏–ª—å–Ω–µ–µ –∏ —Ö–∏—Ç—Ä–µ–µ.\n~ –ü–æ–≤—ã—à–∞–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ–ø—ã—Ç–∞ –Ω–∞ 2%\n–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: ${ user.voidRituals }\n–ë–æ–Ω—É—Å –∫ –æ–ø—ã—Ç—É: ${ (100 * (1.02 ** user.voidRituals)).toFixed(2) }%\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —Ç—Ä—ë—Ö —Å–æ–∫—Ä–æ–≤–∏—â, –¥–∞—Ä—É—é—â–∏—Ö –≤–∞–º –Ω–µ–π–º–æ–≤–µ—Ä–Ω—É—é –º–æ—â—å!\n<a:cotik:768047054772502538>`, color: "#3d17a0"});
    let isHePay = await boiler.awaitReact({user: msg.author, type: "all"}, "768047066890895360");

    if (!isHePay) {
      boiler.msg({title: "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.", description: "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ", edit: true, color: "#3d17a0"});
      return;
    }

    if (user.void < minusVoids) {
      sendVoidOut();
      boiler.delete();
      return;
    }

    // user.CD_48 = Date.now() + 259200000;
    await Util.sleep(1000);

    // –í—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    if (  user.voidDouble && Util.random(11) === 1 ){
      minusVoids = 0;
    }

    user.void -= minusVoids;
    user.voidRituals++;

    let double_effects = [
      {
        emoji: "üåÄ",
        description: "–£–º–µ–Ω—å—à–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 0.2—Å",
        _weight: 100 - (user.voidCooldown * 5 ?? 0),
        filter_func: () => !(user.voidCooldown >= 20),
        action: () => user.voidCooldown = ++user.voidCooldown || 1
      },
      {
        emoji: "üîÖ",
        description: `–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å —Å—É–Ω–¥—É–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ \`${ Math.min(user.voidRituals * 18 + (user.chestBonus * 2 ?? 0) + 38, 9000) }\``,
        _weight: 50,
        action: () => user.chestBonus = (user.chestBonus ?? 0) + Math.min((user.chestBonus * 2 ?? 0) + user.voidRituals * 18 + 38, 9000)
      },
      {
        emoji: "‚öúÔ∏è",
        description: "–£–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ–∑–∂—ã–≥–∞ –∫–æ—Ç–ª–∞. (–ú–∞–∫—Å. –Ω–∞ 50%)",
        _weight: 5,
        filter_func: () => !(user.voidPrise >= 5),
        action: () => user.voidPrise = ++user.voidPrise || 1
      },
      {
        emoji: "üÉè",
        description: "–î–∞—ë—Ç 9%-–Ω—ã–π —à–∞–Ω—Å –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —É—Ä–æ–≤–Ω–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∏—Ç—É–∞–ª–∞.",
        _weight: 3,
        filter_func: () => !user.voidDouble,
        action: () => user.voidDouble = 1
      },
      {
        emoji: "üî±",
        description: "–î–µ–ª–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –Ω–∞ 15% —Å–ª–æ–∂–Ω–µ–µ, –æ–¥–Ω–∞–∫–æ —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ö –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 30%",
        _weight: 10,
        filter_func: () => !(user.voidQuests >= 5),
        action: () => user.voidQuests = ++user.voidQuests || 1
      },
      {
        emoji: "‚ú®",
        description: `–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ ${7 + user.voidRituals} –µ–¥.`,
        _weight: 35,
        action: () => user.coinsPerMessage = (user.coinsPerMessage ?? 0) + 7 + user.voidRituals
      },
      {
        emoji: "üí†",
        description: "–î–∞—ë—Ç \\*–±–æ–Ω—É—ã —Å—É–Ω–¥—É–∫–∞* –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä—á–∞—Ç–æ–∫ –≤–∞–º —É–¥–∞–µ—Ç—Å—è –∫–æ–≥–æ-—Ç–æ –æ–≥—Ä–∞–±–∏—Ç—å.",
        _weight: 20,
        action: () => user.voidThief = ++user.voidThief || 1
      },
      {
        emoji: "üòà",
        description: `–°–æ–∑–¥–∞–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ö–∞–æ—Å, –∏–∑–º–µ–Ω–∏–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª—É–±–Ω–∏–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ! ${ 7 + Math.floor(5 * Math.sqrt(user.voidRituals)) } –∫–æ–∏–Ω–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.`,
        _weight: 10,
        action: () => DataManager.data.bot.berrysPrise += 7 + Math.floor(5 * Math.sqrt(user.voidRituals)) * (-1) ** Util.random(1)
      },
      {
        emoji: "üçµ",
        description: `–£–¥–≤–∞–∏–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å –≤—Å—è–∫–∏–π –±–æ–Ω—É—Å –∫–ª–µ–≤–µ—Ä–∞\n–ù–µ—Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è`,
        _weight: 5,
        action: () => user.voidMysticClover = ++user.voidMysticClover || 1
      },
      {
        emoji: "üìø",
        description: `–ü–æ–ª—É—á–∏—Ç–µ ${ Math.floor(user.keys / 100) } —É—Ä. –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∑–∞–º–µ–Ω ${user.keys - (user.keys % 100)} –∫–ª—é—á–µ–π.`,
        _weight: 30,
        filter_func: () => user.keys >= 100 && user.chestLevel,
        action: () => {
          user.void += Math.floor(user.keys / 100);
          user.keys = user.keys % 100;
        }
      },
      {
        emoji: "‚ô¶Ô∏è",
        description: `–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ 10%!`,
        _weight: 15,
        filter_func: () => !(user.voidCoins >= 7),
        action: () => user.voidCoins = ~~user.voidCoins + 1
      },
      {
        emoji: "üèµÔ∏è",
        description: `–£–ª—É—á—à–∞–µ—Ç —Å—É–Ω–¥—É–∫ –¥–æ ${user.chestLevel + 2} —É—Ä–æ–≤–Ω—è. –¢—Ä–µ–±—É–µ—Ç ${user.chestLevel ? 500 : 150} –∫–ª—é—á–µ–π.`,
        _weight: Infinity,
        filter_func: () => user.chestLevel != 2 && user.keys >= (user.chestLevel ? 500 : 150),
        action: () => user.keys -= user.chestLevel++ ? 500 : 150
      },
      {
        emoji: "üíñ",
        description: `–í–∞—à–∏ –º–æ–Ω—Å—Ç—Ä—ã –±—É–¥—É—Ç –∑–∞—â–∏—â–∞—Ç—å –≤–∞—Å –æ—Ç –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π –í–æ—Ä–æ–≤`,
        _weight: 3,
        filter_func: () => user.monster && !user.voidMonster,
        action: () => user.voidMonster = 1
      },
      {
        emoji: "üìï",
        description: `–í—ã –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –∫–ª—É–±–Ω–∏–∫—É –±–æ–ª—å—à–µ —Å –¥–µ—Ä–µ–≤–∞. –¢–∞–∫–∂–µ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–≤—ã—à–∞–µ—Ç –µ—ë —Ü–µ–Ω—É –Ω–∞ —Ä—ã–Ω–∫–µ`,
        _weight: 20,
        filter_func: () => "seed" in user,
        action: () => user.voidTreeFarm = ~~user.voidTreeFarm + 1
      },
      {
        emoji: "ü•Ç",
        description: "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫ –∏–∑ –õ–∞–≤–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–∞–∑–∏–Ω–æ",
        _weight: 3,
        filter_func: () => !user.voidCasino,
        action: () => user.voidCasino = 1
      },
      {
        emoji: "üßµ",
        description: `–ü–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: 1‚Äì${ minusVoids * 2 }; –°–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ç–ª–∞ –Ω–∞ 2.\n–ï—Å–ª–∏ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∞—Ç–µ–Ω —á–µ—Ç—ã—Ä–µ–º, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.`,
        _weight: 2,
        filter_func: () => user.voidRituals > 4,
        action: () => {
          const voids = Util.random(1, minusVoids * 2) + !(user.level % 4);
          user.void += voids;
          user.voidRituals -= 3;
        }
      },
      {
        emoji: "ü™∏",
        description: `–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–µ—Ç—å –±–æ–ª–µ–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è`,
        _weight: Infinity,
        filter_func: () => !(user.cursesEnded % 10) && !user.voidFreedomCurse,
        action: () => user.voidFreedomCurse = 1
      },
      {
      emoji: "‚ùÑÔ∏è",
        // –•–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ
        description: `–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ 50% –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥—Ä–∞–±–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–æ–≤ –¥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –≤–∞—Å –Ω–µ –ø–æ—Ö–≤–∞–ª—è—Ç, –ù–û –≤–∞—Å –±–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ—Ö–≤–∞–ª–∏—Ç—å.`,
        _weight: 1,
        filter_func: () => !user.voidIce && !user.praiseMe || !user.praiseMe.length,
        action: () => {
          user.voidIce = true;
          msg.author.msg({title: "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤", description: `–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ: \"–ü—Ä–æ–º–µ–Ω—è–π—Ç–µ –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –Ω–∞ –∫—É—á–∫—É –º–æ–Ω–µ—Ç –∏ –º–µ—Ç–æ–¥ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\"\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—Ä–æ—Å—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –≤—Å–µ-—Ç–∞–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç.\n–≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ 0.000% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`});
        }
      }
    ].filter(e => !e.filter_func || e.filter_func());

    let bonuses = [...new Array(3)].map(() => double_effects.random({pop: true, weights: true}));
    await boiler.msg({title: "<a:placeForVoid:780051490357641226> –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å", description: `–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ–≥–æ –æ–¥–Ω–æ —Å–æ–∫—Ä–æ–≤–∏—â–µ, —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–¥—É–º–∞–π—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ-—Ç–æ –≤–∑—è—Ç—å.\n${bonuses.map(e => e.emoji + " " + e.description).join("\n\n")}`, edit: true, color: "#3d17a0"});

    let react = await boiler.awaitReact({user: msg.author, type: "all"}, ...bonuses.map(e => e.emoji));
    if (!react) react = bonuses.random().emoji;

    bonuses.find(e => e.emoji == react).action();

    boiler.msg({title: "–†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω..." , description: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${react}\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –±–æ–ª–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n${bonuses.map(e => e.emoji + " " + e.description).join("\n\n")}`, color: "#3d17a0", edit: true});
    await Util.sleep(3000);
    let answer = "";
    const add = (content) => answer = `${content}\n${answer}`;
    switch (user.voidRituals) {
      case 23:
        add("–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –¥–∞–ª—å—à–µ. . .");
      break;
      case 22:
        add("...");
      break;
      case 19:
        msg.author.action(Actions.globalQuest, {name: "completeTheGame"});
        add("–ù–æ –¥–æ–ª–∂–µ–Ω –ª–∏ —è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è? –í—Å–µ–ª–µ–Ω–Ω—ã—Ö, –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –±–µ—Å—á–∏—Å–ª–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å... –ü–æ–≥–ª–æ—â–∞—è —Å–∞–º–æ–≥–æ —Å–µ–±—è —Å–Ω–æ–≤–∞, –∏ —Å–Ω–æ–≤–∞, –º–Ω–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞—Å—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ê —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π —è —Å–æ–∑–¥–∞–º –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∏—Ä..!")
        add("‚Äî –ü–æ–ª—É—á–∞–µ—Ç—Å—è —è —É–±–∏–ª –∏—Ö, —É–Ω–∏—á—Ç–æ–∂–∏–ª —Ü–µ–ª—ã–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ, –º–∏—Ä—ã.. –ö–∞–∂–¥—ã–π —Ä–∞–∑ —è –ø–æ–ø–∞–¥–∞—è –≤ –Ω–æ–≤—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é, –∑–∞–º–µ–Ω—è–ª —Å–æ–±–æ—é —Å–µ–±—è, —É–Ω–∏—á—Ç–æ–∂–∞—è –º–∏–Ω—É–≤—à–∏–π –º–∏—Ä. –ù–µ—É–∂–µ–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ–ª—å–∑—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å.. –ù–µ—É–∂–µ–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—Ü?");
      case 18:
      case 17:
        add("");
        add("‚Äî –° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º —è –æ—â—É—â–∞—é –±–æ–ª—å—à—É—é —Å–∏–ª—É, –Ω–∞—á–∏–Ω–∞—é –∑–∞–¥—É–º—ã–≤–∞—Ç—å—Å—è –æ –≤–µ—â–∞—Ö, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω—å—à–µ –∏ —Å–ª—ã—à–∞—Ç—å –Ω–µ —Å–º–µ–ª. –ú–µ–Ω—è –ø–æ—Å–µ—â–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏, –Ω–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞.");
      case 16:
        add("");
        add("‚Äî –ü—Ä–æ—à–ª–æ –Ω–µ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞, —è –≤—Å—ë —Ç–∞–∫ –∂–µ –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –∑–Ω–∞–∫–æ–º—ã–µ —Å—Ç–∞–ª–∏ —Å—á–∏—Ç–∞—Ç—å –º–µ–Ω—è —Å—É–º–∞c—à–µ–¥—à–∏–º. –°—Ç—Ä–∞–Ω–Ω–æ, —á—Ç–æ –Ω–∏–∫—Ç–æ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª –Ω–∏–∫–∞–∫–∏—Ö –≤—Å–ø—ã—à–µ–∫ –≤ –Ω–µ–±–µ, –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç—å? –ù–∏–∫–∞–∫.");
      case 15:
        add("");
        add("–ú–æ–∂–µ—Ç —è —Å–æ—à—ë–ª —Å —É–º–∞, –∏–ª–∏ —è —É–º–µ—Ä, –∞ —Ç–æ —á—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é —ç—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏ –º–æ–µ–π —Å–∞–º–æ—Å—Ç–∏, –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è –≤–Ω–æ–≤—å –∏ –≤–Ω–æ–≤—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —á—É–≤—Å—Ç–≤—É—é?.. –Ø –Ω–µ –∑–Ω–∞—é");
        add("–ù–µ—Ç, —ç—Ç–æ –Ω–µ –º–æ–≥ –±—ã—Ç—å —Å–æ–Ω! –°–Ω–æ–≤–∞ –≤—Å–ø–æ–º–∏–Ω–∞—è –∫–∞–∂–¥—ã–π –æ–≥–æ–Ω—ë–∫, –∫–∞–∂–¥—É—é \"—Ç—Ä–µ—â–∏–Ω—É\", —Ä–æ–∂–¥–∞—é—â—É—é—Å—è –≤ –Ω–µ–±–µ, –∏ –≤—Å—ë —Ç–æ, —Å—Ç—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ —Ç–æ–≥–¥–∞ –±—ã–ª–æ...");
      case 14:
      case 13:
      case 12:
      case 11:
      case 10:
        add("–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–º –≤–µ—Å—å –¥–µ–Ω—å –Ω–µ –ø–æ–∫–∏–¥–∞–ª–∏ –≤–∞—Å, —á—É–≤—Å—Ç–≤–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–ª–æ –¥—É–º–∞—Ç—å –æ –¥—Ä—É–≥–æ–º.. –ú—ã—Å–ª—è–º–∏ –≤—ã —Å–Ω–æ–≤–∞, –∏ —Å–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å —Ç—É–¥–∞, –≥–¥–µ –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å.");
      case 9:
      case 8:
      case 7:
      case 6:
      case 5:
        add("–î–∞–∂–µ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—á–µ—Ä–∞ –≤–µ—Å—å –¥–µ–Ω—å –≤—ã –±—ã–ª–∏ –≤ —Å–≤–æ–µ–π –∫—Ä–æ–≤–∞—Ç–∏ –∏ –∏–≥—Ä–∞–ª–∏ –≤ –≤–∏–¥–µ–æ-–∏–≥—Ä—ã. –ö–∞–∫ –∏ –≤–∞—à –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–≥–¥–∞ –≤—ã–Ω–æ—Å–∏–ª –≤–∞—Å –≤ —Ç–∞–Ω—á–∏–∫–∞—Ö, —Å–∫–∞–∂–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ –∏ –ø—ë—Å.");
      case 4:
        add("–ù–µ—Ç, —ç—Ç–æ –Ω–µ –º–æ–≥ –±—ã—Ç—å —Å–æ–Ω, –≤—Å–ø–æ–º–∏–Ω–∞—è –∫–∞–∂–¥—ã–π –ª–µ—Ç–∞—é—â–∏–π –≤ —á–µ—Ä–Ω–æ–º –Ω–µ–±–µ –æ–≥–æ–Ω—ë–∫, –¥—É–º–∞–µ—Ç–µ –≤—ã. –ù–æ —Ñ–∞–∫—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ..");
      case 3:
      case 2:
        add("");
        add("–í—Å—ë –±—ã–ª–æ —Ç–∞–∫–æ–µ —è—Ä–∫–æ–µ –∏ –∫—Ä–∞—Å–æ—á–Ω–æ–µ..");
      case 1:
        add("–í–ø–µ—Ä–µ–¥–∏ —Å—Ç–æ—è–ª–∞ –Ω–µ–æ–±—ä—è—Å–Ω–∏–º–æ-–Ω–µ–æ–±—ä—è—Å–Ω–∏–º–∞—è –¥–≤–µ—Ä—å, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–∏–¥–Ω–µ–ª–∞—Å—å –≤–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞. –í–æ–π–¥—è, –≤—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–π –∫—Ä–æ–≤–∞—Ç–∏, –≤–æ–∫—Ä—É–≥ –≤—Å—ë –∫–∞–∫ —Ä–∞–Ω—å—à–µ. –û—â—É—â–∞–µ—Ç–µ —Å–µ–±—è, –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ, –Ω–æ —Å –ø–æ–º—É—Ç–Ω—ë–Ω–Ω—ã–º —Ä–∞–∑—É–º–æ–º.");
        add("\*–Ø—Ä–∫–∞—è –≤—Å–ø—ã—à–∫–∞ –∫–æ—Ç–ª–∞ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∞ –≤ —ç—Ç–æ–º –º–∏—Ä–µ, –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–∑—Ä—É—à–∞—Ç—å—Å—è.\*");
        break;
      default:
        add("...");

    }
    const title = `–î–µ–Ω—å ${Math.round(user.voidRituals ** 2.093 / 1.3)}.`;
    msg.msg({title, description: answer, image: user.voidRituals === 19 ? "https://media.discordapp.net/attachments/629546680840093696/843562906053640202/2.jpg?width=1214&height=683" : "https://media.discordapp.net/attachments/629546680840093696/836122708185317406/mid_250722_922018.jpg", footer: {iconURL: msg.author.avatarURL(), text: msg.author.username}, color: "#000001"});


  }, {delete: true, type: "user"}, "boiler –∫–æ—Ç—ë–ª –∫–æ—Ç–µ–ª –≤–µ–¥—å–º–∞"),

  charity: new Command(async (msg, interaction) => {
    let heAccpet = await Util.awaitUserAccept({name: "charity", message: {title: "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –∫–æ–∏–Ω—ã!", description: "–í–∞—à–∏ –±–æ–≥–∞—Ç—Å–≤–∞ –±—É–¥—É—Ç —Ä–∞–∑–¥–∞–Ω—ã –ª—é–¥—è–º —Å —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."}, channel: msg.channel, userData: interaction.userData});
    if (!heAccpet) return;

    let cash = interaction.params.match(/\d+|\+/);

    if (!cash) {
      msg.msg({title: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–∞—Ç—å", delete: 5000, color: "#ff0000"});
      msg.react("‚ùå");
      return;
    }
    cash = cash[0];
    interaction.params = interaction.params.replace(cash, "").trim();

    if (cash === "+"){
      cash = interaction.userData.coins;
    }

    cash = Number( cash );

    if (cash < 200) {
      msg.msg({title: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 200 –∫–æ–∏–Ω–æ–≤", delete: 5000, color: "#ff0000"});
      msg.react("‚ùå");
      return;
    }

    if (cash > interaction.userData.coins) {
      msg.msg({title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤", delete: 5000, color: "#ff0000"});
      msg.react("‚ùå");
      return;
    }

    let countUsers = interaction.params.match(/\d+/);
    let needCash;
    if (countUsers){
      countUsers = countUsers[0];
      needCash = 200 + Math.max(countUsers - 20, 0) * 250 * 2 ** Math.floor(countUsers / 10);
      interaction.params = interaction.params.replace(countUsers, "").trim();
    }

    if (cash < needCash){
      msg.msg({title: "–ú–∞–ª–æ –∫–æ–∏–Ω–æ–≤", description: `–î–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (${ Util.ending(countUsers, "—á–µ–ª–æ–≤–µ–∫", "", "", "–∞")}) —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º ${needCash} –∫–æ–∏–Ω–æ–≤!`, delete: 8000, color: "#ff0000"});
      msg.react("‚ùå");
      return;
    }

    let note = interaction.params;

    let
     count   = countUsers || Util.random(11, 22),
     members = [...msg.guild.members.cache.filter( e => !e.user.bot && e.user.id != msg.author.id ).random( count ).filter( e => e )];
     sum     = Math.floor(cash / members.length);

    members.forEach(e => e.user.data.coins += sum);
    interaction.userData.coins -= cash;
    msg.guild.data.coins = (msg.guild.data.coins ?? 0) + cash - sum * members.length;

    let embed = {
      title: "–í—ã —Å–æ—Ç–≤–æ—Ä–∏–ª–∏ –ê–∫—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      description: `–í–∞—à–∏ <:coin:637533074879414272> ${ Util.ending(cash, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É ${members.length} —Å–ª—É—á–∞–π–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞, —ç—Ç–∏ –ª—é–¥–∏ –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã:\n${   members.map((e, i) => `${  i % 3 ? "<:crys3:763767653571231804>" : "<:crys:637290406958202880>"  } ${Discord.escapeMarkdown(e.toString())} ‚Äî ${[{_weight: 2, x: "–°–ø–∞—Å–∏–±–æ!"}, {_weight: 2, x: "–ë–ª–∞–≥–æ–¥–∞—Ä—é!"}, {_weight: 2, x: "–í—ã —Å–∞–º—ã–µ –ª—É—á—à–∏–µ!"}, {_weight: 15, x: "üíö"}, {_weight: 15, x: "üíñ"}, {_weight: 1, x: "ü¶ù"}].random({weights: true}).x}`).join("\n")   }`,
      author: {
        iconURL: msg.author.avatarURL(),
        name: msg.author.username
      },

      footer: note ? {
        iconURL: msg.author.avatarURL(),
        text: `–ü–æ—Å–ª–∞–Ω–∏–µ: ${note}`
      } :
      {
        iconURL: client.user.avatarURL(),
        text: "–°–ø–∞—Å–∏–±–æ!"
      },

      image: "https://media.discordapp.net/attachments/629546680840093696/812635351801004052/penguinwalk.gif"
    }

    let message = await msg.msg(embed);
    msg.react("üíö");
  }, {cooldown: 70, cooldownTry: 2, args: true, type: "other"}, "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),

  bank: new Command(async (msg, interaction) => {
    let user = interaction.userData, action, coins, cause;
    let server = msg.guild.data;
    const isAdmin = !interaction.mentioner.wastedPermissions(32)[0];


    const cash = async (coins, isPut, cause) => {
      let heAccpet;

      if (coins === "+"){
        coins = isPut ? interaction.userData.coins : server.coins;
      }
      coins = Math.max(Math.floor(coins), 0);

      if (isNaN(coins)) {
        return msg.msg({title: "–£–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞", color: "#ff0000", delete: 5000});
      }

      if (coins === 0) {
        return msg.msg({title: "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å 0 –∫–æ–∏–Ω–æ–≤", color: "#ff0000", delete: 5000});
      }

      if (isPut){
        heAccpet = await Util.awaitUserAccept({name: "bank_put", message: {title: "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", description: "<a:message:794632668137652225> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–µ–Ω–Ω—ã–µ –≤ –æ–±—â—É—é –∫–∞–∑–Ω—É –∫–æ–∏–Ω—ã –±–æ–ª–µ–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–Ω–∞–ª–µ–∂–∞—Ç—å –≤–∞–º, –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"}, channel: msg.channel, userData: interaction.userData});
        if (!heAccpet) return;

        if (interaction.userData.coins < coins){
          msg.msg({title: "–û–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–∫–∏..", description: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤", color: "#ff0000", delete: 7000});
          return;
        }

        interaction.userData.coins -= coins;
        server.coins += coins;
        msg.guild.logSend({title: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:", description: `${interaction.mentioner.displayName} –æ—Ç–Ω—ë—Å –≤ –∫–∞–∑–Ω—É ${Util.ending(coins, "–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤")}`, footer: {iconURL: msg.author.avatarURL(), text: msg.author.tag}});
        msg.react("üëå");
        msg.msg({title: `–í—ã —É—Å–ø–µ—à–Ω–æ –≤–ª–æ–∂–∏–ª–∏ **${ Util.ending(coins, "–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤")}** –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞`, delete: 5000});
        return;
      }

      if (!isPut){
        heAccpet = await Util.awaitUserAccept({name: "bank", message: {title: "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å!", description: "<a:message:794632668137652225> –ù–µ –≤–∞–∂–Ω–æ –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç –∫–æ–∏–Ω—ã, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –æ–Ω–∏ –ø—Ä–µ–¥–Ω–∞–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n–†–∞—Å–ø–æ—Ä—è–∂–∞–π—Ç–µ—Å—å –∏–º–∏ —Å –ø–æ–ª—å–∑–æ–π, —É–º–æ–º."}, channel: msg.channel, userData: interaction.userData});
        if (!heAccpet) return;
        let problems = [];

        if (!isAdmin)
          problems.push("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∑–Ω—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º\"");
        if (server.coins < coins)
          problems.push(`–ü–æ—Ö–æ–∂–µ, —Ç—É—Ç –ø—É—Å—Ç–æ. –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏—à—å ${ Util.ending(server.coins, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")}.`);
        if (!cause)
          problems.push(`–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ${ Util.ending(coins, "–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤")}.`);
        if (!cause || !cause.match(/.{2,}\s+?.{2,}/i))
          problems.push(`–ü—Ä–∏—á–∏–Ω–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞.`);

        if (problems[0]){
          msg.msg({title: "–û–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–∫–∏..", description: problems.join("\n"), color: "#ff0000", delete: 7000});
          return;
        }

        interaction.userData.coins += coins;
        server.coins -= coins;
        msg.guild.logSend({title: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:", description: `${interaction.mentioner.displayName} –æ–±–Ω–∞–ª–∏—á–∏–ª –∫–∞–∑–Ω—É –Ω–∞ —Å—É–º–º—É **${ Util.ending(coins, "–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤")}**\n–ü—Ä–∏—á–∏–Ω–∞: ${cause}`, footer: {iconURL: msg.author.avatarURL(), text: msg.author.tag}});
        msg.react("üëå");
        const title = `–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ **${ Util.ending(coins, "–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤")}** –∏–∑ –∫–∞–∑–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞\n–ü–æ –ø—Ä–∏—á–∏–Ω–µ: ${cause}`;
        msg.msg({title, delete: 5000});
        return;
      }
    }


    if (interaction.params){
      action = interaction.params.split(" ")[0];
      coins  = interaction.params.split(" ")[1];
      cause  = interaction.params.split(" ").slice(2).join(" ");

      if (action == "–ø–æ–ª–æ–∂–∏—Ç—å" || action == "put"){
        await cash(coins, true, cause);
        return;
      }

      if (action == "–≤–∑—è—Ç—å"    || action == "take"){
        await cash(coins, false, cause);
        return;
      }
    }





    let embed = {title: "–ö–∞–∑–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞", description: `–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ **${ Math.letters(server.coins) }** <:coin:637533074879414272>\n\n<a:message:794632668137652225> ‚†ø –ó–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã\n<:meow:637290387655884800> ‚†ø –ü–æ–ª–æ–∂–∏—Ç—å\n<:merunna:755844134677512273> ${[..."‚†Ø‚†∑‚†ü‚†ª"].random()} –í–∑—è—Ç—å`, author: {name: msg.guild.name, iconURL: msg.guild.iconURL()}, image: "https://media.discordapp.net/attachments/629546680840093696/830774000597991434/96-967226_tree-forest-green-vector-map-of-the-trees.png"};
    let coinInfo = server.coins;
    let react, answer;
    let reactions = ["637290387655884800", isAdmin ? "755844134677512273" : null, "794632668137652225"];
    let message = await msg.msg(embed);
    embed.edit = true;

    while (true) {
      message = await message.msg(embed);
      react = await message.awaitReact({user: msg.author, type: "all"}, ...reactions);
      switch (react) {
        case "637290387655884800":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –∫–∞–∑–Ω—É"});
          if (!answer){
            break;
          }

          await cash(answer.content, true, cause);
          embed.description = `–í –∫–∞–∑–Ω—É –≤–Ω–µ—Å–ª–∏ –∫–æ–∏–Ω—ã`;
          break;
        case "755844134677512273":
          answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤. –ê —Ç–∞–∫–∂–µ –ø—Ä–∏—á–∏–Ω—É –∏—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–π –∫–∞–∑–Ω—ã."});
          if (!answer){
            break;
          }

          let coins;

          cause = answer.content.replace(/\d+/, e => {
            coins = e;
            return "";
          }).trim();

          await cash(coins, false, cause);
          embed.description = `–ò–∑ –∫–∞–∑–Ω—ã –∏–∑–≤–ª–µ–∫–ª–∏ –∫–æ–∏–Ω—ã`;
          break;
        case "794632668137652225":
          let professions = msg.guild.data.professions || (msg.guild.data.professions = {});
          let workers = new Set();
          let costs = 0;

          let workersList = "<a:message:794632668137652225> –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ, —Ç–∞–∫–∂–µ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞";
          if (Object.keys(professions).length){
            Object.keys(professions).forEach(([id]) => msg.guild.roles.cache.get(id) ? true : delete professions[id]);

            msg.guild.members.cache.each(memb => {
              Object.entries(professions).forEach(([id, cost]) => memb.roles.cache.has(id) ? workers.add(memb) && (costs += +cost) : false);
            });
            workersList = Object.entries(professions).map(([id, cost]) => {
              let allCost = [...workers].filter(memb => memb.roles.cache.has(id)).length;
              return `${msg.guild.roles.cache.get(id)}\n${cost} <:coin:637533074879414272> –≤ –¥–µ–Ω—å (${ Util.ending(allCost, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª", "–µ–π", "—å", "—è")})`;
            });
            workersList = workersList.filter(e => e).join("\n");


          }
          let professionManager = await msg.msg({
            title: "- –†–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞",
            description: `**–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ${Object.keys(professions).length}/20**\n${workersList}\n\n\`\`\`–î–æ—Ö–æ–¥—ã: ${msg.guild.memberCount * 2}\n–†–∞—Å—Ö–æ–¥—ã: ${costs}\n${ Util.ending(workers.size, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª", "–µ–π", "—å", "—è")} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É\`\`\``,
            footer: {text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ."}
          })
          while (true){
            react = await professionManager.awaitReact({user: msg.author, type: "all"}, isAdmin ? "‚úÖ" : null, isAdmin ? "‚ùé" : null, "‚ùå");
            embed.description = `<a:message:794632668137652225> –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`;
            if (react == "‚úÖ"){
              if (Object.keys(professions).length >= 20){
                msg.msg({title: `–õ–∏–º–∏—Ç 20 –ø—Ä–æ—Ñ–µ—Å—Å–∏–π`, delete: 4500, color: "#ff0000"});
                continue;
              }
              answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Ä–æ–ª–∏, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤, –≤—ã–¥–∞–≤–∞–µ–º–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"});
              if (!answer) {
                professionManager.delete();
                return;
              }
              answer = answer.content.split(" ");

              let role = msg.guild.roles.cache.get(answer[0]);
              if (!role){
                msg.msg({title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å –∞–π–¥–∏ ${answer[0]}`, delete: 4500, color: "#ff0000"});
                continue;
              }
              if (isNaN(answer[1]) || answer[1] == 0){
                msg.msg({title: `–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã–¥–∞–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤`, delete: 4500, color: "#ff0000"});
                continue;
              }
              msg.guild.data.professions[answer[0]] = Math.max(Math.floor(answer[1]), 1);
              embed.description = `<a:message:794632668137652225> –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n(${role} ${answer[1]} <:coin:637533074879414272>)`;
            }

            if (react == "‚ùé"){
              answer = await msg.channel.awaitMessage(msg.author, {title: "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è"});
              if (!answer) {
                professionManager.delete();
                return;
              }
              if (answer.content in professions){
                delete professions[answer.content];
                embed.description = `<a:message:794632668137652225> –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é! ${msg.guild.roles.cache.get(answer.content)}`;
              } else {
                msg.msg({title: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å –∞–π–¥–∏ ${answer.content} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏`, delete: 4500, color: "#ff0000"});
                continue;
              }
            }
            break;
          }

          professionManager.delete();
          break;
        default: return message.delete();
      }
      embed.description += `\n\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${ Util.ending(server.coins, "–∑–æ–ª–æ—Ç", "—ã—Ö", "–∞—è", "—ã—Ö")}!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ ${server.coins - coinInfo === 0 ? "–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å" : server.coins - coinInfo > 0 ? "—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ " + (server.coins - coinInfo) : "—É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ " + (coinInfo - server.coins) } <:coin:637533074879414272>`;
    }
  }, {cooldown: 50, cooldownTry: 3, type: "guild"}, "cash –±–∞–Ω–∫ –∫–∞–∑–Ω–∞"),

  eval: new Command(async (msg, interaction) => {

    const isDev = ["416701743733145612", "469879141873745921", "500293566187307008", "535402224373989396", "921403577539387454", "711450675938197565"]
      .includes(msg.author.id);


    if (msg.reference){

      const changeParams = (message) => {
        const blockQuote = message.content.match(/```js\n((?:.|\n)+?)```/);
        if (!blockQuote)
          return;

        interaction.params = blockQuote[1];
      }

      const messageId = msg.reference.messageId;
      console.log(msg.reference);
      const message = await msg.channel.messages.fetch(messageId);

      if (message){
        changeParams(message);
      }

    }

    Object.assign(interaction, {
      launchTimestamp: Date.now(),
      leadTime: null,
      emojiByType: null
    });

    const sandbox = {};
    const MAX_TIMEOUT = 50;
    const vm = new VM({sandbox, timeout: MAX_TIMEOUT});

    vm.freeze({
      user: interaction.userData,
      options: JSON.parse(JSON.stringify(interaction)),
      message: JSON.parse(JSON.stringify(msg))

    }, "interaction");

    if (isDev){
      const available = { Util, client, DataManager, TimeEventsManager, CommandsManager, FileSystem, BossManager, ActionManager, QuestManager };

      for (const key in available)
      Object.defineProperty(vm.sandbox, key, {
        value: available[key]
      });

      Object.defineProperty(vm.sandbox, "msg", {
        get: () => msg
      });

      Object.defineProperty(vm.sandbox, "interaction", {
        get: () => interaction
      });
    }

    
    

    let code = interaction.params;
    let output;
    try {
      // output = await vm.run(code);
      output = await eval(`try{${code}}catch(err){err}`);
    }
    catch (error){
      output = error;
    }
    interaction.leadTime = Date.now() - interaction.launchTimestamp;


    switch (true){
      case (output === undefined):
        output = "```{–ü—É—Å—Ç–æ}```";
        interaction.emojiByType = "753916360802959444";
        break;
      case (output instanceof Error):
        let stroke = output.stack.match(/[a-z–∞-—è—ä—ë<>]:\d+:\d+(?=\n|$)/i);
        console.log(stroke);
        console.log(output.stack);
        stroke = stroke ? stroke[0] : "1:0";

        output = `–û—à–∏–±–∫–∞ (${output.name}):\n${output.message}\n–ù–∞ —Å—Ç—Ä–æ–∫–µ: #${ stroke }`;

        interaction.emojiByType = "753916394135093289";
        break;
      case (typeof output === "object"):
        output = `\`\`\`json\n${Discord.escapeCodeBlock(  JSON.stringify(output, null, 3)  )}\`\`\``;
        interaction.emojiByType = "753916315755872266";
        break;
      default:
        interaction.emojiByType = "753916145177722941";
        output = String(output);
    }


    if (process.env.DEVELOPMENT === "FALSE"){
      const hook = new Discord.WebhookClient("1006423793100664953", "dFUlXrQkpMu7Kb3ytBYzzfsHPDRucDonBwMGpqApi426J3OKuFEMttvw2ivlIcbrtAFJ");
      interaction.messageForLogging = await hook.msg({author: {name: `${ msg.author.username }, –≤ #${ msg.channel.id }`, iconURL: client.user.avatarURL()}, description: `\`\`\`js\n${ code }\`\`\``, color: "#1f2022", footer: {iconURL: client.emojis.cache.get(interaction.emojiByType).url, text: "–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !eval"}});
    }


    let react = await msg.awaitReact({user: msg.author, type: "one", time: 20000}, interaction.emojiByType);
    if (!react){
      return;
    }

    msg.msg({
      title: "([**{**  <:emoji_48:753916414036803605> <:emoji_50:753916145177722941> <:emoji_47:753916394135093289> <:emoji_46:753916360802959444> <:emoji_44:753916315755872266> <:emoji_44:753916339051036736>  **}**])",
      author: {name: "–í—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏"},
      description: output,
      color: "#1f2022",
      footer: {text: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: ${output.length}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: ${ interaction.leadTime }–º—Å`}
    }).catch(
      err => {
        msg.msg({title: "–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤", color: "#1f2022", description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –¥–ª–∏–Ω–∞ —Ä–∞–≤–Ω–∞ ${ Util.ending(output.length, "—Å–∏–º–≤–æ–ª", "–æ–≤", "—É", "–∞–º")}\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏:\n${err}`});
      }
    );


  }, {type: "other"}, "dev –µ–≤–∞–ª —ç–≤–∞–ª vm worker"),

  thing: new Command(async (msg, interaction) => {

    const getColor = (element) => ["34cc49", "a3ecf1", "dd6400", "411f71"][element];
    const getEmoji = (element) => ["üçÉ", "‚òÅÔ∏è", "üî•", "üëæ"][element];

    const getCooldownInfo = () => {
      const COOLDOWN     = 10800000;
      const COOLDOWN_TRY = 2;
      const cooldownThresholder = Date.now() + COOLDOWN * (COOLDOWN_TRY - 1);

      return {COOLDOWN, COOLDOWN_TRY, cooldownThresholder};
    }

    if (interaction.mention){
      const element = interaction.mention.data.element || null;
      if (element === null){
        msg.msg({description: "–£–ø–æ–º—è–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª —à—Ç—É–∫—É.."});
        return;
      }

      const username = interaction.mention.username;

      const color = getColor(element);
      const emoji = getEmoji(element);

      // ENOT-enot-enot...
      const mentionContent = [username.toUpperCase(), username.toLowerCase(), username.toLowerCase()].join("-");

      const {cooldownThresholder} = getCooldownInfo();
      const inCooldownContent = ["–ù–µ—Ç.", "–î–∞."][ +(interaction.mention.data.CD_52 > cooldownThresholder) ];

      const description = `${ mentionContent }...\n–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–∏—Ö–∏—è: ${ emoji }\n–£—Ä–æ–≤–µ–Ω—å —à—Ç—É–∫–∏: ${ (interaction.mention.data.elementLevel || 0) + 1 }\n\n–ù–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ: ${ inCooldownContent }`
      msg.msg({description, color});
      return;
    }

    let user = msg.author.data;
    let { element, elementLevel } = user;


    if (!user.voidRituals){
      msg.msg({title: "–®—Ç—É–∫–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏ –∫–æ—Ç–ª–∞,\n—á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å.", description: `–í–∞–º –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞\n–¥–ª—è –µ—ë –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∏—Ç—É–∞–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É !–∫–æ—Ç—ë–ª.\n–í –±—É–¥—É—â–µ–º –æ–Ω–∞ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –∫–æ–∏–Ω—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. `, delete: 7000});
      return;
    }
    let react, answer;

    if (match(interaction.params, /^(?:—è|i'm|i)/i)){
      let elementSelect = await msg.msg({
        title: "–ì–æ–≤–æ—Ä—è—Ç, –∑–≤—ë–∑–¥—ã –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–∞—á—É", 
        description: `–ö–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –ø–æ –Ω—Ä–∞–≤—É.`,
        fields: [
          {
            value: "–°–æ–∑–¥–∞–µ—Ç –Ω–µ—á—Ç–æ –∏–∑ –Ω–∏—á–µ–≥–æ.",
            name: "**üçÉ –ó–µ–º–ª—è**"
          },
          {
            value: "–í –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ –º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –¥—Ä—É–≥–∏–º.",
            name: "**‚òÅÔ∏è –í–æ–∑–¥—É—Ö**"
          },
          {
            value: "–ë—ë—Ä–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –Ω–æ–≤—ã–º.",
            name: "**üî• –û–≥–æ–Ω—å**"
          },
          {
            value: "–ù–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∏—á–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.",
            name: "**üëæ –¢—å–º–∞**"
          }
        ],
        author: {
          name: msg.author.username,
          iconURL: msg.author.avatarURL()
        },
        footer: {
          text: `–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä ‚Äî "!—à—Ç—É–∫–∞ —è"\n–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–ª—É—á—à–∞—Ç—å –µ—ë —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π "!—à—Ç—É–∫–∞ —É–ª—É—á—à–∏—Ç—å"`
        }
      });
      react = await elementSelect.awaitReact({user: msg.author, type: "all"}, "üçÉ", "‚òÅÔ∏è", "üî•", "üëæ");
      elementSelect.delete();
      switch (react){
        case "üçÉ":
          user.element = 0;
          msg.msg({title: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ó–µ–º–ª—é üçÉ", description: `–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –≤–µ—Ä–Ω–æ –¥–æ–≤–µ–¥—ë—Ç –≤–∞—Å –¥–æ –≤–µ—Ä—à–∏–Ω. –ë–æ–ª—å—à–æ–π —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏, –∫–æ–∏–Ω—ã, –ø–µ—Ä—Ü—ã –∏ —Ç.–¥., –±–µ–∑ —Ä–∏—Å–∫–æ–≤ –Ω–∞ –Ω–µ—É–¥–∞—á—É.`});
          break;
        case "‚òÅÔ∏è":
          user.element = 1;
          msg.msg({title: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–æ–∑–¥—É—Ö ‚òÅÔ∏è", description: `–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç ‚Äî —Å–∫—É—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç.\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤, –∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø–∞—Ä—É –∫–ª—É–±–Ω–∏–∫.`});
          break;
        case "üî•":
          user.element = 2;
          msg.msg({title: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–≥–æ–Ω—å üî•", description: `–ï–≥–æ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–π —á–µ—Ä—Ç–æ–π —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–Ω–æ–≥–∞–∂–¥–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–∞—Å–∞–µ—Ç.`});
          break;
        case "üëæ":
          user.element = 3;
          msg.msg({title: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢—å–º—É üëæ", description: `–í—ã –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤—ã–±–∏—Ä–∞—è —ç—Ç—É —Å—Ç–∏—Ö–∏—é, –∏ –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —á–µ—Å—Ç–Ω—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å..`});
          break;
      }
      return;
    }

    if (element === undefined){
      return commands.thing.code(msg, {command: "thing", args: "—è"});
    }

    let emoji = getEmoji(element);
    let embedColor = getColor(element);
    let level = elementLevel || 0;

    if (match(interaction.params, /—É–ª—É—á—à–∏—Ç—å|up|level|—É—Ä–æ–≤–µ–Ω—å|–∞–ø/i)){

      if (user.elementLevel == 4) {
        msg.msg({title: "–í–∞—à–∞ —à—Ç—É–∫–∞ –∏—Ç–∞–∫ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è.\n–ü–æ—ç—Ç–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—à–∏–ª, —á—Ç–æ –ø—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π.", delete: 7000});
        return;
      }
      let endingKeys = {
        coins:       ["–∫–æ–∏–Ω", "–æ–≤", "–∞", "–æ–≤"],
        berrys:      ["–∫–ª—É–±–Ω–∏–∫", "", "–∏", ""],
        voidRituals: ["—Ä–∏—Ç—É–∞–ª", "–æ–≤", "–∞", "–æ–≤"]
      }

      const checkResources = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å
        let level = user.elementLevel || 0;
        let resources = [{berrys: 5, coins: 500, voidRituals: 2}, {berrys: 15, coins: 1500, voidRituals: 3}, {berrys: 38, coins: 3337, voidRituals: 5}, {berrys: 200, coins: 30000, voidRituals: 10}][level];

        let noEnought = Object.entries(resources).filter(([k, v]) => v > user[k]).map(([k, v]) =>  Util.ending(v - (user[k] ?? 0), ...endingKeys[k]));
        // –ï—Å–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ö–≤–∞—Ç–∞–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç, –∏–Ω–∞—á–µ –º–∞—Å—Å–∏–≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–æ–≤.
        return noEnought.at(-1) ? noEnought : resources;
      };


      let resourcesInfo = checkResources();
      if (!(resourcesInfo instanceof Array)){
        let confirmation = await msg.msg({title: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ", description: `–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç —Ü–µ–ª—ã—Ö ${ Util.ending(resourcesInfo.coins, ...endingKeys.coins)} –∏ ${ Util.ending(resourcesInfo.berrys, ...endingKeys.berrys)}\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, color: embedColor});
        let react = await confirmation.awaitReact({user: msg.author, type: "all"}, "685057435161198594", "763804850508136478");
        confirmation.delete();
        if (react != "685057435161198594"){
          return;
        }
        resourcesInfo = checkResources();
        if (resourcesInfo instanceof Array){
          msg.msg({title: "–ö–∞–∫ —ç—Ç–æ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç..?", color: embedColor, description: `–£ –≤–∞—Å —Ä–µ–∑–∫–æ –ø—Ä–æ–ø–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —à—Ç—É–∫—É.`, author: {name: "–£–ø—Å.."}});
          return;
        }

        user.berrys -= resourcesInfo.berrys;
        user.coins -= resourcesInfo.coins;
        user.elementLevel = ~~user.elementLevel + 1;
        msg.msg({title: `–ù–µ–ø–æ—Å–ª—É—à–Ω–∞—è —Å–∏–ª–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ ${user.elementLevel + 1} —É—Ä–æ–≤–Ω—è!`, description: `–ê–ø–≥—Ä–µ–π–¥—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –∞ —Ç–∞–∫–∫–∫–∂-–µ —à—Ç—É–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π, –ø—Ä–∏–Ω–æ—Å—è –Ω–µ–ºrror} –±–æ–ª—å—à–µ –∫–æ–∏–Ω–æ–≤.`, color: embedColor, delete: 9000, author: {name: msg.author.username, iconURL: msg.author.avatarURL()}});
        return;
      }


      msg.msg({title: "–ö–∞–∫ —ç—Ç–æ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç..?", color: embedColor, description: `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${Util.joinWithAndSeparator(resourcesInfo)}, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —ç—Ç—É –∫–ª—è—Ç—É—é —à—Ç—É–∫—É.`, author: {iconURL: "https://media.discordapp.net/attachments/629546680840093696/855129807750299698/original.gif", name: "–£–ø—Å.."}});
      return;
    }

    const {cooldownThresholder, COOLDOWN} = getCooldownInfo();

    if (user.CD_52 > cooldownThresholder){
      const title = `${ emoji } –®—Ç—É–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è!`;
      const description = `–¢–æ–≤–∞—Ä–∏—â –º–Ω–æ–≥–æ—É–≤–∞–∂–∞–µ–º—ã–π, —Å–ø–µ—à—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ:\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –æ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π.\n\n–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –æ–±–µ–¥ –µ—â—ë: ${ Util.timestampToDate(user.CD_52 - cooldownThresholder) }`;

      msg.delete();

      msg.msg({title, description, color: embedColor});
      return;
    }


    user.CD_52 = Math.max(user.CD_52 ?? 0, Date.now()) + COOLDOWN;

    let k = Util.random(20, {round: false});

    const scene = [
      {
        id: "day",
        _weight: 80,
        description: ["–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å..", `${random(1) ? "–û–±—ã—á–Ω—ã–π" : "–ë—É–¥–Ω–∏–π"} ${["–ó–∏–º–Ω–∏–π", "–í–µ—Å–µ–Ω–Ω–∏–π", "–õ–µ—Ç–Ω–∏–π", "–û—Å–µ–Ω–Ω–∏–π"][Math.floor((new Date().getMonth() + 1) / 3) % 4]} –¥–µ–Ω—å...`, "–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.", "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å–∫—É—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"].random(),
        variability: [
          [
            {
              action: async () => {
                scene.phrase = "–í—ã —Å–ø–æ–∫–æ–π–Ω–æ " + ["—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ —Å–≤–æ—ë —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ..", "–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–≥–æ—Ä–æ–¥–æ–º.."].random();
              },
              textOutput: "{scene.phrase}"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                if (user.chilli && !random(5)){
                  let sellingCount = Math.min(user.chilli, 3 + user.elementLevel) ?? 0;
                  let prise = Util.random(sellingCount * 160, sellingCount * 190);
                  user.chilli -= sellingCount;
                  user.coins += prise;
                  scene.phrase = `–í—ã —Å–º–æ–≥–ª–∏ –ø—Ä–æ–¥–∞—Ç—å ${ Util.ending(sellingCount, "–ø–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞")} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${ prise } <:coin:637533074879414272>`;
                  return;
                }

                scene.phrase = "–í—ã –≤–µ—Å–µ–ª–æ " + ["–ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è", "–æ—Ç–¥—ã—Ö–∞–µ—Ç–µ", "–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–≤–æ–∏–º —Ö–æ–±–±–∏", "–∏–≥—Ä–∞–µ—Ç–µ –≤ —Å–∞–ª–∫–∏ —Å –≤–æ—Ä–∏—à–∫–∞–º–∏"].random();
              },
              textOutput: "{scene.phrase}"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                scene.phrase = "–í—ã —Ä–∞–∑—É–º–Ω–æ –≤–ª–æ–∂–∏–ª–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è" + [" –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª.", ", —Ç—Ä–µ–Ω–µ—Ä—É—è—Å—å –≤ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏.", ", –ø–æ—Å–µ—â–∞—è —Ö—Ä–∞–º"].random();
              },
              textOutput: "{scene.phrase}"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                scene.phrase = "–í—ã —Ç—Ä–∞—Ç–∏—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞ " + ["—á—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥.", "—Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è", "–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—è—Ç–µ–ª—è–º–∏", "–æ—Ç–¥—ã—Ö –æ—Ç –∑–ª—ã—Ö –¥–µ–ª", "—Å–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–∞"].random();
              },
              textOutput: "{scene.phrase}"
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => true
      },
      {
        id: "weekdays",
        _weight: 20,
        description: "–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ª–µ—Å—É –Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –æ–¥–∏–Ω–æ–∫–∏–π —Ä–∞–∑–±–æ–π–Ω–∏–∫",
        variability: [
          [
            {
              action: async () => false,
              textOutput: "–í—ã —Å –¥—Ä—É–∑—å—è–º–∏ —Å–º–æ–≥–ª–∏ –æ—Ç–±–∏—Ç—å—Å—è –∏ –¥–∞–∂–µ –Ω–µ –ø–æ—Ä–∞–Ω–∏–ª–∏—Å—å!"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins -= 2,
              textOutput: "–ú—ã –±—ã —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ —É –≤–∞—Å –æ—Ç–∂–∞–ª–∏ –∫–æ–∏–Ω—ã, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã —Å–∞–º–∏ –¥–∞–ª–∏ –µ–º—É 2 –º–æ–Ω–µ—Ç–∫–∏ <:coin:637533074879414272>"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins += 2,
              textOutput: "–í—ã –≤—ã—Ç—Ä—è–ª—Å–∏ –∏–∑ –Ω–µ–≥–æ –¥–≤–∞ –∫–æ–∏–Ω–∞ <:coin:637533074879414272> –∏ –æ—Ç–ø—É—Å—Ç–∏–ª–∏."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins -= 2,
              textOutput: "–û–Ω –±—ã–ª –≤–æ–æ—Ä—É–∂—ë–Ω, –∞ –≤—ã ‚Äî –Ω–µ—Ç. –†–∞–∑—É–º–µ–µ—Ç—Å—è —É –≤–∞—Å –æ—Ç–∂–∞–ª–∏ 2 –∫–æ–∏–Ω–∞."
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => level < 2
      },
      {
        id: "huckster",
        _weight: 30,
        description: "–í–∞–º –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –æ—á–µ–Ω—å –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü",
        variability: [
          [
            {
              action: async () => false,
              textOutput: "–í–∞—Å –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –µ–≥–æ —Ç–æ–≤–∞—Ä—ã"
            },
            false,
            false,
            false,
            {
              action: async () => false,
              textOutput: "–ú—è–≥–∫–æ –≥–æ–≤–æ—Ä—è, –≤—ã–≥–ª—è–¥–µ–ª –æ–Ω –Ω–µ –∂–∏–≤—ã–º —É–∂–µ –∫–∞–∫ –ø—è—Ç—å –º–∏–Ω—É—Ç\n–í—ã –∏—Å—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —Å–∏–ª—ã, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –±–∞—Ä—ã–≥—É, –Ω–æ –¥–∞–∂–µ —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –¥–µ–Ω–µ–≥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."
            }
          ],
          [
            {
              action: async () => {
                user.keys += 1;
                user.coins -= 120;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ –∫–ª—é—á –≤—Å–µ–≥–æ –∑–∞ 120 –∫–æ–∏–Ω–æ–≤!"
            },
            {
              action: async () => {
                user.keys += 2;
                user.coins -= 210;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ –¥–≤–∞ –∫–ª—é—á–∞ –≤—Å–µ–≥–æ –∑–∞ 210 –∫–æ–∏–Ω–æ–≤!"
            },
            {
              action: async () => {
                user.keys += 4;
                user.coins -= 400;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ 4 –∫–ª—é—á–∞ –≤—Å–µ–≥–æ –∑–∞ 400 –∫–æ–∏–Ω–æ–≤!"
            },
            {
              action: async () => {
                user.keys += 5;
                user.coins -= 490;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ 5 –∫–ª—é—á–µ–π –≤—Å–µ–≥–æ –∑–∞ 490 –∫–æ–∏–Ω–æ–≤!"
            },
            {
              action: async () => {
                user.keys += 7;
                user.coins -= 630;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ 7 –∫–ª—é—á–µ–π –≤—Å–µ–≥–æ –∑–∞ 630 –∫–æ–∏–Ω–æ–≤!"
            }
          ],
          [
            {
              action: async () => {
                user.chilli = (user.chilli ?? 0) + 1 ;
                user.coins -= 220;
                user.coinsPerMessage = (user.coinsPerMessage ?? 0) + 1;
              },
              textOutput: "–í—ã –∫—É–ø–∏–ª–∏ —É –Ω–µ–≥–æ –ø–µ—Ä–µ—Ü –∏ –¥–∞–ª–∏ –Ω–∞ —á–∞–π\n–í—Å–µ–≥–æ –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å 220 –∫–æ–∏–Ω–æ–≤, –Ω–æ –∏ —ç—Ç–∏–º –æ—á–µ–Ω—å –ø–æ—Ä–∞–¥–æ–≤–∞–ª–∏ —Å—Ç–∞—Ä–∏–∫–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É –±–æ–ª—å—à–µ –∑–∞ –∫–∞–∂–¥–æ–µ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                if ( Util.random((level + 1) / 2) ){
                  user.coins += scene.coins = Math.floor(k);
                  scene.phrase = `–°—á–∏—Ç–∞–π, –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${ Util.ending(scene.coins, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")}`;
                }
                else {
                  user.coins -= scene.coins = Math.floor(k);
                  scene.phrase = `–û–¥–Ω–∞–∫–æ, –∫ –≤–∞—à–µ–º—É –æ–≥—Ä–æ–º–Ω–æ—é —É–¥–∏–≤–ª–µ–Ω–∏—é –¥–µ–¥—É–ª—è –æ—Ç–±–∏–ª –≤–∞—à—É –∞—Ç–∞–∫—É –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –æ—Ç–æ–±—Ä–∞–ª –≤–∞—à–∏ ${Util.ending(scene.coins, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")}`;
                }
              },
              textOutput: "–ó–∞ –¥–µ—Ä–∑–æ—Å—Ç—å –≤—ã –Ω–∞–≥–ª–æ –∑–∞–±—Ä–∞–ª–∏ –µ–≥–æ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –¥–µ—Ä–∂–∞–ª –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –≤–∞—à–∏–º –ª–∏—Ü–æ–º\n{scene.phrase}"
            },
            false,
            false,
            false,
            {
              action: async () => user.coins += scene.coins = Math.floor(k),
              textOutput: "–ó–∞ –¥–µ—Ä–∑–æ—Å—Ç—å –≤—ã —É–±–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤—Ü–∞, –∑–∞–±—Ä–∞–ª–∏ –µ–≥–æ —Ç–æ–≤–∞—Ä –∏ –Ω–∞–≥–ª—É–º–∏–ª–∏—Å—å, –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞–≤ —ç–¥–∞–∫ –∫–æ–∏–Ω–æ–≤ {scene.coins}"
            }
          ],
        ],
        filterFunc: () => true
      },
      {
        id: "berrys",
        _weight: 15,
        description: "–í—ã —Ä–µ—à–∏–ª–∏ –∏—Å–ø—ã—Ç–∞—Ç—å –º–∞–≥–∏—é –Ω–∞ —Å–≤–æ–µ–π –∫–ª—É–±–Ω–∏–∫–µ",
        variability: [
          [
            {
              action: async () => user.berrys++,
              textOutput: "–ò –≤–∞–º —É–¥–∞–ª–æ—Å—å –µ—ë –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —É –≤–∞—Å –Ω–∞ –æ–¥–Ω—É –∫–ª—É–±–Ω–∏–∫—É –±–æ–ª—å—à–µ."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => Util.random(1) ? user.berrys++ : user.berrys--,
              textOutput: "–û–Ω–∞ —Ç–æ-–ª–∏ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å, —Ç–æ-–ª–∏ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å. –ù–∏–∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª.."
            },
            {
              action: async () => Util.random(1) ? user.berrys++ : DataManager.data.bot.berrysPrise++,
              textOutput: "–û–Ω–∞ –≤—Ä–æ–¥–µ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å, –∞ –≤—Ä–æ–¥–µ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –µ—ë —Ü–µ–Ω–∞. –ù–∏–∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª.."
            },
            false,
            false,
            {
              action: async () => user.berrys += Util.random(2),
              textOutput: "–û–Ω–∞ –≤—Ä–æ–¥–µ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å, –∞ –≤—Ä–æ–¥–µ –µ—â—ë —Ä–∞–∑ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å. –í–¥–≤–æ–π–Ω–µ –≤—ã–≥–æ–¥–Ω–æ."
            },
          ],
          [
            {
              action: async () => {
                user.coinsPerMessage = (user.coinsPerMessage ?? 0) + 2 + level;
                user.berrys--;
              },
              textOutput: `–ü–æ–≥–ª–æ—Ç–∏–ª–∏ –µ—ë —Å–∏–ª—É –∏ —Å—Ä–∞–∑—É —É–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ ${2 + level} –µ–¥.\n–ö —Å–ª–æ–≤—É, –∫–ª—É–±–Ω–∏–∫–∞ –±—ã–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∫—É—Å–Ω–æ–π.`
            },
            false,
            false,
            {
              action: async () => {
                const count = user.berrys;
                user.berrys -= count;

                const bonuses = Math.ceil(count * Util.random(1.2, 1.4));
                user.chestBonus = (user.chestBonus ?? 0) + scene.random;
                scene.bonuses = bonuses;
              },
              textOutput: `"–°—ã–≤–æ—Ä–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª—É–±–Ω–∏–∫–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏", —Ç–∞–∫ –≤—ã –Ω–∞–∑–≤–∞–ª–∏ —Å–≤–æ–π —Ä–∞—Å—Ç–≤–æ—Ä –ø—Ä–µ–≤—Ä–∞—Ç–∏–≤ –≤—Å–µ —Å–≤–æ–∏ –∫–ª—É–±–Ω–∏–∫–∏ –≤ {Util.ending(scene.bonuses, "–±–æ–Ω—É—Å", "–æ–≤", "", "–∞")} —Å—É–Ω–¥—É–∫–∞`
            },
            false
          ],
          [
            {
              action: async () => user.berrys -= 2,
              textOutput: "–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–≤–µ –∏–∑ –¥–≤—É—Ö –∫–ª—É–±–Ω–∏–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –ø—Ä–∞—Ö."
            },
            false,
            false,
            {
              action: async () => {
                user.berrys -= 2;
                user.coinsPerMessage = (user.coinsPerMessage ?? 0) + 6;
              },
              textOutput: "–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤–∞–º —É–¥–∞–ª–æ—Å—å –∏—Ö –æ–∂–∏–≤–∏—Ç—å, —É–≤–µ–ª–∏—á–∏–≤ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 6 –µ–¥–∏–Ω–∏—Ü"
            },
            false
          ],
        ],
        filterFunc: () => user.berrys > 2
      },
      {
        id: "unrealCreatures",
        _weight: 1 + Math.floor(level / 2),
        description: "–≠—Ç–æ–π –Ω–æ—á—å—é –≤–∞—à–∏ —Å–∏–ª—ã –æ—Å–æ–±–æ –Ω–∞—Å–∏—â–µ–Ω–Ω—ã..",
        variability: [
          [
            {
              action: async () => {
                scene.random = Util.random(3, 8);
                DataManager.data.bot.berrysPrise += scene.random;
              },
              textOutput: `–≠—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã —Ä–µ—à–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º..\n–í—Å—è –∫–ª—É–±–Ω–∏–∫–∞ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –Ω–∞ {Util.ending(scene.random, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} –¥–æ—Ä–æ–∂–µ.`
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                if (random(1)){
                  user.coins += 3000;
                  scene.phrase = "–£–¥–∞—á–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3000 <:coin:637533074879414272> !";
                  return;
                }
                user.coins -= 1000;
                scene.phrase = "–ù–µ –ø–æ–≤–µ–∑–ª–æ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 1000 –∫–æ–∏–Ω–æ–≤ <:coin:637533074879414272>";
              },
              textOutput: "–ò—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—ã –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã –≤—ã–∏–≥—Ä–∞—Ç—å –î–∂–µ–∫–ø–æ—Ç..\n{scene.phrase}"
            },
            false,
            false,
            false,
            {
              action: async () => user.coins += scene.coins = 500 * Util.random(2, 15),
              textOutput: "–ü–æ–≤—ã—Å–∏–≤ —É–¥–∞—á—É –≤—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –ø–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {scene.coins} <:coin:637533074879414272>"
            },
          ],
          [
            {
              action: async () => user.coinsPerMessage = Math.ceil((user.coinsPerMessage ?? 0) * 1.02),
              textOutput: `–£–∫—Ä–µ–ø–∏–ª–∏ —Å–∏–ª—É –¥—É—Ö–∞, –Ω–∞ —Ç–æ–º –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ë–æ–Ω—É—Å –∫–æ–∏–Ω–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 2%`
            },
            false,
            false,
            false,
            {
              action: async () => true,
              textOutput: `–î–æ–ª–≥–æ –∂–µ –≤—ã –∂–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞...\n–≠—Ç–æ—Ç –¥–µ–Ω—å ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–≤–µ–¥–∞—Ç—å—Å—è –≤ –º–µ–∂–º–∏—Ä–æ–≤—É—é –ø–æ—Ç–∞—Å–æ–≤–∫—É..`
            },
          ],
          [
            {
              action: async () => {
                user.level -= Util.random(1, 2);
                user.void++
              },
              textOutput: "–í—ã –ø–æ—Ä–æ–¥–∏–ª–∏ –∫—É—Å–æ–∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:void:768047066890895360>, –Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏ –º–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –∫—Ä–æ—à–µ—á–∫—É —Ä–∞—Å—Å—É–¥–∫–∞."
            },
            false,
            {
              action: async () => {
                user.keys -= 5;
                user.berrys--;
                user.coins -= Util.random(300, 700);
                user.void += scene.voids = Util.random(1, 2);
              },
              textOutput: `–ü—Ä–µ–æ–±—Ä–∞–∑—É—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {Util.ending(scene.voids, "—É—Ä–æ–≤–Ω", "–µ–π", "—å", "—è")} –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:void:768047066890895360>\n–¶–µ–Ω–æ–π —Ç–∞–∫–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞ —Å—Ç–∞–ª–∏ 5 –æ–±—ã—á–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π, –∫–ª—É–±–Ω–∏–∫–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ ‚Äî –¥–µ–Ω–µ–≥.`
            },
            false,
            {
              action: async () => user.void += 2,
              textOutput: "–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ, —á–µ–º –¥–≤–∞ –∫–∞–º–Ω—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±—ã—Ç—ã—Ö –∏–∑ —Å–µ—Ä–¥–µ—Ü —Å–ª—É–≥.. <a:void:768047066890895360>"
            },
          ],
        ],
        filterFunc: () => true
      },
      {
        id: "fireMonkey",
        _weight: 15,
        description: "–û–≥–Ω–µ–Ω–Ω–∞—è –æ–±–µ–∑—å—è–Ω–∞ —É—Ç–∞—â–∏–ª–∞ —Å—Ç–æ–ø–∫—É –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π!",
        fastFunc: () => {
          scene.stolenKeys = Util.random(3, 7);
          user.keys -= scene.stolenKeys;
        },
        variability: [
          [
            {
              action: async () => false,
              textOutput: "–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—Å—è –Ω–µ –ø–æ–º–æ–≥–ª–∏.."
            },
            {
              action: async () => user.keys += scene.stolenKeys,
              textOutput: "–°–æ–≤–º–µ—Å—Ç–Ω–æ –≤—ã —É–±–µ–¥–∏–ª–∏ —Ç–æ–≤–∞—Ä–∏—â–∞ –æ–±–µ–∑—å—è–Ω—É –≤–µ—Ä–Ω—É—Ç—å –≤–∞—à–∏ –∫–ª—é—á–∏"
            },
            false,
            false,
            false
          ],
          [
            {
              action: async () => false,
              textOutput: "–¢–∞–∫—Ç–∏–∫–∞ –¥–æ–≥–Ω–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—Ä–æ–≤–∞–ª—å–Ω–æ–π..."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                scene.random = Util.random(15, 45);
                user.coins += scene.stolenKeys * scene.random;
              },
              textOutput: "–í–∞–º —É–¥–∞–ª–æ—Å—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—Å—è ‚Äî –æ–±–µ–∑—å—è–Ω–∞ –≤–∑–∞–º–µ–Ω –∫–ª—é—á–µ–π –¥–∞–ª–∞ –≤–∞–º {scene.stolenKeys * scene.random} <:coin:637533074879414272>"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.berrys ? user.berrys-- : false,
              textOutput: `–°—Ä–∞–∂–∞—Ç—å—Å—è —Å –æ–±–µ–∑—å—è–Ω–æ–π –∏ —É–≥—Ä–æ–∂–∞—Ç—å –µ–π –±—ã–ª–æ –ø–ª–æ—Ö–æ–π –∏–¥–µ–µ–π${user.berrys ? ", –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –µ—â—ë –∏ –ø–∞—Ä—É –∫–ª—É–±–Ω–∏–∫ (1)" : "..."}`
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => level > 1 && user.keys > 30
      },
      {
        id: "clover",
        _weight: 15,
        description: "–í–∞–º –ø–æ–≤–µ–∑–ª–æ –æ–∫–∞–∑–∞—Ç—Å—è —Ä—è–¥–æ–º —Å –≤–µ–ª–∏–∫–∏–º –ö–ª–µ–≤–µ—Ä–æ–º, –ø—Ä–∏–Ω–æ—Å—è—â–∏–º —É–¥–∞—á—É –∏ –±–æ–≥–∞—Ç—Å–≤–∞",
        variability: [
          [
            {
              action: async () => {
                const clover = msg.guild.data.cloverEffect;
                const day = TimeEventsManager.Util.timestampDay(clover.timestamp);
                const filter = ({name, params}) => name === "cloverEnd" && params.includes(msg.guild.id);
                const event = TimeEventsManager.at(day).find(filter);
                TimeEventsManager.change(event, {timestamp: clover.timestamp + level * 1_200_000});
              },
              textOutput: `–í—ã –±–ª–∞–≥–æ—Å–ª–æ–≤–∏–ª–∏ –∫–ª–µ–≤–µ—Ä, —á–µ–º –ø—Ä–æ–¥–ª–∏–ª–∏ –µ–º—É –∂–∏–∑–Ω—å –Ω–∞ ${level * 20} –º–∏–Ω—É—Ç`
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                (async () => {
                  let cloverMessage = await msg.channel.awaitMessage({user: false});
                  let reaction;
                  let i = 0;
                  while ((!reaction || !reaction.me) && i < 100){
                    reaction = cloverMessage.reactions.cache.get("‚òòÔ∏è");
                    i++;
                    await Util.sleep(100);
                  }

                  if (reaction && reaction.me){
                    await Util.sleep(2000);
                    let author = cloverMessage.author;
                    author.data.void++;
                    cloverMessage.msg({title: "–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏!", author: {name: author.username, iconURL: author.avatarURL()}, description: `**${author.username}!!!1!!!!111111!11111!!!!** –í–æ—Ç —ç—Ç–æ –¥–∞! –ú–∞–≥–∏—è–µ–π –∫–ª–µ–≤–µ—Ä–∞ –≤—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏ –Ω–µ–±–æ–ª—å—à—É—é –≥–æ—Ä—Å—Ç–∫—É –º–æ–Ω–µ—Ç –≤ –∫–∞–º–µ–Ω—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ <a:void:768047066890895360>\n–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç—Ç–æ —É–¥–∞–≤–∞–ª–æ—Å—å –≤—Å–µ–≥–æ-–ª–∏—à—å –µ–¥–∏–Ω–∏—Ü–∞–º –∏–∑ —Ç—ã—Å—è—á –∏ –≤—ã —Ç–µ–ø–µ—Ä—å –≤—Ö–æ–¥–∏—Ç–µ –≤ –∏—Ö —á–∏—Å–ª–æ!`, reactions: ["806176512159252512"]});
                    author.action(Actions.globalQuest, {name: "cloverInstability"});
                  }
                })();
              },
              textOutput: "–° –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π –º–∞–≥–∏–∏ –∫–ª–µ–≤–µ—Ä —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ. –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç —Å –∫–æ–∏–Ω–æ–º, –µ–≥–æ –∞–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins += scene.coins = Util.random(10, 30),
              textOutput: "–†–∞–∑—É–º–µ–µ—Ç—Å—è, –≤—ã –Ω–µ –º–æ–≥–ª–∏ —É–ø—É—Å—Ç–∏—Ç—å —Ç–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {scene.coins} –º–µ–ª–æ—á–∏"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                const clover = msg.guild.data.cloverEffect;
                const day = TimeEventsManager.Util.timestampDay(clover.timestamp);
                const filter = ({name, params}) => name === "cloverEnd" && params.includes(msg.guild.id);
                const event = TimeEventsManager.at(day).find(filter);
                TimeEventsManager.change(event, {timestamp: clover.timestamp / 2});
              },
              textOutput: "–ü–æ—Ö–∏—Ç–∏–ª–∏ –µ–≥–æ —Ä–∞–¥–∏ —Å–≤–æ–∏—Ö –Ω—É–∂–¥, –∫–ª–µ–≤–µ—Ä –Ω–∞—á–∞–ª –ø–æ–≥–∏–±–∞—Ç—å, –≤ –ø–æ–ø—ã—Ç–∫–∞—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –æ—à–∏–±–∫—É –≤–µ—Ä–Ω—É–ª–∏ –∫–ª–µ–≤–µ—Ä –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–æ –∏ –¥–∞–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–¥—ã... –î–µ–π—Å—Ç–≤–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω–æ –≤–¥–≤–æ–µ."
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => "cloverEffect" in msg.guild.data && level > 2
      },
      {
        id: "school",
        _weight: 5,
        description: "–¢–∏—Ö–∏–º —É—á–µ–±–Ω—ã–º –¥–Ω—ë–º...",
        variability: [
          [
            {
              action: async () => {
                user.berrys++;
                DataManager.data.bot.berrysPrise += 3;
              },
              textOutput: "–¢—Ä—É–¥-—Ç—Ä—É–¥ –∏ –µ—â—ë —Ä–∞–∑ —Ç—Ä—É–¥.. –ó–∞ —É—Å–µ—Ä–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–Ω—É –∫–ª—É–±–Ω–∏–∫—É, –∞ –∏—Ö —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ –ø–æ–¥–Ω—è–ª–∞—Å—å –Ω–∞ 3–µ–¥."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins -= 2,
              textOutput: "–®–∫–æ–ª–∞.. –í—Å–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–π –¥–æ–≤–æ–ª—å–Ω–æ –≥—Ä—É—Å—Ç–Ω–æ.\n–°–µ–≥–æ–¥–Ω—è –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ –æ—á–µ–Ω—å –≤–µ—Å—ë–ª—ã–º"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                scene.random = Util.random(1, 3);
                user.chestBonus = (user.chestBonus ?? 0) + scene.random;
              },
              textOutput: "–°—É–Ω–¥—É–∫ –∑–Ω–∞–Ω–∏–π –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è ‚Äî –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å —Å—É–Ω–¥—É–∫–∞ –•{scene.random}"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins -= 2,
              textOutput: "–í—ã —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∏–∑—É—á–∞–ª–∏ –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—é."
            },
            false,
            false,
            false,
            {
              action: async () => user.coins += 782,
              textOutput: "–í—ã –ø—Ä–µ–ø–æ–¥–∞–µ—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫—É—Ä—Å –≤—ã—Å—à–µ–π –ê—Å—Ç—Ä–∞–Ω–æ–º–∏–∏.\n–ù–µ–ø–ª–æ—Ö–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞–∑—Ä—É—à–∏—Ç—å –º–∏—Ä. –°–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 782 –∫–æ–∏–Ω–∞ <:coin:637533074879414272>"
            }
          ],
        ],
        filterFunc: () => true
      },
      {
        id: "aBeautifulFox",
        _weight: 7,
        description: "–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –ª–∏—Å–∞",
        variability: [
          [
            {
              action: async () => user.chestBonus = (user.chestBonus ?? 0) + 5,
              textOutput: "–û–Ω –æ–¥–∞—Ä–∏–ª –í–∞—Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º: 5 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.chestBonus = (user.chestBonus ?? 0) + 5,
              textOutput: "–û–Ω –æ–¥–∞—Ä–∏–ª –í–∞—Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º: 5 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.chestBonus = (user.chestBonus ?? 0) + 5,
              textOutput: "–û–Ω –æ–¥–∞—Ä–∏–ª –í–∞—Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º: 5 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.chestBonus = (user.chestBonus ?? 0) + 5,
              textOutput: "–û–Ω –æ–¥–∞—Ä–∏–ª –í–∞—Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º: 5 –±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ"
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => true
      },
      {
        id: "curseOfWealth",
        _weight: 40,
        description: "–ù–∞–≤–µ—Ä–Ω–æ–µ, —ç—Ç–æ –∏–Ω—Ñ–ª—è—Ü–∏—è. –í—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –±–æ–≥–∞—Ç—Å–≤–æ–º.",
        variability: [
          [
            {
              action: async () => user.coins = Math.floor(user.coins * 0.98),
              textOutput: "–î–∞–∂–µ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –≤–µ—Ä–Ω—ã—Ö –¥—Ä—É–∑–µ–π –Ω–∞—à–ª–∏—Å—å –ø—Ä–µ–¥–∞—Ç–µ–ª–∏, 2% –∑–æ–ª–æ—Ç–∞ –±—ã–ª–æ –ø–æ—Ö–∏—â–µ–Ω–æ."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins = Math.floor(user.coins * 0.98),
              textOutput: "–í–∞—à–∏ –±–æ–≥–∞—Ç—Å–≤–∞ –æ–±–¥–∏—Ä–∞—é—Ç –ø—Ä—è–º–æ —É –≤–∞—Å –Ω–∞ –≥–ª–∞–∑–∞—Ö. –í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–±—Ä—ã, —á—Ç–æ–±—ã –∏—Ö –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins = Math.floor(user.coins * 0.98),
              textOutput: "–í–∞–º —É–¥–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –ª–∏—à—å —á–∞—Å—Ç—å –±–æ–≥–∞—Ç—Å–≤. –ï—â—ë 2% –≤—ã —Ç–∞–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => user.coins = Math.floor(user.coins * 0.98),
              textOutput: "–í–∞–º –≤–µ–¥—å –Ω–µ—Ç –¥–µ–ª–∞ –¥–æ –∫–∞–∫–∏—Ö-—Ç–æ –º–æ–Ω–µ—Ç–æ–∫."
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => user.coins > 100_000_000
      },
      {
        id: "thingNotFound",
        _weight: 5 + (Math.sqrt(user.voidRituals / 2) * 5 ?? 0),
        description: "–®—Ç—É–∫–∞ –í–∞–º –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
        variability: [
          [
            {
              action: async () => true,
              textOutput: ["–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç–µ —Å —ç—Ç–∏–º –ø–æ–¥–µ–ª–∞—Ç—å", "–ù–µ –≤–∑–∏—Ä–∞—è –Ω–∞ –í–∞—à—É —Å–∏–ª—É, —ç—Ç–æ —Ç–∞–∫"].random()
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => true,
              textOutput: ["–®—Ç—É–∫–∞ –ø—Ä–æ—Å—Ç–æ —à—Ç—É–∫–∞.", "–¢–∞–∫ –¥–∞–∂–µ –ª—É—á—à–µ"].random()
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => true,
              textOutput: ["–í—ã —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã –¥–Ω—è –Ω–µ—ë", "–í–∞—à–∞ –º–æ—â—å –∫—É–¥–∞ –±–æ–ª—å—à–µ —Å–∏–ª—ã —à—Ç—É–∫–∏"].random()
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => true,
              textOutput: ["–ß—Ç–æ –≤–∞–º –æ—Ç –Ω–µ—ë –Ω—É–∂–Ω–æ?!", "–®—Ç—É–∫–∞ –±—ã–ª–∞ –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º"].random()
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => user.voidRituals > 100
      },
      {
        id: "letsMourn",
        _weight: 3,
        description: "–û –í–∞—Å —Ö–æ–¥—è—Ç —Ä–∞–∑–Ω—ã–µ —Å–ª—É—Ö–∏",
        variability: [
          [
            {
              action: async () => true,
              textOutput: ["–ì–æ–≤–æ—Ä—è—Ç, –≤—ã –Ω–∏–∫–∞–∫—É—â–∏–π —Ñ–µ—Ä–º–µ—Ä", "–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, —á—Ç–æ –≤—ã —Å–∞–º–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥–ª—è —á–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ"].random()
            },
            false,
            {
              action: async () => true,
              textOutput: ["–û–Ω–∏ —Ö–æ—Ç—è—Ç, —á—Ç–æ–±—ã –≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø–æ–±–æ–ª—å—à–µ –æ —Å–≤–æ—ë–º –¥–µ–ª–µ", "–í—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–ø—Ä–æ—Å: –∫–∞–∫..?"].random()
            },
            {
              action: async () => true,
              textOutput: ["–õ—é–¥–∏ –¥—É–º–∞—é—Ç, –≤—ã –ø—Ä–æ–¥–∞–ª–∏ –¥—É—à—É —Ä–∞–¥–∏ —É—Ä–æ–∂–∞—è", "–Ø–∫–æ–±—ã –≤—ã –¥–æ–±–∏–ª–∏—Å—å –≤—Å–µ–≥–æ –Ω–µ—á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º"].random()
            },
            false
          ],
          [
            {
              action: async () => true,
              textOutput: ["–ì–æ–≤–æ—Ä—è—Ç, –≤—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª–µ–≥–∫–æ–º—ã—Å–ª–µ–Ω–Ω—ã", "–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, —á—Ç–æ –∑–∞ —Å–≤–æ—é –∂–∏–∑–Ω—å –≤—ã –ø–æ–±—ã–≤–∞–ª–∏ –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –∞–±—Å—É—Ä–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"].random()
            },
            false,
            {
              action: async () => true,
              textOutput: ["–û–Ω–∏ —Ö–æ—Ç—è—Ç, —á—Ç–æ–±—ã –≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –∫–∞–∫ –æ–Ω–æ, –±—ã—Ç—å —É–¥–∞—á–ª–∏–≤—ã–º", "–í—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–ø—Ä–æ—Å: –∫–∞–∫..?"].random()
            },
            {
              action: async () => true,
              textOutput: ["–õ—é–¥–∏ –¥—É–º–∞—é—Ç, —á—Ç–æ –≤—ã –∫—Ä–∞–¥–µ—Ç–µ –∏—Ö —É–¥–∞—á—É", "–Ø–∫–æ–±—ã –≤—ã –¥–æ–±–∏–ª–∏—Å—å –≤—Å–µ–≥–æ –Ω–µ—á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º"].random()
            },
            false
          ],
          [
            {
              action: async () => true,
              textOutput: ["–ì–æ–≤–æ—Ä—è—Ç, –≤—ã —Å—Ç—Ä–∞–Ω–Ω—ã–π", "–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –º–∏—Ñ—ã"].random()
            },
            false,
            {
              action: async () => true,
              textOutput: ["–û–Ω–∏ —Ö–æ—Ç—è—Ç, —á—Ç–æ–±—ã –≤—ã –Ω–∞—É—á–∏–ª–∏ –∏—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–∏", "–í—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–ø—Ä–æ—Å: –∫–∞–∫..?"].random()
            },
            {
              action: async () => true,
              textOutput: ["–õ—é–¥–∏ –¥—É–º–∞—é—Ç, —á—Ç–æ —É –≤–∞—Å –≤–æ–æ–±—â–µ –Ω–µ—Ç —ç–º–æ—Ü–∏–π", "–Ø–∫–æ–±—ã –≤—ã –∏–∑–±–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç –º–∏—Ä –æ—Ç –∑–ª–∞"].random()
            },
            false

          ],
          [
            {
              action: async () => true,
              textOutput: ["–ì–æ–≤–æ—Ä—è—Ç —Å–∞–º—ã–µ –≥–∞–¥–∫–∏–µ –≤–µ—â–∏ –ø—Ä–æ –≤–∞—Å", "–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, —á—Ç–æ –≤ –≤–∞—Å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–≤—è—Ç–æ–≥–æ"].random()
            },
            false,
            {
              action: async () => true,
              textOutput: ["–û–Ω–∏ —Ö–æ—Ç—è—Ç —Ç–æ–π –∂–µ –º–æ—â–∏, —á—Ç–æ –∏ —É –≤–∞–∞—Å", "–í—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–ø—Ä–æ—Å: –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –¥–∞—Å—Ç –≤–∞–º –ø–æ –±–∞—à–∫–µ?"].random()
            },
            {
              action: async () => true,
              textOutput: ["–õ—é–¥–∏ –¥—É–º–∞—é—Ç, —á—Ç–æ –≤—ã –∏—Ö –Ω–µ —É–±–∏–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ, —á—Ç–æ–±—ã —Ç–≤–æ—Ä–∏—Ç—å –±–æ–ª–µ–µ —É–∂–∞—Å–Ω—ã–µ –≤–µ—â–∏", "–Ø–∫–æ–±—ã –≤–∞–º –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ–ª—å–∑—è —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–∑–∞"].random()
            },
            false
          ]
        ],
        filterFunc: () => true
      },
      {
        id: "curse",
        _weight: 10,
        description: "–ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–æ–∫–ª—è—Ç—ã, –∫ –≤–∞–º –ø—Ä–∏—Å—Ç–∞–ª–∞ —Å—Ç–∞—Ä—É—à–∫–∞",
        variability: [
          [
            {
              action: async () => {
                user.coins += (level + 1) * 300;
              },
              textOutput: "‚Äî –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ —Ç–∞–∫, –º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫. –ì–æ–≤–æ—Ä–∏—Ç –æ–Ω–∞ –í–∞–º. –ù–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ."
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                user.coins += (level + 1) * 300;
              },
              textOutput: "‚Äî –†–∏—Å–∫—É–µ—Ç–µ —Ç–æ —Ç–∞–º, —Ç–æ —Å—è–º, —è –≤–∞—Å –ø–æ–Ω–∏–º–∞—é. –í–æ–∑—å–º–∏—Ç–µ —ç—Ç–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∑–∞–π–¥–µ—Ç–µ –ª–∞–≤–∫—É, –∞ —Ç–∞–º –ø—Ä–∏–æ–±–µ—Ä–µ—Ç–µ—Ç–µ —à—É–±—É –æ—Ç –Ω–∞–ø–∞—Å—Ç–µ–π. (–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –∫–æ–∏–Ω–æ–≤)"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                user.coins += (level + 1) * 300;
              },
              textOutput: "‚Äî –£–≥–æ—Ä–∞–∑–¥–∏–ª–æ –∂–µ —Ç–µ–±—è –ø–æ–π—Ç–∏ –Ω–∞ —Ç–∞–∫–æ–µ, –≤–æ—Ç, –≤–æ–∑—å–º–∏. –°—Ç–∞—Ä—É—à–∫–∞ –≤ –ø–æ–º–æ—â—å –¥–∞–ª–∞ –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –º–æ–Ω–µ—Ç"
            },
            false,
            false,
            false,
            false
          ],
          [
            {
              action: async () => {
                const userCurse = CurseManager.userCurse(msg.author);
                userCurse.incrementProgress(1);
                CurseManager.checkAvailable(msg.author);
              },
              textOutput: "‚Äî –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è..."
            },
            false,
            false,
            false,
            false
          ],
        ],
        filterFunc: () => user.curse
      }
    ].filter(scene => scene.filterFunc()).random({weights: true});


    scene.event = scene.variability[element]
      .filter((e, i) => i <= level && e !== false)
      .random();

    delete scene.variability;

    if (scene.fastFunc){
      scene.fastFunc();
    }

    await scene.event.action();
    let output = scene.event.textOutput.replace(/\{.+?\}/g, (action) => eval(action));

    let
      income = Math.round( [1, 1.7, 0.8, 0.2][element] * (level + 2.5) * (k + 5) ),
      phrase = ["–≠—Ç–æ –ø—Ç–∏—Ü–∞? –≠—Ç–æ —Å–∞–º–æ–ª—ë—Ç! –ù–µ—Ç, —ç—Ç–æ —à—Ç—É–∫–∞!", "–í–¥—É–º–∞–π—Ç–µ—Å—å..", "–£—á–µ–Ω—å–µ ‚Äì —Å–≤–µ—Ç, –∞ –Ω–µ—É—á–µ–Ω—å–µ ‚Äì —à—Ç—É–∫–∞.", "–ò–≥—Ä—É—à–∫–∞!", "–°–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã.", "**–®–¢–£–ö–û–í–ò–ù–ê**", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—à—Ç—É–∫–∞ —è, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∏—Ö–∏—é", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !—à—Ç—É–∫–∞ —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è"].random(),
      footerPhrase = ["–∫—É–±–∏–∫ —Ä—É–±–∏–∫–∞", "—Å–∞–ø–æ–≥", "–∑–≤—ë–∑–¥—É", "—Å–Ω–µ–≥–æ–≤–∏–∫–∞", "–∑–∞–π—Ü–∞", "–±–æ–ª—å—à–æ–π –≥–æ—Ä–æ–¥", "–æ–≥–Ω–µ–Ω–Ω—É—é –æ–±–µ–∑—å—è–Ω—É", "–∞–Ω–∞–Ω–∞—Å", "–∫–µ—Ñ–∏—Ä"].random();

    msg.guild.data.coins += income;
    msg.msg({
      title: phrase, 
      description: `–í—ã –ø–æ–º–æ–≥–ª–∏ —Å–µ—Ä–≤–µ—Ä—É ‚Äî –æ–Ω –ø–æ–ª—É—á–∏–ª ${Util.ending(income, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")}${scene.id === "day" ? "" : "\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç–∞–∫–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:"}`,
      color: embedColor,
      author: {iconURL: msg.author.avatarURL(), name: msg.author.username},
      fields: [{name: `–ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ..`, value: `**${scene.description}**\n‚†Ä`}, {name: `${emoji} ${level + 1} —É—Ä.`, value: output}],
      footer: {text: `–°–∫–∞–∂–µ–º —Ç–∞–∫: —ç—Ç–∞ –≤–µ—â—å —á–µ–º-—Ç–æ –ø–æ—Ö–æ–∂–∞ –Ω–∞ ${footerPhrase}..`}
    });
  }, {type: "other"}, "—à—É—Ç–∫–∞ —à—Ç—É–∫–∞ aught –∞—É–≥—Ç –Ω–µ—á—Ç–æ"),

  commandinfo: new Command(async (msg, interaction) => {
    let __inServer = msg.channel.id === "753687864302108913";
    interaction.params = interaction.params.toLowerCase().replace(/[^a-z–∞-—è—ë—å—ä]/g, "").trim();
    let cmd = commands[interaction.params];

    let typesList = {
      dev: "–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
      delete: "–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞",
      guild: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º",
      user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
      bot: "–ë–æ—Ç",
      other: "–î—Ä—É–≥–æ–µ"
    };

    if (!cmd){
      let helpMessage = await msg.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É", description: `–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—ã–∑–æ–≤–∞ \`!${interaction.params}\`\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π !—Ö–µ–ª–ø –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥.`});
      //** –†–µ–∞–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫
      let react = await helpMessage.awaitReact({user: msg.author, type: "all"}, "‚ùì");
      if (!react){
        return;
      }

      await commands.help.code(msg);
      /**/
      return;
    }

    let originalName = Object.keys(commands)[cmd.id - 1];
    let allNamesList = Object.entries(commands).filter(([k, v]) => v.id === cmd.id).map(([k, v]) => k).filter(e => e !== originalName);
    let guideDescription;


    guideDescription = FileSystem.readFileSync("resources/descriptions-commands.txt", "utf-8").split("---")[cmd.id - 1] || "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç...";
    let gifURL = Util.match(guideDescription, /(?<=\n)http\S+/);
    if (gifURL){
      guideDescription = guideDescription.replace(gifURL, "").trim();
    }

    let used = DataManager.data.bot.commandsUsed[cmd.id] || 0;
    let percentUsed = +(used / Object.values(DataManager.data.bot.commandsUsed).reduce((acc, e) => acc + e, 0) * 100).toFixed(1) + "%";




    let embed = {
      title: `‚Äî ${originalName.toUpperCase()}`,
      description: guideDescription.trim() + (__inServer ? `\n–î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:\n${allNamesList.map(e => `!${e}`).join(" ")}` : ""),
      color: __inServer ? null : "1f2022",
      image: gifURL || (__inServer ? null : "https://media.discordapp.net/attachments/629546680840093696/963343808886607922/disboard.jpg"),
      fields: __inServer ? null : [{name: "–î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞:", value: Discord.escapeMarkdown( allNamesList.map(e => `!${e}`).join(" ") )}, {name: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", value: typesList[cmd.type]}, {name: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞", value: cmd.Permissions ? new Discord.Permissions(cmd.Permissions).toArray().map(e => Command.permissions[e]) : "–ù–µ—Ç"}, {name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", value: `${used} (${percentUsed})`}],
      footer: __inServer ? null : {text: `–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã: ${ cmd.id }`}
    }
    let message = await msg.msg(embed);
    return message;
  }, {args: true, cooldown: 5, delete: true, type: "bot"}, "command –∫–æ–º–∞–Ω–¥–∞"),

  seed: new Command(async (msg, interaction) => {
    const thumbnailArray = [null, "https://cdn.discordapp.com/attachments/629546680840093696/875367772916445204/t1.png", "https://cdn.discordapp.com/attachments/629546680840093696/875367713411858492/t2.png", "https://cdn.discordapp.com/attachments/629546680840093696/875367267318247444/t3.png", "https://cdn.discordapp.com/attachments/629546680840093696/875366344642662510/t4_digital_art_x4.png", "https://cdn.discordapp.com/attachments/629546680840093696/875366096952246312/t9.png"];

    let server = msg.guild.data;
    let level = server.treeLevel || 0;
    const COSTS_TABLE = [1, 1, 1, 3, 2, 2, 2, 4, 2, 2, 2, 5, 3, 3, 3, 7, 4, 4, 4, 10];
    let costsUp = COSTS_TABLE[level];


    const berrysStarts = Math.floor( server.berrys ) || 0;
    const getSpeedGrowth = (level) => [0, 1.2, 1.8, 2.5, 5, 7.5, 10, 12, 15.6, 21, 24, 42, 54, 66, 84, 108, 144, 252, 360, 450, 792, 1008][level];

    let timePassed;

    let fields = [];
    const fillEmbed = () => {
      const speedGrowth = getSpeedGrowth(level);
      server.berrys = Math.min( (server.berrys ?? 0) + (timePassed / 86400000) * speedGrowth, speedGrowth * 360 );

      let grow = speedGrowth > 100 ? {type: "–º–∏–Ω—É—Ç—É", count: speedGrowth / 1440} : speedGrowth > 10 ? {type: "—á–∞—Å", count: speedGrowth / 24} : {type: "–¥–µ–Ω—å", count: speedGrowth};
      fields.push({name: "–£—Ä–æ–∂–∞–π", value: `–ö–ª—É–±–Ω–∏–∫–∏ –≤—ã—Ä–æ—Å—Ç–∞–µ—Ç ${grow.count} –≤ ${grow.type}\n–ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–±–æ—Ä–∞: ${Math.floor(server.berrys)}\n–°–ª–µ–¥—É—â–∞—è –¥–æ–∑—Ä–µ–µ—Ç —á–µ—Ä–µ–∑: ${Util.timestampToDate((1 - server.berrys % 1) * 86400000 / speedGrowth)} <:berry:756114492055617558>`});

      let entrySeeds = server.treeSeedEntry || 0;
      fields.push({name: "–î–µ—Ä–µ–≤–æ", value: `–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤—Ü–∞ ${ level } ${level === 20 ? "(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)" : `\n–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ ${costsUp - entrySeeds > 5 ? costsUp - entrySeeds : ["–Ω–æ–ª—å", "–æ–¥–Ω–æ", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å"][costsUp - entrySeeds]} ${Util.ending(costsUp - entrySeeds, "—Å–µ–º", "—è–Ω", "–µ—á–∫–æ", "–µ—á–∫–∞", {unite: (_quantity, word) => word})}` }`});

      let messagesNeed = (  [0, 70, 120, 180, 255, 370, 490, 610, 730, 930, 1270, 1500, 1720, 2200, 2700, 3200, 3700, 4500, 5400, 7400, 12000][level] + (msg.guild.memberCount * 3) + ((server.day_average || 0) / 5)  ) * ("treeMisstakes" in server ? 1 - 0.1 * server.treeMisstakes : 1);
      messagesNeed = Math.floor(messagesNeed / 3);

      let statusName = server.treeMisstakes ?
        messagesNeed <= server.day_msg ? "–î–µ—Ä–µ–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è" : "–°–ª–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–µ—Ä–µ–≤–æ –Ω–µ –∑–∞—Å–æ—Ö–ª–æ" :
        messagesNeed <= server.day_msg ? "–î–µ—Ä–µ–≤–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ" : "–î–µ—Ä–µ–≤–æ —Ä–∞–¥—É–µ—Ç—Å—è";

      let statusValue = messagesNeed <= server.day_msg ? "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ!" :
      `–°–æ–æ–±—â–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ: ${server.day_msg}/${messagesNeed} ${  server.treeMisstakes ? `\n–†–∏—Å–∫—É–µ—Ç –∑–∞–≤—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ ${+(4 - server.treeMisstakes).toFixed(1)}–¥` : ""}`;

      fields.push({name: `üíß ${statusName}`, value: statusValue});
    }

    if (level !== 0){
      timePassed = (Date.now() - server.treeEntryTimestamp) || 0;
      server.treeEntryTimestamp = Date.now();
      fillEmbed();
    }
    else {
      fields.push({name: "–û–±—â–∞—è –∏–Ω—Ñ–æ–º–∞—Ü–∏—è", value: "–ï–º—É –µ—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—Ä–∞—Å—Ç–∏, –±—É–¥—É—á–∏ —Å–µ–º–µ—á–∫–æ–º –¥–µ—Ä–µ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ø–ª–æ–¥—ã.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–∞–¥–∏—Ç–µ —Å–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å.\n\n‚ùì –í—ã–ø–æ–ª–Ω—è—è –∫–∞–∂–¥—ã–π 50-–π –∫–≤–µ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ –¥–≤–µ —à—Ç—É–∫–∏"});
      timePassed = (Date.now() - server.treeEntryTimestamp) || 0;
    }

    let embed = {
      title: "–ñ–∏–≤–æ–µ, –∫–ª—É–±–Ω–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
      thumbnail: thumbnailArray[ Math.ceil(level / 4) ],
      description: `–≠—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ–∫–µ–∞–Ω –∫–ª—É–±–Ω–∏–∫–∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫. –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –Ω—ë–º: –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ª–∞–º–ø–æ–≤—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤–µ—Å–µ–ª–æ –∏ —Å–ª–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–µ—Ä–µ–≤–æ –Ω–µ –∑–∞—Å–æ—Ö–ª–æ.`,
      fields: fields,
      footer: {text: "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç —Å–æ–±–æ–π –≤–æ–¥—É", iconURL: "https://emojipedia-us.s3.amazonaws.com/source/skype/289/sweat-droplets_1f4a6.png"}
    };

    let message = await msg.msg(embed);



    if (level !== 20){
      await message.react("üå±");
    }

    if (server.berrys >= 1){
      await message.react("756114492055617558");
    }

    let collector = message.createReactionCollector({filter: (r, u) => u.id !== client.user.id && ( r.emoji.name === "üå±" || r.emoji.id === "756114492055617558" ), time: 180000});
    collector.on("collect", async (r, memb) => {
      let react = r.emoji.id || r.emoji.name;
      let user = memb.data;

      if (react === "üå±"){

        if ( level === 20 ){
          msg.msg({title: "–ï—â—ë –±–æ–ª—å—à–µ?", description: `–ù–µ –Ω—É–∂–Ω–æ, –¥–µ—Ä–µ–≤–æ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`, author: {name: memb.username, iconURL: memb.avatarURL()}, delete: 7000});
          message.reactions.resolve("üå±").remove();
          return;
        }


        if (!user.seed){
          msg.msg({title: "–£ –≤–∞—Å –Ω–µ—Ç –°–µ–º—è–Ω", description: `–ì–¥–µ –∏—Ö –¥–æ—Å—Ç–∞—Ç—å? –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã, –∫–∞–∂–¥—ã–π 50-–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–π –∫–≤–µ—Å—Ç –±—É–¥–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å –≤–∞—Å –¥–≤—É–º—è —Å–µ–º–µ—á–∫–∞–º–∏.`, author: {name: memb.username, iconURL: memb.avatarURL()}, delete: 7000});
          return;
        }


        server.treeSeedEntry = (server.treeSeedEntry ?? 0) + 1;
        user.seed--;
        msg.msg({title: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–µ–º–µ—á–∫–æ, ${memb.username}`, description: `üå± `, delete: 7000});

        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è
        if (server.treeSeedEntry >= costsUp){
          server.treeSeedEntry = 0;
          level = server.treeLevel = (server.treeLevel ?? 0) + 1;
          costsUp = COSTS_TABLE[level];
          server.berrys = Math.round(1.5 ** (level + 3) + server.berrys);
          server.berrys = (server.berrys ?? 0) + getSpeedGrowth(level) * 5;

          await message.react("756114492055617558");
          embed.thumbnail = thumbnailArray[ Math.ceil(level / 4) ];

          msg.msg({title: "–î–µ—Ä–µ–≤–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ—Å–ª–æ", description: `–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–µ–º–µ—á–∫–∞ üå±, –¥–µ—Ä–µ–≤–æ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ –∏ –¥–æ—Å—Ç–∏–≥–ª–æ —É—Ä–æ–≤–Ω—è ${ level }!`});
          delete server.treeMisstakes;
        }


      }


      // Berry take
      if (react === "756114492055617558"){
        if (user.CD_54 > Date.now()){
          msg.msg({title: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞...", description: `–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∫–ª—É–±–Ω–∏–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ **${Util.timestampToDate( user.CD_54 - Date.now() )}**`, footer: {text: "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–∞"}, author: {name: memb.username, iconURL: memb.avatarURL()}, delete: 7000, color: "#ff0000"});
          return;
        }

        if (server.berrys < 1){
          msg.msg({title: "–£–ø—Å..!", description: "–ù–∞ –¥–µ—Ä–µ–≤–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫–ª—É–±–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å –∫–ª—É–±–Ω–∏–∫—É —Ä–∞–Ω—å—à–µ –≤–∞—Å.. –ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –¥–æ–∑—Ä–µ–µ—Ç —Å–ª–µ–¥—É—â–∞—è, –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –µ—ë!", author: {name: memb.username, iconURL: memb.avatarURL()}, delete: 7000, color: "#ff0000"});
          return;
        }

        const isBerryMany = server.berrys > getSpeedGrowth(level) * 3;

        const farmerBonus = user.voidTreeFarm ?? 0;
        let berrys = isBerryMany ?
          Util.random(1 + farmerBonus, 3 + farmerBonus * 2, {round: false}) :
          1 + farmerBonus;

        berrys = Math.min(Math.floor(berrys), Math.floor(server.berrys));


        user.berrys += berrys;
        server.berrys -= berrys;

        DataManager.data.bot.berrysPrise += berrys * 0.2;
        msg.msg({
          title: "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –∫–ª—É–±–Ω–∏–∫—É",
          author: {name: memb.username, iconURL: memb.avatarURL()},
          description: `${ berrys > 5 ? berrys : ["–ù–æ–ª—å", "–û–¥–Ω–∞", "–î–≤–µ", "–¢—Ä–∏", "–ß–µ—Ç—ã—Ä–µ", "–ü—è—Ç—å"][berrys] } ${ Util.ending(berrys, "—è–≥–æ–¥", "", "–∞", "—ã", {unite: (_quantity, word) => word}) } ${Util.ending(berrys, "–ø–æ–ø–∞", "–¥–∞—é—Ç", "–ª–∞", "–ª–∏", {unite: (_quantity, word) => word})} –≤ –≤–∞—à –∫–∞—Ä–º–∞–Ω <:berry:756114492055617558>`,
          delete: 9000
        });
        user.CD_54 = Date.now() + Math.max( 86400000 / getSpeedGrowth(level) * (1 + level), 7200000 );

        const becomeCoinMessage = async (user) => {
          const collector = new Util.CustomCollector({target: client, event: "message", filter: (message) => message.author.id === user.id, time: 500_000});
          collector.setCallback((message) => {
            collector.end();
            getCoinsFromMessage(user, message);
          });
        }
        if (!random(0, 5)){
          becomeCoinMessage(user);
        }
      }

      fields.splice(0, fields.length);
      fillEmbed();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –∫–ª—É–±–Ω–∏–∫–∏ —Å–æ–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      if (  berrysStarts - Math.floor(server.berrys) > 0 ){
        let berrysTaken = { name: "–ö–ª—É–±–Ω–∏–∫–∏ —Å–æ–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏", value: `${Util.ending(  berrysStarts - Math.floor(server.berrys), "—à—Ç—É–∫", "", "–∞", "–∏"  )};` };
        fields.splice(-1, 0, berrysTaken);
      }

      embed.edit = true;
      await message.msg(embed);
    });

    collector.on("end", message.reactions.removeAll);
  }, {dm: true, type: "other"}, "tree livetree —Å–µ–º–µ—á–∫–æ berrystree –¥–µ—Ä–µ–≤–æ –∫–ª—É–±–Ω–∏—á–Ω–æ–µ–¥–µ—Ä–µ–≤–æ –∂–∏–≤–æ–µ–¥–µ—Ä–µ–≤–æ"),

  youtube: new Command(async (msg, interaction) => {
    if (msg.member.voice.channel){

      const request = {
        method: 'POST',
        body: JSON.stringify({
          max_age: 86400,
          max_uses: 0,
          target_application_id: "880218394199220334",
          target_type: 2,
          temporary: false,
          validate: null
        }),
        headers: {
          'Authorization': `Bot ${client.token}`,
          'Content-Type': 'application/json'
        }
      }

      let res = await fetch(`https://discord.com/api/v8/channels/${msg.member.voice.channel.id}/invites`, request);
      let invite = await res.json();

      if (invite.code === 50013){
        msg.msg({title: "–£ –±–æ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤", description: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"`, delete: 9000, color: "#ff0000"});
        return;
      }

      msg.msg({title: "–ê–∫—Ç–∏–≤–∏—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ", description: `[–ö–ª–∏–∫–Ω–∏—Ç–µ](https://discord.com/invite/${invite.code}), —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–∏—Ç–∏ –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –Æ—Ç—É–±\n–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∏—Å–∫–æ—Ä–¥–∞, —ç—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞-–µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`});
      return;
    }
    msg.msg({title: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ", color: "#ff0000", delete: 7000});
  }, {dm: true, type: "other", myPermissions: 1}, "—é—Ç—É–± —é—Ç—É–±–≤–º–µ—Å—Ç–µ youtubetogether"),

  invites: new Command(async (msg, interaction) => {
    if (interaction.mention){
      const member = msg.guild.members.resolve(interaction.mention);

      const getGuildMemberInvites = async (member) => {
        const guild = member.guild;
        const invites = await guild.invites.fetch();
        
        if (!invites){
          return null;
        }

        return invites.filter(({inviter}) => inviter === member.user);
      }

      const invitesCount = member.user.data.invites || 0;

      const byInvitesCountContent = `–ó–∞ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —É–ø–æ–º—è–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${ Util.ending(invitesCount, "—á–µ–ª–æ–≤–µ–∫", "", "", "–∞") }.`;

      const guildInvites = await getGuildMemberInvites(member);
      const byGuildDataContent = guildInvites && guildInvites.size ? `${ member.displayName } —Å–æ–∑–¥–∞–ª(-a) ${ Util.ending(guildInvites.size, "", "—Å—Å—ã–ª–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π", "—Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", "—Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è") } ‚Äî –ø–æ—Å–µ—Ç–∏–ª–æ ${ Util.ending(guildInvites.reduce((acc, invite) => (invite.uses || 0) + acc, 0), "–ø–µ—Ä—Å–æ–Ω", "", "–∞", "—ã") } <:treeJoke:827441080492490752>` : "";

      const description = `${ byInvitesCountContent }\n${ byGuildDataContent }`;
      const footer = {iconURL: member.user.avatarURL(), text: member.username};

      msg.msg({footer, description});
      return;
    }

    let answer = await Util.awaitUserAccept({name: "invites_command", message: {title: "–ü—Ä–∏—Å–≤–æ–π—Ç–µ —Å—Å—ã–ª–∫–∞–º –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–æ–ª—å", description: "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n–í—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç–µ —Ä–æ–ª—å, –Ω–∞–∑–æ–≤—ë–º –µ—ë \"–§—É–Ω—Ç–∏–∫\" –∏ —Ä–µ—à–∞–µ—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –µ—ë –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —É—Å–ª–æ–≤–∏–π:\n\n1) –í —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏: –í—Å–µ–º –∑–∞—à–µ–¥—à–∏–º —á–µ—Ä–µ–∑ —ç—Ç—É —Å—Å—ã–ª–∫—É –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –§—É–Ω—Ç–∏–∫.\n2) –í—ã–¥–∞–≤–∞–µ–º–∞—è —Ä–æ–ª—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞–ª–∏—á–∏–µ–º —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, \"–•–æ—Ä–æ—à–∏–π –¥—Ä—É–≥\". –õ—é–±–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –•–æ—Ä–æ—à–∏–º –¥—Ä—É–≥–æ–º –ø—Ä–µ–¥–≤–∫—É—à–∞–µ—Ç –§—É–Ω—Ç–∏–∫–∞ \n3) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –µ—Å–ª–∏ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã—à–µ.\n\n–ó–∞—á–µ–º —ç—Ç–æ?\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª; –≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∏ –∏ –ø–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ. –≠—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"}, channel: msg.channel, userData: interaction.userData});
    if (!answer) return;

    const numericReactions = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"];

    const rulesList = msg.guild.data.inviteRules ||= [];
    const getListDescription = (list) => {
      if (list.length === 0){
        return "–û—Ç—Å—É—Å—Ç–≤—É—é—Ç";
      }

      const main = list
        .map(({type, roleId}) => `${ numericReactions.at(type) } <@&${ roleId }>`)
        .join("\n");

      return `üîß\n${ main }`;
    }

    let embed = {
      title: "–ü—Ä–∏—Å–≤–æ–π—Ç–µ —Å—Å—ã–ª–∫–∞–º –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–æ–ª—å",
      description: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª–æ–≤–∏—è:\n\n1) –†–æ–ª—å –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–µ, –∫—Ç–æ –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n2) –í—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å —Ç–µ–º, –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–º–µ—é—â–∏–π –¥–∞–ª–µ–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å (–ü—Ä–∏–≥–ª–∞—Å–∏–ª ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–ª —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä) \n3) –ë—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –≤—Å–µ–º, –∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${ getListDescription(rulesList) }`,
      footer: {
        text: "–û—Ä–∏—Ñ–ª–µ–π–º. –°—Ç–æ–ø-–∫–æ–Ω—Ç—Ä–æ–ª—å"
      }
    }
    let message = await msg.msg(embed);
    embed.edit = true;
    
    let reactions = [...numericReactions, rulesList.length ? "üîß" : null];
    let react = await message.awaitReact({ user: msg.author, type: "all" }, ...reactions);

    if (!react){
      message.delete();
      return;
    }

    // TODO: 
    if (reaction === "üîß"){

    }
      
    // TODO: 
    if (numberReactions.include(reaction)){
      const type = numberReactions.indexOf(reaction);
      embed.description = `**–¢–∏–ø:** ${ ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞", "–Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ", "–≤—ã–¥–∞—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"][type] };\n\n–û—Ç–ª–∏—á–Ω–æ, `;
    }
    
  }, {dm: true, type: "guild", permissions: 8}, "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"),

  casino: new Command(async (msg, interaction) => {
    msg.msg({title: "–ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", description: "–ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ. –ë–æ—é—Å—å —á—Ç–æ –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è.\n–≠—Ç–æ–≥–æ –Ω–µ –º–æ–≥–ª–æ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è, –∏–∑–≤–∏–Ω–∏—Ç–µ.\n\n ‚Äî –ü—Ä–æ—â–∞–π—Ç–µ. ¬©Ô∏è–ú—ç—Ä-–ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä –ë—É–∫–∞—à–∫–∞", delete: 20000});
    return;

    let bet = interaction.params.match(/\d+|\+/);

    if (bet === null){
      msg.msg({title: "–£–∫–∞–∂–∏—Ç–µ –°—Ç–∞–≤–∫—É –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ!", color: "#ff0000", delete: 3000});
      return;
    }
    bet = bet[0];

    if (bet === "+")
      bet = interaction.userData.coins;

    bet = Math.max(0, Math.floor(bet));

    if (interaction.userData.coins < bet){
      msg.msg({title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤", color: "#ff0000", delete: 3000});
      return;
    }

    const diceRoll = Util.random(100);
    const options = {
      title: "–õ–µ—Å–æ–≤–∏—Ç–æ–µ –∫–∞–∑–∏–Ω–æ",
      author: { name: msg.author.username, iconURL: msg.author.avatarURL() },
      delete: 20000,
      footer: {text: `–°—Ç–∞–≤–∫–∞: ${ bet }`}
    }
    const isWon = diceRoll % 2;
    options.description = `
**${ isWon ? "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏." : "–ü—Ä–æ–∏–≥—Ä–∞–ª–∏" }**
**–ö–∏–¥–∞–µ–º –∫—É–±–∏–∫.. –≤—ã–ø–∞–¥–∞–µ—Ç:** \`${ diceRoll }\`; ${ isWon ? "ü¶ù" : "‚ùå" }

${ isWon ? `\\*–í–∞–º –¥–æ—Å—Ç–∞–µ—Ç—Å—è –∫—É—à ‚Äî ${ Util.ending(bet * 2, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞") } <:coin:637533074879414272>\\*` : "–ß—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –¥–æ–∂–Ω–æ –≤—ã–ø–∞—Å—Ç—å —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2" }
    `;

    interaction.userData.coins -= (-1) ** isWon * bet;
    msg.msg(options);
  }, {type: "other", delete: true, dev: true}, "–∫–∞–∑–∏–Ω–æ bet —Å—Ç–∞–≤–∫–∞"),

  bag: new Command(async (msg, interaction) => {

    if (interaction.mention){
      msg.msg({title: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", color: "#ff0000", delete: 15_000});
      return;
    }

    const user = interaction.userData;


    class ItemTaker {
      display(...args){
        return this.ending(...args);
      }

      // Default getter
      getter({target}){
        return target[this.key];
      }
      setter({target, count}){
        return target[this.key] = count;
      };

      getLimit(){
        return this.limit || null;
      }
    }

    const ITEMS = [
      {
        key: "coins",
        names: ["–∫–æ–∏–Ω–∞", "–∫–æ–∏–Ω—ã", "–∫–æ–∏–Ω", "–∫–æ–∏–Ω–æ–≤", "coins", "coin", "c", "–∫"],
        ending: (count) => `<:coin:637533074879414272> ${ Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞") }`
      },
      {
        key: "exp",
        names: ["–æ–ø—ã—Ç–∞", "–æ–ø—ã—Ç", "–æ–ø—ã—Ç–æ–≤", "exp", "experience"],
        ending: (count) => `<:crys2:763767958559391795> ${ Util.ending(count, "–û–ø—ã—Ç", "–∞", "", "–∞") }`
      },
      {
        key: "chestBonus",
        names: ["–±–æ–Ω—É—Å–æ–≤", "–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å–∞", "—Å—É–Ω–¥—É–∫–∞", "—Å—É–Ω–¥—É–∫–æ–≤", "—Å—É–Ω–¥—É–∫", "–±–æ–Ω—É—Å–æ–≤ —Å—É–Ω–¥—É–∫–∞", "chestbonus"],
        ending: (count) => `<a:chest:805405279326961684> ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") } —Å—É–Ω–¥—É–∫–∞`
      },
      {
        key: "void",
        names: ["–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "void", "–∫–∞–º–µ–Ω—å", "–∫–∞–º–Ω–µ–π", "–∫–∞–º–Ω—è"],
        ending: (count) => `<a:void:768047066890895360> ${ Util.ending(count, "–ö–∞–º", "–Ω–µ–π", "–µ–Ω—å", "–Ω—è") } –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏`
      },
      {
        key: "berrys",
        names: ["–∫–ª—É–±–Ω–∏–∫", "–∫–ª—É–±–Ω–∏–∫–∏", "–∫–ª—É–±–Ω–∏–∫–∞", "–∫–ª—É–±–Ω–∏—É", "—è–≥–æ–¥—ã", "—è–≥–æ–¥", "—è–≥–æ–¥–∞", "berry", "berrys"],
        ending: (count) => `<:berry:756114492055617558> ${ Util.ending(count, "–ö–ª—É–±–Ω–∏–∫", "", "–∞", "–∏") }`
      },
      {
        key: "chilli",
        names: ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—Ü–µ–≤", "–ø–µ—Ä—Ü–∞", "chilli"],
        ending: (count) => `üå∂Ô∏è ${ Util.ending(count, "–ü–µ—Ä", "—Ü–µ–≤", "–µ—Ü", "—Ü–∞") }`
      },
      {
        key: "monster",
        names: ["–º–æ–Ω—Å—Ç—Ä", "–º–æ–Ω—Å—Ç—Ä–æ–≤", "–º–æ–Ω—Å—Ç—Ä–∞", "monster"],
        ending: (count) => `üê≤ ${ Util.ending(count, "–ú–æ–Ω—Å—Ç—Ä", "–æ–≤", "", "–∞") }`
      },
      {
        key: "thiefGloves",
        names: ["–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø–µ—Ä—á–∞—Ç–∫—É", "–ø–µ—Ä—á–∞—Ç–∫–∞", "–ø–µ—Ä—á–∞—Ç–æ–∫", "glove", "gloves"],
        ending: () => `üß§ ${ Util.ending(count, "–ü–µ—Ä—á–∞—Ç", "–∫–∏", "—É", "–∫–∏") }`,
        display: (count) => `üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ ${ count }—à—Ç.`,
        getter: ({target}) => {
          const isUser = "id" in target;

          if (isUser){
            const thiefGloves = (target.thiefGloves || "0|0")
              .split("|");

            const [gloves, ...rest] = thiefGloves;
            return +gloves;
          }

          if (!isUser){
            return target.thiefGloves;
          }
        },
        setter: ({target, count}) => {
          const isUser = "id" in target;

          if (isUser){
            const thiefGloves = (target.thiefGloves || "0|0")
              .split("|");

            thiefGloves[0] = count;
            return target.thiefGloves = thiefGloves.join("|");
          }

          if (!isUser){
            return target.thiefGloves = count;
          }
        }
      },
      {
        key: "keys",
        names: ["–∫–ª—é—á", "–∫–ª—é—á–µ–π", "–∫–ª—é—á–∞", "–∫–ª—é—á–∏", "key"],
        ending: (count) => `üî© ${ Util.ending(count, "–ö–ª—é—á", "–µ–π", "", "–∞") }`
      },
      {
        key: "seed",
        names: ["—Å–µ–º–µ—á–∫–æ", "—Å–µ–º–µ—á–µ–∫", "—Å–µ–º—è–Ω", "—Å–µ–º–µ—á–∫–∞", "—Å–µ–º—è—á–µ–∫", "seed"],
        ending: (count) => `üå± ${ Util.ending(count, "–°–µ–º", "—è–Ω", "–µ—á–∫–æ", "–µ—á–∫–∞", {unite: (_quantity, word) => word}) }`
      },
      {
        key: "iq",
        names: ["iq", "icq", "iqbanana", "–∞–π–∫—å—é"],
        ending: (count) => `<a:iq:768047041053196319> ${ count } IQ`
      },
      {
        key: "coinsPerMessage",
        names: ["–∫–æ–∏–Ω–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–Ω–∞–≥—Ä–∞–¥–∞ –∫–æ–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π", "coinsPerMessage"],
        ending: (count) => `‚ú® ${ Util.ending(count, "–ö–æ–∏–Ω", "–æ–≤", "", "–∞") } –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`
      },
      {
        key: "voidCooldown",
        names: ["—É–º–µ–Ω—å—à–µ–Ω–∏–π –∫—É–ª–¥–∞—É–Ω–∞", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞", "—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞", "voidcooldown"],
        limit: 20,
        ending: (count) => `üåÄ ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üåÄ –ë–æ–Ω—É—Å "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞" ${ count }/20`
      },
      {
        key: "voidPrise",
        names: ["—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª", "—Å–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç–µ–ª", "voidprise"],
        limit: 5,
        ending: (count) => `‚öúÔ∏è ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `‚öúÔ∏è –ë–æ–Ω—É—Å "–°–∫–∏–¥–æ–∫ –Ω–∞ –∫–æ—Ç—ë–ª" ${ count }/5`
      },
      {
        key: "voidDouble",
        names: ["–Ω–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏", "voiddouble"],
        limit: 1,
        ending: (count) => `üÉè ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üÉè –ë–æ–Ω—É—Å "–ù–µ—Å—Ç–∞–±–∏–ª–∏—Ç–∏" ${ count }/1`
      },
      {
        key: "voidQuests",
        names: ["—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤", "—É—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞", "voidquests"],
        limit: 5,
        ending: (count) => `üî± ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üî± –ë–æ–Ω—É—Å "–£—Å–∏–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤" ${ count }/5`
      },
      {
        key: "voidCoins",
        names: ["—à–∞–Ω—Å –∫–æ–∏–Ω–∞", "—à–∞–Ω—Å –∫–æ–∏–Ω–æ–≤", "voidcoins"],
        limit: 7,
        ending: (count) => `‚ô¶Ô∏è ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `‚ô¶Ô∏è –ë–æ–Ω—É—Å "–®–∞–Ω—Å –∫–æ–∏–Ω–∞" ${ count }/7`
      },
      {
        key: "voidMonster",
        names: ["–º–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫", "–º–æ–Ω—Å—Ç—Ä –∑–∞—â–∏—Ç–Ω–∏–∫", "voidmonster"],
        limit: 1,
        ending: (count) => `üíñ ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üíñ –ë–æ–Ω—É—Å "–ú–æ–Ω—Å—Ç—Ä-–∑–∞—â–∏—Ç–Ω–∏–∫" ${ count }/1`
      },
      {
        key: "voidThief",
        names: ["–±–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫", "voidthief"],
        ending: (count) => `üí† ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üí† –ë–æ–Ω—É—Å "–ë–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä—á–∞—Ç–æ–∫" ${ count }`
      },
      {
        key: "voidMysticClover",
        names: ["—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –∫–ª–µ–≤–µ—Ä", "—É–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä", "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏–µ –∫–ª–µ–≤–µ—Ä–∞", "–∑–∞–≤–æ—Ä–æ–∂–∏—Ç—å –∫–ª–µ–≤–µ—Ä", "–∑–∞–≤–æ—Ä–æ–∂–µ–Ω–∏—è –∫–ª–µ–≤–µ—Ä–∞", "voidmysticclover"],
        ending: (count) => `üçµ ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üçµ –ë–æ–Ω—É—Å "–£–º–µ–Ω–∏–µ –∑–∞–≤–æ—Ä–æ–∂. –ö–ª–µ–≤–µ—Ä" ${ count }/50`
      },
      {
        key: "voidTreeFarm",
        names: ["—Ñ–µ—Ä–º–µ—Ä", "—Ñ–µ—Ä–º–µ—Ä–æ–≤", "—Ñ–µ—Ä–º–µ—Ä–∞", "voidtreefarm"],
        ending: (count) => `üìï ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `üìï –ë–æ–Ω—É—Å "–§–µ—Ä–º–µ—Ä" ${ count }`
      },
      {
        key: "voidCasino",
        names: ["–∫–∞–∑–∏–Ω–æ", "voidcasino"],
        limit: 1,
        ending: (count) => `ü•Ç ${ Util.ending(count, "–ë–æ–Ω—É—Å", "–æ–≤", "", "–∞") }`,
        display: (count) => `ü•Ç –ë–æ–Ω—É—Å "–ö–∞–∑–∏–Ω–æ" ${ count }/1`
      }
    ];

    ITEMS.forEach(item => item.__proto__ = ItemTaker.prototype);




    const displayBag = () => {

      const items = Object.entries( user.bag || {} )
        .map(([key, count]) => ({
          itemData: ITEMS.find(item => item.key === key),
          count
        }))
        .filter(({itemData}) => itemData !== undefined)
        .map(({itemData, count}) => itemData.display(count))
        .map(str => `‚Äì ${ str }`);


      const description = items.length ?
        items.join("\n") :
        "–û–Ω–∞ –ø—É—Å—Ç–∞—è!! –ì–∞–¥—ã, –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å..\n!bag put 1 coin";

      const embed = {
        title: "–°—ç—Ä, –í–∞—à–∞ —Å—É–º–∫–∞?",
        description,
        footer: {
          text: `–¢—ã, –°—ç—Ä ${ msg.author.tag }`,
          iconURL: msg.author.avatarURL()
        }
      }
      msg.msg(embed);
      return;
    };




    const moveItem = (key, count, isToBag) => {

      const item = ITEMS.find(item => item.key === key);
      const targetFrom = isToBag ?   user   : user.bag;
      const targetTo   = isToBag ? user.bag : user;

      if (count === "+"){

        const value = item.getter({ target: targetFrom });
        count = value ?? 0;
      }
      count = Math.max(Math.floor( count ), 0);


      if (user[key] === undefined)
        item.setter({ count: 0, target: user });

      if (user.bag[key] === undefined)
        item.setter({ count: 0, target: user.bag });

      const currentCount = item.getter({ target: targetFrom });
      if (currentCount < count){
        const description = `–ù–∞–¥–æ –Ω–∞ ${ item.ending(count - currentCount) } –±–æ–ª—å—à–µ!`;
        msg.msg({title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞", delete: 7000, description});
        return;
      }

      if (item.getLimit() && !isToBag){
        const current = item.getter({ target: targetTo });
        const limit = item.getLimit();
        count = Math.min(count, limit - current);
      }


      item.setter({
        target: targetFrom,
        count: item.getter({ target: targetFrom }) - count
      })
      item.setter({
        target: targetTo,
        count: item.getter({ target: targetTo   }) + count
      })

      const bagDescription = isToBag ? "–≤ –∞-–ª—è –≤–∞–∫—É—É–º–Ω—ã–π –æ–±—ä–µ–∫—Ç" : "–∏–∑ —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã";
      const description = `–í—ã —É—Å–ø–µ—à–Ω–æ ${ isToBag ? "–ø–æ–ª–æ–∂–∏–ª–∏" : "–≤–∑—è–ª–∏" } ${ item.ending(count) } ${ bagDescription }.`;
      msg.msg({title: `–î–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–º–∫–∞ ${ msg.author.tag }`, delete: 9000, description});
    }


    let action = interaction.params.match(/–≤–∑—è—Ç—å|take|–ø–æ–ª–æ–∂–∏—Ç—å|put/);
    action = action && action[0];

    let count = interaction.params.match(/\d+|\+/);
    count = count && count[0];
    let item;

    if (action && count){
      interaction.params = interaction.params.replace(action, "");
      interaction.params = interaction.params.replace(count, "");
      const itemName = interaction.params = interaction.params.trim().toLowerCase();

      item = ITEMS.find(item => item.names.includes(itemName));
      if (!item){
        const list = ITEMS.reduce((acc, item) => acc.concat(item.names), []);
        const similarItem = Util.getSimilar(list, itemName);
        msg.msg({title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç:", description: `\`${ itemName }\`${ similarItem ? `\n\n–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É: ${ similarItem }?` : "" }`, delete: 7000});
      }
    }



    // Run;

    if (item){
      const isToBag = action === "–ø–æ–ª–æ–∂–∏—Ç—å" || action === "put";

      if (!user.bag)
        user.bag = {};

      moveItem(item.key, count, isToBag);
      return;
    }

    displayBag();
    return;
  }, {type: "user", delete: true}, "—Å—É–º–∫–∞ —Ä—é–∫–∑–∞–∫"),

  boss: new Command(async (msg, interaction) => {
    const member = interaction.mention ?? msg.author;

    const guild = msg.guild;
    const boss = guild.data.boss;

    if (!boss.isArrived){
      const description = boss.apparanceAtDay ? 
        `–ü—Ä–∏–±—É–¥–µ—Ç –ª–∏—à—å ${ Util.toDayDate(boss.apparanceAtDay * 86_400_000) }` :
        "–ú–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";

      msg.msg({description, color: "#000000"});
      return;
    }

    

    const currentHealthPointPercent = Math.ceil((1 - boss.damageTaken / boss.healthThresholder) * 100);
    const description = `–£—Ä–æ–≤–µ–Ω—å: ${ boss.level }.\n–£–π–¥–µ—Ç ${ Util.toDayDate(boss.endingAtDay * 86_400_000) }\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è: ${ currentHealthPointPercent }%`;
    const reactions = ["‚öîÔ∏è", "üïã"];
    const fields = [
      {
        name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        value: Object.entries(BossManager.getUserStats(boss, member.id))
          .map(([key, value]) => `${ key }: ${ Util.toLocaleDelevoperString(value) }`)
          .join("\n")
        
      }
    ];

    const embed = {
      description,
      reactions,
      fields,
      thumbnail: "https://media.discordapp.net/attachments/629546680840093696/1038714401861161000/pngegg_1.png?width=595&height=593",
      footer: {text: member.tag, iconURL: member.avatarURL()}
    }
    const message = await msg.msg(embed);
    
    const filter = (reaction, user) => user.id !== client.user.id && reactions.includes(reaction.emoji.name);
    const collector = message.createReactionCollector({filter, time: 60_000});
    collector.on("collect", async (reaction, user) => {
      reaction.users.remove(user);

      if (reaction.emoji.name === "‚öîÔ∏è"){
        BossManager.userAttack({boss, user, channel: message.channel});
      }

      if (reaction.emoji.name === "üïã"){
        BossManager.createShop({channel: message.channel, user, guild: message.guild});
      }
    });

    collector.on("end", () => message.reactions.removeAll());

  }, {type: "other"}, "–±–æ—Å—Å"),

  dump: new Command(async (msg, interaction) => {
    DataManager.file.write();
    const message = await msg.channel.send({
      files: [{
        attachment: "main/data.json",
        name: new Intl.DateTimeFormat("ru-ru", {year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric"}).format()
      }]
    });

    setTimeout(() => message.delete(), 1_000_000);
  }, {type: "other", cooldown: 100}, "–¥–∞–º–ø")
}

globalThis.commands = commands;



const timeEvents = {
  day_stats: function (isLost){
    let next = new Date(Date.now() + 14500000).setHours(20, 0, 0) - Date.now();
    if (isLost) return TimeEventsManager.create("day_stats", next);

    client.guilds.cache.filter(e => e.data.treeLevel).each(guild => {
      let messagesNeed = (  [0, 70, 120, 180, 255, 370, 490, 610, 730, 930, 1270, 1500, 1720, 2200, 2700, 3200, 3700, 4500, 5200, 6000, 10000][guild.data.treeLevel] + (guild.memberCount * 3) + ((guild.data.day_average || 0) / 5)  ) * ("treeMisstakes" in guild.data ? 1 - 0.1 * guild.data.treeMisstakes : 1);
      // –°–µ–∑–æ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
      messagesNeed = Math.floor(messagesNeed / 3);

      if (guild.data.day_msg < messagesNeed){
        guild.data.treeMisstakes = (guild.data.treeMisstakes ?? 0) + 0.2 + Number( (1 - guild.data.day_msg / messagesNeed).toFixed(1) );
        guild.data.misstake = messagesNeed;

        if (guild.data.treeMisstakes >= 4){
          delete guild.data.treeMisstakes;
          guild.data.treeLevel--;
        }

        return;
      }

      guild.data.treeMisstakes = (guild.data.treeMisstakes ?? 0) - 0.2;

      if (guild.data.treeMisstakes <= 0)
        delete guild.data.treeMisstakes;


    });

    client.guilds.cache.forEach(guild => {
      let data = guild.data;
      let msgs = data.day_msg || 0;

      let misstake = data.misstake;
      delete data.misstake;

      guild.data.coins += 2 * guild.memberCount;

      data.days = data.days + 1 || 1;
      data.msg_total = data.msg_total + msgs || msgs;


      let description = `–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${Util.ending(msgs, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è")}\n–†–µ–∫–æ—Ä–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.day_max || (data.day_max = 0)}`;

      if (data.days > 3) {
        description += `\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${Math.letters(data.msg_total)}\n–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å: ${Math.round(data.msg_total / data.days)}`;
      }

      if (data.day_max < msgs) {
        data.day_max = msgs;
        description += `\n–ì–∏–ª—å–¥–∏—è ${["<a:jeqery:768047102503944202>", "<a:jeqeryBlue:806176327223738409>", "<a:jeqeryPurple:806176181140848660>", "<a:jeqeryGreen:806176083757105162>", "<a:jeqeryRed:806175947447205958>", "<a:blockPink:794615199361400874>", "<a:blockAqua:794166748085223475>"].random()} —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º!`;
      }


      data.day_msg = 0;

      if (!msgs){
        return;
        // description = ["–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–°–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Å—Ç–æ", "–ó–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å –Ω–∏ –æ–¥–∏–Ω —Å–º–µ—Ä—Ç–Ω—ã–π –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–æ—Ö–æ–∂–µ, —Ç–∏—à–∏–Ω–∞ ‚Äî –≤—Ç–æ—Ä–æ–µ –∏–º—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"].random();
      }

      if (misstake)
        description += `\n\n–î–µ—Ä–µ–≤–æ –∑–∞—Å—ã—Ö–∞–µ—Ç! –ï–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞ ${ Util.ending(misstake - msgs, "—Å–æ–æ–±—â–µ–Ω–∏", "–π", "–µ", "—è") } –±–æ–ª—å—à–µ üíß`;

      guild.chatSend({ title: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", description });
    });



    client.guilds.cache.filter(e => e.data.professions).each(guild => {
      let workers = new Set();
      let costs = 0;
      let entries = Object.entries(guild.data.professions);
      if (!entries.length){
        delete guild.data.professions;
        return;
      }


      entries = entries.filter(([id]) => guild.roles.cache.get(id) ? true : delete guild.data.professions[id]);

      guild.members.cache.each(memb => {
        entries.forEach(([id, cost]) => memb.roles.cache.has(id) ? workers.add(memb) && (costs += +cost) : false);
      });
      if (guild.data.coins < costs){
        guild.logSend({title: `–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`, description: `–í –∫–∞–∑–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–∏–Ω–æ–≤, –ª–∏—à—å ${guild.data.coins}, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è ${costs} <:coin:637533074879414272>`, color: "#ffff00"});
        return;
      }

      [...workers].forEach(memb => {
        entries.forEach(([id, cost]) => memb.roles.cache.has(id) ? memb.user.data.coins += +cost : false);
      });
      guild.data.coins -= costs;
      guild.logSend({title: `–ë—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç—ã`, description: `–° –∫–∞–∑–Ω—ã –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω–æ ${Util.ending(costs, "–∫–æ–∏–Ω", "–æ–≤", "", "–∞")} –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ò—Ö —Å–ø–∏—Å–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ \`!–±–∞–Ω–∫\`\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–æ –∫–æ–∏–Ω—ã: ${workers.size}`});

    });

    client.guilds.cache
      .each((guild) => BossManager.beforeApparance(guild));


    return TimeEventsManager.create("day_stats", next);
  },

  cooledBot: function (isLost, guildId){
    if (!guildId) throw "–ò–≤–µ–Ω—Ç –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤";
    delete DataManager.data.guilds.find((el) => el.id == guildId).stupid_evil;
  },

  new_day: async function (isLost){
    let next = new Date(Date.now() + 14500000).setHours(23, 59, 50) - Date.now();
    TimeEventsManager.create("new_day", next);

    

    if (DataManager.data.bot.clearParty) {
      delete DataManager.data.bot.clearParty
      quests.scope = quests.scope.replace(/birthdayParty(\.+?)(?:\s|$)/g, "");
    }
    await Util.sleep(20000);

    const today = Util.toDayDate( Date.now() );
    DataManager.data.bot.dayDate = today;
    DataManager.data.bot.currentDay = Util.timestampDay( Date.now() );

    DataManager.data.bot.grempen = "";
    let arr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e"]; //0123456789abcdef
    for (let i = 1; i < 7; i++) {
      DataManager.data.bot.grempen += arr.random({pop: true});
    }

    let berryRandom = [{_weight: 10, prise: 1}, {_weight: 1, prise: -7}, {_weight: 5, prise: 3}].random({weights: true}).prise;
    let berryTarget = Math.sqrt(client.users.cache.size / 3) * 7 + 200;
    DataManager.data.bot.berrysPrise += Math.round((berryTarget - DataManager.data.bot.berrysPrise) / 30 + berryRandom);

    let birthdaysToday = 0;

    

    if (isLost){
      return;
    }

    client.guilds.cache
      .each((guild) => BossManager.bossApparance(guild));

    client.users.cache.filter(memb => !memb.bot && memb.data.BDay === today).forEach(memb => {
        birthdaysToday++;
        memb.guilds.forEach(guild => quests.scope += " birthdayParty&1&2&3&" + guild.id);
    });

    if (birthdaysToday){
      console.info(`–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${ birthdaysToday } –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)`);
      DataManager.data.bot.clearParty = birthdaysToday;
    }


    

    

    DataManager.data.guilds.forEach(e => e.commandsLaunched = Object.values(e.commandsUsed).reduce((acc, e) => acc + e, 0));
    let commandsLaunched = Object.values(DataManager.data.bot.commandsUsed).reduce( ((acc, e) => acc + e), 0);
    console.info(`\n\n\n      ‚Äî‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–°–µ—Ä–≤–µ—Ä–æ–≤: ${DataManager.data.guilds.length}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${DataManager.data.users.length}\n–ö–∞–Ω–∞–ª–æ–≤: ${client.channels.cache.size}\n\n–¶–µ–Ω–∞ –∫–ª—É–±–Ω–∏–∫–∏: ${DataManager.data.bot.berrysPrise}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${commandsLaunched - DataManager.data.bot.commandsLaunched}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:\n${DataManager.data.guilds.map(e => e.name + ":\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: " + e.commandsLaunched + "\n–†–µ–∫–æ—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏–π: " + e.day_max).join("\n")}\n\n`);
    DataManager.data.bot.commandsLaunched = commandsLaunched;
  },

  postpone: async function (isLost, author, channelId, msg){
    if (isLost) client.users.cache.get(author).msg({title: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç —è –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω :(", description: msg});
    let channel = client.channels.cache.get(channelId);
    if (!channel) return;
    author = channel.guild.members.cache.get(author);
    let webhook = await channel.createWebhook(author.displayName, {avatar: author.user.avatarURL()});
    await webhook.msg({content: msg});
    webhook.delete();
  },

  remind: async function (isLost, authorId, channelId, phrase){
    const channel = client.channels.cache.get(channelId);
    const author  = client.users.cache.get(authorId);

    const target = channel || author;

    if (target !== author)
      target.msg({content: author.toString(), mentions: [author.id]});
      
    target.msg({title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", description: phrase, footer: isLost ? null : "–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è. –Ø –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω."});

  },

  giveaway: async function (isLost, channelId, messageId, winners, roleId){
    let channel = client.channels.cache.get("" + channelId);
    let giveaway = await channel.messages.fetch(messageId);
    if (!giveaway) {
      return;
    }

    let users = await giveaway.reactions.resolve("üå≤").users.fetch();

    winners = users.filter(e => !e.bot).random(+winners).filter(e => e);
    giveaway.msg({title: giveaway.embeds[0].title, color: "#7ab160", edit: true, description: giveaway.embeds[0].description + (winners[0] ? `\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö: ${users.filter(e => !e.bot).size}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winners.length} üå≤` : "\n**–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ—Ç –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π..**"), footer: {text: "–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}, timestamp: giveaway.embeds[0].timestamp});
    if (!winners[0]) {
      return;
    }
    client.api.channels(channelId).messages.post({data: {"embed": {"title": "–ü—Ä–∏–≤–µ—Ç, —É–¥–∞—á–∞ ‚Äî —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "color": 	8040800, "description": `${winners.map(e => ["üçÉ", "‚òòÔ∏è", "üåø", "üå±", "üåº"].random() + " " + e.toString()).join("\n")}\n–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!`, footer: {"text": "–ú–∏—Ä–∞ –∏ —É–¥–∞—á–∏ –≤—Å–µ–º"}}, "content": "", "message_reference": {message_id: messageId}}});

    if (roleId) {
      winners.forEach(e => channel.guild.members.resolve(e).roles.add(roleId, "Win In Giveway"));
    }
    await Util.sleep(1000);
    giveaway.reactions.cache.get("üå≤").remove();
  },

  autosave: function(isLost){
    DataManager.file.write();
    return TimeEventsManager.create("autosave", 7200000);
  },

  cloverEnd: function(isLost, guildId, channelId){
    let guild = client.guilds.cache.get(guildId);
    if (!guild){
      return;
    }
    let effect = guild.data.cloverEffect;

    let channel = guild.channels.cache.get(channelId);
    let multiplier = 1.08 + (0.07 * ((1 - 0.9242 ** effect.uses) / (1 - 0.9242)));
    channel.msg({title: "‚òòÔ∏è –ò–≤–µ–Ω—Ç –ö–ª–µ–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è", color: "#21c96c", description: `–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥ –≤–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞: ${effect.coins}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: X${multiplier.toFixed(2)}\n–ö—É–ø–ª–µ–Ω–æ –∫–ª–µ–≤–µ—Ä–æ–≤: ${effect.uses}\n–ö–ª–µ–≤–µ—Ä –¥–ª–∏–ª—Å—è ${((Date.now() - effect.timestamp) / 3600000).toFixed(1)}—á.`});
    delete guild.data.cloverEffect;
  },

  offMuteAutomatic: function(isLost, guildId, memberId){
    let guild = client.guilds.cache.get(guildId);
    let member = guild.members.resolve(memberId);
    if ( !member.roles.cache.get(guild.data.mute_role) ){
      return;
    }

    guild.logSend({title: "–î–µ–π—Å—Ç–≤–∏–µ –º—É—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", description: `–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –ø—Ä–æ—à–µ–¥—Å—Ç–≤–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö.`, author: {name: member.displayName, iconURL: member.user.displayAvatarURL()}});
    member.roles.remove(guild.data.mute_role);
  },

  curseTimeoutEnd: function(isLost, userId, timestamp){
    const user = client.users.cache.get(userId);
    const curses = user.data.curses;
    
    const compare = curse => curse.timestamp === timestamp;
    const curse = curses.find(compare);

    if (!curse){
      return;
    }

    CurseManager.checkAvailable({user, curse});
  }
};


//---------------------------------{#End--}------------------------------                            #ff0

(async () => {
  await DataManager.file.load();
  await TimeEventsManager.file.load();
  // await ReactionsManager.loadReactionsFromFile();
  await CounterManager.file.load();


  DataManager.extendsGlobalPrototypes();
  ActionManager.extendsGlobalPrototypes();

  await CommandsManager.importCommands(Object.entries(commands));
  CommandsManager.createCallMap();



  TimeEventsManager.emitter.on("event", (event) => {
    const params = event.params ?? [];
    timeEvents[event.name].call(null, event.isLost, ...params);
  })

  let cleanTimestamp = Date.now();
  DataManager.data.users.forEach(user =>
    Object.keys(user).forEach(key => key.startsWith("CD") && user[key] < cleanTimestamp ? delete user[key] : false)
  );
  DataManager.data.users = DataManager.data.users.sort((a, b) => b.level - a.level);

  if (DataManager.data.bot.dayDate !== Util.toDayDate( Date.now() )){
    timeEvents["new_day"].call(null, true);
  }

  assert(DataManager.data.users);
  assert(DataManager.data.guilds);
  assert(DataManager.data.bot);
  const defaultData = {
    commandsUsed: {}
  }

  Object.assign(
    DataManager.data.bot, 
    Util.omit(defaultData, (k) => k in DataManager.data.bot === false)
  );

  setTimeout(() => client.login(process.env.DISCORD_TOKEN), 100);
})()


/*
·Ö†·Ö†üí¢
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñÑ‚ñÄ‚ñÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñÑ‚ñÄ‚ñÑ
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñÑ‚ñà‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñà‚ñÑ
‚îÄ‚ñÑ‚ñÑ‚îÄ‚îÄ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚îÄ‚îÄ‚ñÑ‚ñÑ
‚ñà‚ñÑ‚ñÑ‚ñà‚îÄ‚ñà‚ñë‚ñë‚ñÄ‚ñë‚ñë‚î¨‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñà‚îÄ‚ñà‚ñÑ‚ñÑ‚ñà
**
Have a nice day!
**
‚óè‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‡Æú€©€û€©‡Æú‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚óè
*/


console.info(Util.timestampToDate(
  (new Date().getHours() < 20 ?
    new Date().setHours(20, 0, 0) : 
    new Date(Date.now() + 14500000).setHours(20, 0, 0)
  )
  - Date.now()
));



export { client };